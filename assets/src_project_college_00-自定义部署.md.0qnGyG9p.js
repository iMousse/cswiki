import{_ as k,E as c,c as g,J as n,w as p,m as o,a as y,V as d,o as t,b as h,e as r}from"./chunks/framework.syB9hai_.js";const m="/cswiki/assets/20230725163041791.lDFtMM9S.jpg",F="/cswiki/assets/20230725163041941.YCr51kss.jpg",_="/cswiki/assets/20230725163041749.vl2901RP.jpg",u="/cswiki/assets/20230725163042065.iuQfUY6I.jpg",C="/cswiki/assets/20230725163041611.ODER3IIw.jpg",b="/cswiki/assets/20230725163041660.LMpCluHT.jpg",B="/cswiki/assets/20230725163042049.rb9I5epB.jpg",x="/cswiki/assets/20230725163041920.YncpxzfP.jpg",v="/cswiki/assets/20230725163042023.KVPQ_SIk.jpg",f="/cswiki/assets/20230725163042142.IbsV6dAD.jpg",E="/cswiki/assets/20230725163042246.lv7rsCcK.jpg",j="/cswiki/assets/20230725163042386.h0AmHj-T.jpg",w="/cswiki/assets/20230725163042916.6tf9IvQQ.jpg",D="/cswiki/assets/20230725163043224.XO0PyhQv.jpg",A="/cswiki/assets/20230725163042917.0Hf8Vaiv.jpg",P="/cswiki/assets/20230725163042745.YQH5MnbT.jpg",S="/cswiki/assets/20230725163042965.YfyARIhI.jpg",q="/cswiki/assets/20230725163042862.43MpfwUO.jpg",W=JSON.parse('{"title":"1.准备工作","description":"","frontmatter":{},"headers":[],"relativePath":"src/project/college/00-自定义部署.md","filePath":"src/project/college/00-自定义部署.md","lastUpdated":1730648753000}'),I={name:"src/project/college/00-自定义部署.md"},T=o("p",null,"虚拟机体积较大，如果下载困难，也可以自己搭建虚拟机环境。注意，整套环境运行时内存要求在8~10G左右，购买云服务的同学请酌情处理。",-1),z=o("h1",{id:"_1-准备工作",tabindex:"-1"},[y("1.准备工作 "),o("a",{class:"header-anchor",href:"#_1-准备工作","aria-label":'Permalink to "1.准备工作"'},"​")],-1),G=d('<p>正式部署前需要做一些准备工作，如果已经做过可以跳过。</p><h2 id="_1-1-防火墙" tabindex="-1">1.1.防火墙 <a class="header-anchor" href="#_1-1-防火墙" aria-label="Permalink to &quot;1.1.防火墙&quot;">​</a></h2><p>注意，如果是<strong>本地****虚拟机</strong>部署，建议直接<strong>关闭</strong>防火墙。</p><p>如果是<strong>云服务</strong>部署，建议<strong>打开</strong>项目所需的各种<strong>端口</strong>，包括：</p><ul><li>3306</li><li>5672</li><li>6379</li><li>7099</li><li>8080至8093</li><li>8099</li><li>8880</li><li>9200</li><li>9300</li><li>10022</li><li>10880</li><li>15672</li><li>18080</li><li>50000</li></ul><h2 id="_1-2-清理旧软件" tabindex="-1">1.2.清理旧软件 <a class="header-anchor" href="#_1-2-清理旧软件" aria-label="Permalink to &quot;1.2.清理旧软件&quot;">​</a></h2><p>确保虚拟机中的旧的软件、Docker容器都被清除或者关闭开机自启，例如：</p><ul><li>MySQL</li><li>Redis</li><li>Nginx</li><li>JDK（如果已经安装JDK11则无需卸载）</li></ul><h2 id="_1-3-网络" tabindex="-1">1.3.网络 <a class="header-anchor" href="#_1-3-网络" aria-label="Permalink to &quot;1.3.网络&quot;">​</a></h2><p>确保网络畅通，可以访问外网，另外最好是把虚拟机的网络IP设置为192.168.150.101，具体可参考虚拟机导入说明中的《配置VMware网络》</p><h2 id="_1-4-docker镜像" tabindex="-1">1.4.Docker镜像 <a class="header-anchor" href="#_1-4-docker镜像" aria-label="Permalink to &quot;1.4.Docker镜像&quot;">​</a></h2><p>环境中需要安装的软件较多，包括：</p><table><thead><tr><th style="text-align:center;">序号</th><th style="text-align:center;">软件名</th><th style="text-align:center;">镜像名</th></tr></thead><tbody><tr><td style="text-align:center;">1</td><td style="text-align:center;">Elasticsearch</td><td style="text-align:center;">elasticsearch:7.12.1</td></tr><tr><td style="text-align:center;">2</td><td style="text-align:center;">MySQL</td><td style="text-align:center;">mysql</td></tr><tr><td style="text-align:center;">3</td><td style="text-align:center;">Redis</td><td style="text-align:center;">redis</td></tr><tr><td style="text-align:center;">4</td><td style="text-align:center;">RabbitMQ</td><td style="text-align:center;">rabbitmq:3.8-management</td></tr><tr><td style="text-align:center;">5</td><td style="text-align:center;">XXL-JOB</td><td style="text-align:center;">xuxueli/xxl-job-admin:2.3.0</td></tr><tr><td style="text-align:center;">6</td><td style="text-align:center;">Nacos</td><td style="text-align:center;">nacos/nacos-server:v2.1.0-slim</td></tr><tr><td style="text-align:center;">7</td><td style="text-align:center;">Seata</td><td style="text-align:center;">seataio/seata-server</td></tr><tr><td style="text-align:center;">8</td><td style="text-align:center;">Gogs</td><td style="text-align:center;">gogs/gogs:0.12</td></tr><tr><td style="text-align:center;">9</td><td style="text-align:center;">Jenkins</td><td style="text-align:center;">jenkins/jenkins:2.361.1-lts-jdk11</td></tr><tr><td style="text-align:center;">10</td><td style="text-align:center;">Nginx</td><td style="text-align:center;">nginx</td></tr><tr><td style="text-align:center;">11</td><td style="text-align:center;">JDK</td><td style="text-align:center;">openjdk:11.0**-**jre-buster</td></tr></tbody></table><p>镜像体积非常大，建议<strong>提前拉取</strong>对应镜像。</p><p>当然也可以使用课前资料提供的镜像包：</p><p><img src="'+m+'" alt="img" loading="lazy"></p><h1 id="_2-配置内存" tabindex="-1">2.配置内存 <a class="header-anchor" href="#_2-配置内存" aria-label="Permalink to &quot;2.配置内存&quot;">​</a></h1>',17),M=d('<p>虚拟机占用内存较高，需要10G左右。有条件的同学的可以直接设置16G，其他同学至少配置8G内存。如果是购买云服务的同学，请根据自己的经济实力酌情购买。如果内存确实不足，则需要配置虚拟内存来应对，参考2.2节</p><h2 id="_2-1-配置基础内存" tabindex="-1">2.1.配置基础内存 <a class="header-anchor" href="#_2-1-配置基础内存" aria-label="Permalink to &quot;2.1.配置基础内存&quot;">​</a></h2><p>在VMware中设置：</p><p><img src="'+F+'" alt="img" loading="lazy"></p><p>设置内存为8G（有条件的同学选择16G）：</p><p><img src="'+_+'" alt="img" loading="lazy"></p><p>还有CPU核数，有条件的话尽可能调高：</p><p><img src="'+u+'" alt="img" loading="lazy"></p><h2 id="_2-2-配置虚拟内存" tabindex="-1">2.2.配置虚拟内存 <a class="header-anchor" href="#_2-2-配置虚拟内存" aria-label="Permalink to &quot;2.2.配置虚拟内存&quot;">​</a></h2><p>如果你的虚拟机已经设置了16G内存，则可以<strong>跳过</strong>下面的步骤。</p><p>首先通过命令查看自己的虚拟内存：</p><div class="language-Bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">free</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -h</span></span></code></pre></div><p>如图：</p><p><img src="'+C+'" alt="img" loading="lazy"></p><p>Swap后面的total就是虚拟内存大小。我这台机器已经有2G虚拟内存，有些同学这里可能为0，也有些可能是7.9。</p><p>如果swap后面的total已经大于5G，则<strong>跳过</strong>后面的步骤。</p><p>如果虚拟内存不足，则需要添加虚拟及内存。</p><p>首先，创建虚拟机内存文件：</p><div class="language-Bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> if=/dev/zero of=/root/swapfile bs=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">M count=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8192</span></span></code></pre></div><p>此步骤可能会花费较长时间，需要耐心等待。</p><p><img src="'+b+'" alt="img" loading="lazy"></p><p>查看/root目录的虚拟机内存文件：</p><p><img src="'+B+`" alt="img" loading="lazy"></p><p>接着我们还需要构建虚拟内存：</p><div class="language-Bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 构建</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mkswap</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /root/swapfile</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#激活</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">swapon</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /root/swapfile</span></span></code></pre></div><p><img src="`+x+'" alt="img" loading="lazy"></p><p>提示说文件权限不安全，需要设置为600，避免非root用户操作文件：</p><div class="language-Bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">chmod</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 600</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /root/swapfile</span></span></code></pre></div><p><img src="'+v+'" alt="img" loading="lazy"></p><p>再次通过<code>free -h</code>命令查看虚拟内存大小：</p><p><img src="'+f+'" alt="img" loading="lazy"></p><p>已经达到8G了</p><h1 id="_3-搭建环境" tabindex="-1">3.搭建环境 <a class="header-anchor" href="#_3-搭建环境" aria-label="Permalink to &quot;3.搭建环境&quot;">​</a></h1>',33),V=d('<p>接下来，就可以部署环境了，不过要注意，确保你的虚拟机满足下列条件：</p><ul><li>安装完成Docker</li><li>安装完成DockerCompose</li><li>可以连接网络</li><li>内存超过达到16G，或者内存+虚拟内存达到16G</li></ul><p>接下来，我们就可以部署项目环境了。</p><h2 id="_3-1-上传脚本" tabindex="-1">3.1.上传脚本 <a class="header-anchor" href="#_3-1-上传脚本" aria-label="Permalink to &quot;3.1.上传脚本&quot;">​</a></h2><p>首先，我们需要上传课前资料准备的脚本：</p><p><img src="'+E+'" alt="img" loading="lazy"></p><p>介绍：</p><ul><li>init.sh：搭建环境的脚本</li><li>tjxt.env.tar.gz：项目环境数据</li></ul><p>我们将其上传到任意目录，比如 <code>/root</code>目录：</p><p><img src="'+j+`" alt="img" loading="lazy"></p><h2 id="_3-2-执行脚本" tabindex="-1">3.2.执行脚本 <a class="header-anchor" href="#_3-2-执行脚本" aria-label="Permalink to &quot;3.2.执行脚本&quot;">​</a></h2><p>接下来，执行<code>init.sh</code>脚本。注意，命令后面的 <code>-i 192.168.150.101</code> 需要修改成你自己的虚拟机IP地址</p><div class="language-Bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 将 192.168.150.101修改成你自己的虚拟机IP地址</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sh</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> init.sh -i </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">192.168</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.150.101</span></span></code></pre></div><p>运行效果：</p><p><img src="`+w+`" alt="img" loading="lazy"></p><p>注意，脚本运行完成后，请重启自己的虚拟机，让Docker挂载生效</p><p>注意，如果发现seata容器启动失败，一般是因为nacos启动太慢导致，可以手动重启seata容器。</p><div class="language-Bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> restart seata</span></span></code></pre></div><p>环境中配置了别名，具体映射关系如下：</p><div class="language-Shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">alias</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> dps</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;docker ps --format &quot;table{{.ID}}\\t{{.Names}}\\t{{.Status}}\\t{{.Ports}}&quot;&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">alias</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> dis</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;docker images&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">alias</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> dexe</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;docker exec -it&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">alias</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> dlog</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;docker logs&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">alias</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> dc</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;docker-compose&#39;</span></span></code></pre></div><p>因此，大家可以利用命令快捷操作，例如：</p><div class="language-Shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 查看运行中的容器</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dps</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 查看镜像</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dis</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 启动所有环境中间件，注意，需要在/usr/local/src目录下运行，因为docker-compose.yml文件在这个目录</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dc</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> up -d</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 停止所有环境中间件</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dc</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> stop</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 停止并移除所有中间件</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dc</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> down</span></span></code></pre></div><h2 id="_3-3-配置本地hosts" tabindex="-1">3.3.配置本地hosts <a class="header-anchor" href="#_3-3-配置本地hosts" aria-label="Permalink to &quot;3.3.配置本地hosts&quot;">​</a></h2><p>为了方便我们访问环境中提供的MQ、Nacos、GOGS、Jenkins等服务的控制台，我们可以将虚拟机IP映射到一个域名上。</p><p>假如你的虚拟机IP地址是192.168.150.101，则映射关系如下：</p><div class="language-Shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">192.168.150.101</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> git.tianji.com</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">192.168.150.101</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> jenkins.tianji.com</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">192.168.150.101</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mq.tianji.com</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">192.168.150.101</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nacos.tianji.com</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">192.168.150.101</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> xxljob.tianji.com</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">192.168.150.101</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> es.tianji.com</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">192.168.150.101</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> api.tianji.com</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">192.168.150.101</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> www.tianji.com</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">192.168.150.101</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> manage.tianji.com</span></span></code></pre></div><p>将上述内容写入本地的hosts文件即可，不同操作系统hosts文件目录不同：</p><ul><li>Windows：在 <code>C:\\WINDOWS\\System32\\drivers\\etc\\HOSTS</code></li><li>Linux/MacOS：<code>/etc/hosts</code></li></ul><p>现在，我们访问域名时，就会被请求转发到虚拟机IP地址，而虚拟机中的Nginx则会将请求转发到具体的服务上。</p><p>例如，访问代码仓库，使用这个地址：</p><p><a href="http://git.tianji.com" target="_blank" rel="noreferrer">http://git.tianji.com</a></p><p><img src="`+D+'" alt="img" loading="lazy"></p><h2 id="_3-4-配置webhook地址" tabindex="-1">3.4.配置WebHook地址 <a class="header-anchor" href="#_3-4-配置webhook地址" aria-label="Permalink to &quot;3.4.配置WebHook地址&quot;">​</a></h2><p>环境中配置了持续集成功能，也就是当我们向Git仓库推送代码时，会自动触发项目构建。但是构建的目标服务器地址无法通过脚本设置，需要大家手动修改。</p><p>访问GOGS页面：</p><p><a href="http://git.tianji.com/" target="_blank" rel="noreferrer">http://git.tianji.com/</a></p><p>账户、密码是：tjxt/123321</p><p>然后访问tjxt仓库：</p><p><img src="'+A+'" alt="img" loading="lazy"></p><p>然后进入仓库设置：</p><p><img src="'+P+'" alt="img" loading="lazy"></p><p>然后进入web钩子设置，可以看到现有的钩子访问的192.168.150.101这个地址：</p><p><img src="'+S+'" alt="img" loading="lazy"></p><p>点击修改，进入web钩子页面：</p><p><img src="'+q+'" alt="img" loading="lazy"></p><p>将其中的IP地址修改为你自己的虚拟机地址后，点击更新Web钩子按钮即可。</p>',46);function N(s,$,O,Q,R,J){const e=c("ArticleMetadata"),l=c("ClientOnly");return t(),g("div",null,[T,z,n(l,null,{default:p(()=>{var i,a;return[(((i=s.$frontmatter)==null?void 0:i.aside)??!0)&&(((a=s.$frontmatter)==null?void 0:a.showArticleMetadata)??!0)?(t(),h(e,{key:0,article:s.$frontmatter},null,8,["article"])):r("",!0)]}),_:1}),G,n(l,null,{default:p(()=>{var i,a;return[(((i=s.$frontmatter)==null?void 0:i.aside)??!0)&&(((a=s.$frontmatter)==null?void 0:a.showArticleMetadata)??!0)?(t(),h(e,{key:0,article:s.$frontmatter},null,8,["article"])):r("",!0)]}),_:1}),M,n(l,null,{default:p(()=>{var i,a;return[(((i=s.$frontmatter)==null?void 0:i.aside)??!0)&&(((a=s.$frontmatter)==null?void 0:a.showArticleMetadata)??!0)?(t(),h(e,{key:0,article:s.$frontmatter},null,8,["article"])):r("",!0)]}),_:1}),V])}const K=k(I,[["render",N]]);export{W as __pageData,K as default};
