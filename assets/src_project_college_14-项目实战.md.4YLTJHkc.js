import{_ as c,E as q,c as h,J as s,w as d,m as l,a as g,V as p,o as r,b as u,e as n}from"./chunks/framework.syB9hai_.js";const m="/cswiki/assets/20230725155525647.Rk-ohQiz.jpg",_="/cswiki/assets/20230725155528200.YN39N-ly.jpg",b="/cswiki/assets/20230725155526384.nB4cmq6p.jpg",f="/cswiki/assets/20230725155526007.Rd7VN_GI.jpg",y="/cswiki/assets/20230725155526058.a3HKmifg.jpg",k="/cswiki/assets/20230725155526291.tXGSLEfB.jpg",P="/cswiki/assets/20230725155526199.AIKO0Avi.jpg",w="/cswiki/assets/20230725155527048.KrECZEsD.jpg",T="/cswiki/assets/20230725155527348.0ZOlAjjO.jpg",j="/cswiki/assets/20230725155526980.60rtTlf5.jpg",z="/cswiki/assets/20230725155527029.eaqVy_5h.jpg",x="/cswiki/assets/20230725155527237.xioDklgg.jpg",N="/cswiki/assets/20230725155527429.aJl7tKv5.jpg",R="/cswiki/assets/20230725155527507.pvH-jSxF.jpg",A="/cswiki/assets/20230725155527659.WOORXY44.jpg",I="/cswiki/assets/20230725155527798.buua99IN.jpg",E="/cswiki/assets/20230725155527590.JhClX7fn.jpg",M="/cswiki/assets/20230725155529525.OVNZAFox.jpg",S="/cswiki/assets/20230725155528209.sFKtHVgn.jpg",$="/cswiki/assets/20230725155528568.0FOI7gB2.jpg",V="/cswiki/assets/20230725155528094.Q56vD0-J.jpg",O="/cswiki/assets/20230725155528918.TFgj1Pcz.jpg",v="/cswiki/assets/image-20240214025349149.CAcHnq-u.png",C="/cswiki/assets/20230725155528890.Jgs7pKsM.jpg",D="/cswiki/assets/image-20240214025419342.cOLBw-z6.png",B="/cswiki/assets/20230725155527429.aJl7tKv5.jpg",J="/cswiki/assets/20230725155527507.pvH-jSxF.jpg",K="/cswiki/assets/20230725155529717.gBMUp2uw.jpg",G="/cswiki/assets/image-20240214025436699.7Oklme7w.png",dt=JSON.parse('{"title":"1.背景说明","description":"","frontmatter":{},"headers":[],"relativePath":"src/project/college/14-项目实战.md","filePath":"src/project/college/14-项目实战.md","lastUpdated":1730648753000}'),Z={name:"src/project/college/14-项目实战.md"},F=l("h1",{id:"_1-背景说明",tabindex:"-1"},[g("1.背景说明 "),l("a",{class:"header-anchor",href:"#_1-背景说明","aria-label":'Permalink to "1.背景说明"'},"​")],-1),Q=l("p",null,"经过十多天的学习，我们已经掌握了天机学堂项目的整体业务流程，并且参与了部分微服务的开发，对于整个项目也有了更深的理解。",-1),H=l("p",null,"不过天机学堂中还有部分功能没有开发完成，这些功能就交给大家来完成了。加油！",-1),L=l("p",null,[l("img",{src:m,alt:"img",loading:"lazy"})],-1),X=l("h1",{id:"_2-功能需求",tabindex:"-1"},[g("2.功能需求 "),l("a",{class:"header-anchor",href:"#_2-功能需求","aria-label":'Permalink to "2.功能需求"'},"​")],-1),U=p('<p>项目分组实战，目标是完成两个需求，分别是</p><ul><li>学习中心微服务-学习笔记功能 （★★★☆☆）</li><li>考试微服务-考试评测功能 （★★★☆☆）</li></ul><p>详细功能需求参考页面原型：</p><p>用户端：</p><p><a href="https://codesign.qq.com/s/JG2mj7n1P3ZVKdM/preview/prototype/XMx86jzyQ1Zbrz3" target="_blank" rel="noreferrer">https://codesign.qq.com/s/JG2mj7n1P3ZVKdM/preview/prototype/XMx86jzyQ1Zbrz3</a></p><p>管理端：</p><p><a href="https://codesign.qq.com/app/prototype/Q2kY5j3pb9ExNdK/detail" target="_blank" rel="noreferrer">https://codesign.qq.com/app/prototype/Q2kY5j3pb9ExNdK/detail</a></p><h3 id="_2-1-学习笔记功能" tabindex="-1">2.1.学习笔记功能 <a class="header-anchor" href="#_2-1-学习笔记功能" aria-label="Permalink to &quot;2.1.学习笔记功能&quot;">​</a></h3><p>学员学习视频的过程中会碰到一些重点知识，为了防止遗忘以及自己方便以后复习，最好把这些知识点快速记录下来。因此我们需要提供一个学习笔记功能，供学员快速记录核心知识点。</p><p>而且为了方便后续复习知识，每个笔记都应该带上记录笔记时的视频时间点，与视频播放顺序对应。</p><h4 id="_2-1-1-视频学习页面" tabindex="-1">2.1.1.视频学习页面 <a class="header-anchor" href="#_2-1-1-视频学习页面" aria-label="Permalink to &quot;2.1.1.视频学习页面&quot;">​</a></h4><p>学员在学习的视频的过程中，可以记录学习笔记，也可以查看当前<strong>视频小节</strong>下其他同学记录的笔记（公开的）：</p><p><img src="'+_+'" alt="img" loading="lazy"></p><p>页面需求如下：</p><ol><li><strong>笔记</strong></li></ol><ul><li>我的笔记：用户可以创建笔记 保存笔记会标记视频位置点，根据保存时视频所在位置确定视频时间</li><li>全部笔记：展示其他用户的非私密笔记、自己的所有笔记（不包含采集他人的）</li><li>操作：可以对其他人的笔记<strong>点赞</strong>、<strong>采集</strong>操作；可以对自己笔记做编辑、删除操作</li><li>采集：是将他人笔记复制到我的笔记中且做私密处理，采集他人笔记不会进入到全部笔记中</li></ul><h4 id="_2-1-2-课程详情页面" tabindex="-1">2.1.2.课程详情页面 <a class="header-anchor" href="#_2-1-2-课程详情页面" aria-label="Permalink to &quot;2.1.2.课程详情页面&quot;">​</a></h4><p>除了学习页面以外，在课程详情页面同样可以查看<strong>课程</strong>下的所有笔记：</p><p><img src="'+b+'" alt="img" loading="lazy"></p><p>页面需求如下：</p><ol><li><strong>笔记区</strong></li></ol><ul><li>购买课程的用户才可以看到笔记页面 ，未登录或未购买课程的用户无法看到笔记</li><li>可以查看全部笔记或我的笔记</li><li>笔记可以根据章节查看，点击展开更多展示全部章节</li><li>全部笔记中<strong>不展示</strong>私人笔记、自己采集的笔记</li><li>我的笔记中展示自己写的笔记和自己采集的笔记</li></ul><ol><li><strong>笔记详情</strong></li></ol><ul><li>笔记详情内容包括 发布笔记人、笔记内容、发布时间、点赞数</li><li>本人发布的笔记可以进行删除和编辑</li><li>对其他人发布的笔记可以进行采集操作，采集操作是将他人笔记复制到我的笔记中且做私密处理，采集他人笔记不会进入到全部笔记中</li><li>笔记-用户可以创建笔记 笔记会标记视频位置点，用户可以点击视频点位查看该视频</li></ul><h4 id="_2-1-3-后台管理页面" tabindex="-1">2.1.3.后台管理页面 <a class="header-anchor" href="#_2-1-3-后台管理页面" aria-label="Permalink to &quot;2.1.3.后台管理页面&quot;">​</a></h4><p>后台管理员可以也查看学员笔记，并对笔记进行管理和审核。</p><p>笔记列表页：</p><p><img src="'+f+'" alt="img" loading="lazy"></p><p>页面需求如下：</p><ol><li><strong>搜索条</strong></li></ol><ul><li>笔记状态：显示或隐藏，是指是否在用户端显示</li><li>课程名称：根据课程名称关键字模糊搜索，需要搜索到课程下的所有笔记</li><li>笔记发布时间：就是笔记的创建时间</li></ul><ol><li><strong>数据列表</strong></li></ol><ul><li>单页默认显示10条笔记</li><li>数据来源：仅显示用户发布的公开笔记</li><li>排列顺序：默认按照发布时间倒序排列，用户点击引用次数、点赞次数后，根据对应列排序</li><li>引用次数：就是被采集的次数</li></ul><ol><li><strong>操作</strong></li></ol><ul><li>查看：点击后跳转到笔记详情页</li><li>隐藏：点击隐藏则标记该条笔记为隐藏，在用户端页面不显示</li><li>显示：已经被隐藏的笔记才会显示该按钮，点击后标记该笔记可以在用户端显示</li><li>悬停：当鼠标悬停在笔记内容上时，显示完整笔记内容</li></ul><p>笔记详情页：</p><p><img src="'+y+'" alt="img" loading="lazy"></p><p>页面需求如下：</p><ol><li><strong>课程信息</strong></li></ol><ul><li>课程名称/分类/所属章节：单行需要完整的展示；</li><li>所选时间：所截取的视频时间；</li><li>引用次数：当前引用的总次数；</li><li>用户端是否显示：显示/隐藏</li></ul><ol><li><strong>笔记内容</strong></li></ol><ul><li>笔记作者：显示用户的名称；</li><li>作者手机号：显示用户手机号码；</li><li>笔记发布时间：显示笔记的提交/更新的时间；</li><li>引用人信息：显示引用人用户名；单行最多显示30个字，需完整显示所有引用人用户名；</li></ul><ol><li><strong>审批操作</strong></li></ol><ul><li>用户端是否展示： <ul><li>默认为显示状态，显示状态下，用户端可以查看该笔记，可进行点赞/引用；</li><li>点击【隐藏】，用户端无法查看到该笔记，且该笔记状态从显示 变成 隐藏，出已隐藏的提示；</li></ul></li></ul><h3 id="_2-2-考试评测功能" tabindex="-1">2.2.考试评测功能 <a class="header-anchor" href="#_2-2-考试评测功能" aria-label="Permalink to &quot;2.2.考试评测功能&quot;">​</a></h3><p>学员学完之后肯定需要知道自己对知识的掌握的程度，所以我们提供了考试测评系统。这也是在线教育类网站的必备功能之一。</p><p>考试评测系统分为两大部分：</p><ul><li>管理端： <ul><li>题目管理</li></ul></li><li>学员端： <ul><li>参加考试</li><li>查看考试</li></ul></li></ul><p>其中管理端题目管理部分已经有其他开发人员完成了开发，不过由于工作调动的原因，无法继续后续的开发。因此学员考试等功能就需要我们来完成了。</p><p>接手他人工作这样的事情，在你以后的工作中很常见，我们需要适应。</p><p>通过这部分功能的实现，你能掌握以下技能：</p><ul><li>如何接手他人的项目继续开发</li><li>考试评测系统的设计</li><li>MongoDB的使用</li></ul><h4 id="_2-2-1-试题管理" tabindex="-1">2.2.1.试题管理 <a class="header-anchor" href="#_2-2-1-试题管理" aria-label="Permalink to &quot;2.2.1.试题管理&quot;">​</a></h4><p>当我们接手别人的工作时，首先要做的就是阅读源码。不过，我的建议是你最好跟正常开发类似的步骤来走：</p><ul><li>阅读原型图和需求文档</li><li>分析数据结构设计</li><li>阅读接口设计源码（之前是开发）</li></ul><p>试题管理属于管理端功能，在管理端的题目管理菜单下，首先是列表查询：</p><p><img src="'+k+'" alt="img" loading="lazy"></p><p>页面需求如下：</p><ol><li><strong>搜索条件</strong></li></ol><ul><li>题目分类：也就是课程分类，可以多选</li><li>难易程度：困难、中等、简单，单选</li><li>题目名称：输入题目名称关键字模糊搜索</li><li>题目类型：复选框，目前不支持主观题</li><li>仅看我录入：查找creater等于当前用户的题目</li></ul><ol><li><strong>数据列表</strong></li></ol><ul><li>数据排序：默认按照更新时间倒序排序，单页默认显示10条</li><li>所属分类：三级分类以“/”拼接的字符串</li><li>引用次数：课程的章节需要关联题目，这里引用次数就是被课程关联的次数；点击后根据此字段排序</li><li>作答次数：学员每次考试、测试作答的次数；点击后根据此字段排序</li><li>更新人：最近修改过该题目的人，数据库中对于updater字段</li></ul><ol><li><strong>操作</strong></li></ol><ul><li>新增题目：点击【新增题目】跳转到新增表单，填写并保存题目信息</li><li>查看：点击【查看】跳转到【课程详情页】</li><li>编辑：点击【编辑】跳转到表单页面，需要回显数据</li><li>删除：点击【删除】判断引用次数是否=0，若不等于0，出错误提示，无法删除</li></ul><p>新增/更新 表单页面如下：</p><p><img src="'+P+'" alt="img" loading="lazy"></p><p>题目详情页：</p><p><img src="'+w+'" alt="img" loading="lazy"></p><p>另外，在<strong>添加课程</strong>的过程中，还需要与课程中的小节关联。每一个小节关联10~40道题目，供学生<strong>练习</strong>使用。每一章还可以有一个章节测验，供学生作为<strong>考试</strong>使用。</p><p>在课程新增、编辑表单中，就可以关联试题：</p><p><img src="'+T+'" alt="img" loading="lazy"></p><p>点击【查看题目】，进入题目关联页面：</p><p><img src="'+j+'" alt="img" loading="lazy"></p><p>此处需要根据课程分类搜索题目并展示出来，供页面选择。通过穿梭框选择题目后保存，这样小节和题目的关系就持久化到数据库了。</p><p>以上就是题目管理的所有页面原型，对应的接口包括：</p><ul><li>带条件过滤的分页查询题目</li><li>新增题目</li><li>修改题目</li><li>删除题目</li><li>统计小节的题目数量</li><li>根据小节id查询题目</li><li>批量保存小节与题目关系</li></ul><p>以上功能对应的数据库表、代码全部都已经实现。大家需要自己查看数据库表结构，并且阅读<code>tj-exam</code>中的源码，弄清楚基本的业务逻辑。</p><h4 id="_2-2-2-学员考试" tabindex="-1">2.2.2.学员考试 <a class="header-anchor" href="#_2-2-2-学员考试" aria-label="Permalink to &quot;2.2.2.学员考试&quot;">​</a></h4><p>在用户已经登录的情况下，在学习课程视频的页面，可以看到：</p><p><img src="'+z+'" alt="img" loading="lazy"></p><p>在课程目录中，凡是关联了题目的小节，都会有一个**<code>练习</code><strong>按钮，点击即可开始练习；在每一章的最后一个小节，老师可以设置一个练习小节（不包含视频），作为本章</strong><code>考试</code>**。</p><p>点击练习或考试后，会进入考试页面，如图：</p><p><img src="'+x+'" alt="img" loading="lazy"></p><p>练习、考试的规则如下：</p><ol><li><strong>考试区</strong></li></ol><ul><li>考试类型：分为练习、考试两种</li><li>练习：如果小节关联了题目，则学员可以做小节练习，练习可以重复多次</li><li>考试：如果章的最后设置了阶段考试，当该章所有小节学习完成则可以考试，考试只能参加一次</li><li>时间：练习或考试都需要记录用时</li><li>结束：练习如果中途离开，不保存做题记录；考试如果中途离开，自动结束并提交当前已完成题目。</li></ul><ol><li><strong>目录区</strong></li></ol><ul><li>系统后台设置章节有练习时，课程目录后展示练习按钮，用户可以点击进入该小节练习</li><li>用户在学完本节课程后，如果小节后有练习，则直接弹出练习确认框</li></ul><h4 id="_2-2-3-学员考试记录" tabindex="-1">2.2.3.学员考试记录 <a class="header-anchor" href="#_2-2-3-学员考试记录" aria-label="Permalink to &quot;2.2.3.学员考试记录&quot;">​</a></h4><p>在用户的个人中心，可以查看以往的练习、考试记录：</p><p><img src="'+N+'" alt="img" loading="lazy"></p><p>点击查看即可进入考试详情页面：</p><p><img src="'+R+'" alt="img" loading="lazy"></p><p>页面需求：</p><ol><li>考试记录列表</li></ol><ul><li>数据来源：当前用户的所有考试、练习</li><li>排序方式：默认按照提交时间倒序排序</li></ul><h3 id="_2-3-其它需求" tabindex="-1">2.3.其它需求 <a class="header-anchor" href="#_2-3-其它需求" aria-label="Permalink to &quot;2.3.其它需求&quot;">​</a></h3><p>除了一些页面上能够看到的需求外，还有一些隐含的需求：</p><ul><li>学员考试、写笔记、采集笔记后应该增加用户积分</li><li>学员提交考试结果后，应该自动批改试卷，并记录考试分数</li><li>答题的相关信息（回答次数、正确次数）需要实时更新到题目中，方便后续统计</li><li>考试记录、考试答案信息较多，建议使用MongoDB来存储，MongoDB的用法参考课前资料</li></ul><h1 id="_3-接口规范" tabindex="-1">3.接口规范 <a class="header-anchor" href="#_3-接口规范" aria-label="Permalink to &quot;3.接口规范&quot;">​</a></h1>',100),Y=p('<p>由于我们的前端代码已经实现，</p><h3 id="_3-1-学习笔记功能" tabindex="-1">3.1.学习笔记功能 <a class="header-anchor" href="#_3-1-学习笔记功能" aria-label="Permalink to &quot;3.1.学习笔记功能&quot;">​</a></h3><h4 id="_3-1-1-新增笔记" tabindex="-1">3.1.1.新增笔记 <a class="header-anchor" href="#_3-1-1-新增笔记" aria-label="Permalink to &quot;3.1.1.新增笔记&quot;">​</a></h4><p>在视频学习的过程中，我们可以随时添加一条学习笔记：</p><p><img src="'+A+'" alt="img" loading="lazy"></p><p>笔记的基本信息包括：</p><ul><li>笔记内容</li><li>是否是私密笔记</li></ul><p>不过，笔记需要与课程、章节关联，并记录写笔记的具体时间点，因此还需要下列属性：</p><ul><li>课程id</li><li>章id</li><li>节id</li><li>记录笔记时的视频播放时间</li></ul><p>因此，按照Restful来设计，接口如下：</p><table><thead><tr><th><strong>接口说明</strong></th><th>新增笔记</th></tr></thead><tbody><tr><td><strong>请求方式</strong></td><td>POST</td></tr><tr><td><strong>请求路径</strong></td><td>/notes</td></tr><tr><td><strong>请求参数示例</strong></td><td><code>{ &quot;content&quot;: &quot;Redis的常用数据类型有五种&quot;, // 笔记内容 &quot;isPrivate&quot;: true, // 是否是隐私笔记 &quot;noteMoment&quot;: 124, // 记录笔记时视频播放的时间点，单位：秒 &quot;courseId&quot;: &quot;1578558664933920770&quot;, // 课程id &quot;chapterId&quot;: &quot;32145&quot;, // 章id &quot;sectionId&quot;: &quot;12341&quot; // 小节id }</code></td></tr><tr><td><strong>返回值示例</strong></td><td>无</td></tr></tbody></table><h4 id="_3-1-2-采集、取消采集笔记" tabindex="-1">3.1.2.采集、取消采集笔记 <a class="header-anchor" href="#_3-1-2-采集、取消采集笔记" aria-label="Permalink to &quot;3.1.2.采集、取消采集笔记&quot;">​</a></h4><p>用户可以查看他人笔记，如果觉得笔记不错，也可以采集笔记：</p><p><img src="'+I+'" alt="img" loading="lazy"></p><p>采集笔记就是将他人笔记<strong>复制</strong>到我的笔记中且做<strong>私密</strong>处理。因此请求时只需要知道要采集的笔记id即可。与之对应的还有一个取消采集。</p><p>因此，按照Restful来设计，接口如下：</p><table><thead><tr><th><strong>接口说明</strong></th><th>采集笔记</th></tr></thead><tbody><tr><td><strong>请求方式</strong></td><td>POST</td></tr><tr id=""><td><strong>请求路径</strong></td><td>/notes/gathers/</td></tr><tr><td><strong>请求参数示例</strong></td><td>路径占位符，要采集的笔记id</td></tr><tr><td><strong>返回值示例</strong></td><td>无</td></tr></tbody></table><table><thead><tr><th><strong>接口说明</strong></th><th>取消采集笔记</th></tr></thead><tbody><tr><td><strong>请求方式</strong></td><td>DELETE</td></tr><tr id=""><td><strong>请求路径</strong></td><td>/notes/gathers/</td></tr><tr><td><strong>请求参数示例</strong></td><td>路径占位符，要取消采集的笔记id</td></tr><tr><td><strong>返回值示例</strong></td><td>无</td></tr></tbody></table><h4 id="_3-1-3-编辑、删除笔记" tabindex="-1">3.1.3.编辑、删除笔记 <a class="header-anchor" href="#_3-1-3-编辑、删除笔记" aria-label="Permalink to &quot;3.1.3.编辑、删除笔记&quot;">​</a></h4><p>在课程详情页，笔记列表中，我们可以编辑、删除笔记：</p><p><img src="'+E+'" alt="img" loading="lazy"></p><p>笔记与课程、章节绑定后无法修改，因此编辑的时候，只能对笔记内容、是否私密做修改。</p><p>按照Restful的风格，接口信息如下：</p><p>因此，按照Restful来设计，编辑笔记的接口如下：</p><table><thead><tr><th><strong>接口说明</strong></th><th>编辑笔记</th></tr></thead><tbody><tr><td><strong>请求方式</strong></td><td>PUT</td></tr><tr id=""><td><strong>请求路径</strong></td><td>/notes/</td></tr><tr><td><strong>请求参数示例</strong></td><td>路径占位符id，以及表单数据：<code>{ &quot;content&quot;: &quot;Redis的常用数据类型有五种&quot;, // 笔记内容 &quot;isPrivate&quot;: true, // 是否是隐私笔记 }</code></td></tr><tr><td><strong>返回值示例</strong></td><td>无</td></tr></tbody></table><p>删除笔记的接口如下：</p><table><thead><tr><th><strong>接口说明</strong></th><th>删除笔记</th></tr></thead><tbody><tr><td><strong>请求方式</strong></td><td>DELETE</td></tr><tr id=""><td><strong>请求路径</strong></td><td>/notes/</td></tr><tr><td><strong>请求参数示例</strong></td><td>路径占位符id</td></tr><tr><td><strong>返回值示例</strong></td><td>无</td></tr></tbody></table><h4 id="_3-1-4-用户端分页查询笔记" tabindex="-1">3.1.4.用户端分页查询笔记 <a class="header-anchor" href="#_3-1-4-用户端分页查询笔记" aria-label="Permalink to &quot;3.1.4.用户端分页查询笔记&quot;">​</a></h4><p>在课程详情页，可以查询课程或课程某小节下的一些笔记，分为两种：</p><ul><li>查询我的笔记</li><li>查询全部笔记</li></ul><p><img src="'+M+'" alt="img" loading="lazy"></p><p>在查询的时候，可能根据课程id、小节id过滤，另外还要区分我的笔记或全部笔记，因此参数包括：</p><ul><li>课程id：可选</li><li>小节id：可选</li><li>是否只查询我的笔记：必填</li></ul><p>而返回值则如页面所示，包含下列字段：</p><ul><li>id</li><li>笔记内容</li><li>笔记记录时间</li><li>是否是隐私笔记</li><li>是否是我采集的笔记</li><li>作者id</li><li>作者名字</li><li>作者头像</li><li>笔记发布时间</li></ul><p>因此，按照Restful来设计，编辑笔记的接口如下：</p><table><thead><tr><th><strong>接口说明</strong></th><th>用户端分页查询笔记</th></tr></thead><tbody><tr><td><strong>请求方式</strong></td><td>GET</td></tr><tr><td><strong>请求路径</strong></td><td>/notes/page</td></tr><tr><td><strong>请求参数示例</strong></td><td>包含分页参数和过滤条件：<code>{ &quot;pageNo&quot;: 1, &quot;pageSize&quot;: 5, &quot;cousrseId&quot;: &quot;1241241231&quot;, &quot;sectionId&quot;: &quot;14442564&quot;, &quot;onlyMine&quot;:false }</code></td></tr><tr><td><strong>返回值示例</strong></td><td><code>{ &quot;total&quot;: 189, &quot;pages&quot;: 35, &quot;list&quot;: [ { &quot;id&quot;: &quot;128003124&quot;, &quot;content&quot;: &quot;Redis的常用数据类型有5种&quot;, &quot;noteMoment&quot;: 58, // 笔记记录时的视频时间点，单位秒 &quot;isPrivate&quot;: false, // 是否是隐私笔记 &quot;isGathered&quot;: false, // 是否是采集的笔记 &quot;authorId&quot;: &quot;128003124&quot;, // 是否是隐私笔记 &quot;authorName&quot;: &quot;Jack&quot;, // 是否是隐私笔记 &quot;authorIcon&quot;: &quot;1.jpg&quot;, // 是否是隐私笔记 &quot;createTime&quot;: &quot;2023-02-12&quot;, // 是否是隐私笔记 } ] }</code></td></tr></tbody></table><h4 id="_3-1-5-管理端分页查询笔记" tabindex="-1">3.1.5.管理端分页查询笔记 <a class="header-anchor" href="#_3-1-5-管理端分页查询笔记" aria-label="Permalink to &quot;3.1.5.管理端分页查询笔记&quot;">​</a></h4><p>管理端需要对用户提交的笔记做审核管理，因此有一个分页查询笔记列表的功能：</p><p><img src="'+S+'" alt="img" loading="lazy"></p><p>查询条件除了分页条件外，就是顶部过滤项：</p><ul><li>笔记状态：true或false，标示笔记是否要在用户端隐藏</li><li>笔记关联的课程名称</li><li>笔记发布时间</li></ul><p>查询结果如原型中的列表所示，包含下列字段：</p><ul><li>笔记id</li><li>课程名称</li><li>课程章、节名称</li><li>笔记内容</li><li>笔记作者</li><li>笔记发布时间</li><li>引用次数（笔记被采集次数）</li><li>笔记状态：true或false，标示笔记是否要在用户端隐藏</li></ul><p>因此，按照Restful的风格，接口信息如下：</p><table><thead><tr><th><strong>接口说明</strong></th><th>管理端分页查询笔记</th></tr></thead><tbody><tr><td><strong>请求方式</strong></td><td>GET</td></tr><tr><td><strong>请求路径</strong></td><td>/admin/notes/page</td></tr><tr><td><strong>请求参数示例</strong></td><td>包含分页参数和过滤条件：<code>{ &quot;pageNo&quot;: 1, &quot;pageSize&quot;: 5, &quot;name&quot;: &quot;Redis&quot;, // 课程名称关键字 &quot;hidden&quot;: false, // 笔记状态，是否在用户端隐藏 &quot;beginTime&quot;:&quot;2023-7-18 19:52:36&quot;, // 更新时间区间的开始时间 &quot;endTime&quot;:&quot;2023-7-18 19:52:36&quot;, // 更新时间区间的结束时间 }</code></td></tr><tr><td><strong>返回值示例</strong></td><td><code>{ &quot;total&quot;: 189, &quot;pages&quot;: 35, &quot;list&quot;: [ { &quot;id&quot;: &quot;128003124&quot;, &quot;courseName&quot;: &quot;Redis从入门到实战&quot;, // 课程名称 &quot;chapterName&quot;: &quot;Redis入门&quot;, // 章名称 &quot;sectionName&quot;: &quot;Redis的常用数据类型&quot;, // 节名称 &quot;content&quot;: &quot;Redis的常用数据类型有5种&quot;, // 笔记内容 &quot;hidden&quot;: false, // 是否在用户端隐藏 &quot;usedTimes&quot;: 21, // 被采集次数 &quot;authorName&quot;: &quot;Jack&quot;, // 是否是隐私笔记 &quot;createTime&quot;: &quot;2023-02-12&quot;, // 是否是隐私笔记 } ] }</code></td></tr></tbody></table><h4 id="_3-1-6-管理端查询笔记详情" tabindex="-1">3.1.6.管理端查询笔记详情 <a class="header-anchor" href="#_3-1-6-管理端查询笔记详情" aria-label="Permalink to &quot;3.1.6.管理端查询笔记详情&quot;">​</a></h4><p>在管理端的笔记列表页，点击笔记列表中的某一条笔记时，可以进入笔记详情：</p><p><img src="'+$+'" alt="img" loading="lazy"></p><p>因此，查询条件就是笔记id，而查询结果如原型所示，包含下列字段：</p><ul><li>笔记id</li><li>课程名称</li><li>课程分类名称</li><li>章、节名称</li><li>笔记发布时的视频播放时间</li><li>被引用次数（被采集次数）</li><li>用户端是否展示（是否隐藏）</li><li>作者名称</li><li>作者电话</li><li>笔记发布时间</li><li>引用人：采集过当前笔记的用户列表</li><li>笔记内容</li></ul><p>因此，按照Restful的风格，接口信息如下：</p><table><thead><tr><th><strong>接口说明</strong></th><th>管理端查询笔记详情</th></tr></thead><tbody><tr><td><strong>请求方式</strong></td><td>GET</td></tr><tr id=""><td><strong>请求路径</strong></td><td>/admin/notes/</td></tr><tr><td><strong>请求参数示例</strong></td><td>路径占位符，笔记id</td></tr><tr><td><strong>返回值示例</strong></td><td><code>{ &quot;id&quot;: &quot;128003124&quot;, &quot;courseName&quot;: &quot;Redis从入门到实战&quot;, // 课程名称 &quot;chapterName&quot;: &quot;Redis入门&quot;, // 章名称 &quot;sectionName&quot;: &quot;Redis的常用数据类型&quot;, // 节名称 &quot;categoryNames&quot;: &quot;IT-互联网/数据与AI/数据分析&quot;, // 多级分类/拼接 &quot;content&quot;: &quot;Redis的常用数据类型有5种&quot;, // 笔记内容 &quot;noteMoment&quot;: 58, // 笔记记录时的视频时间点，单位秒 &quot;hidden&quot;: false, // 是否在用户端隐藏 &quot;usedTimes&quot;: 21, // 被采集次数 &quot;authorName&quot;: &quot;Jack&quot;, // 作者名称 &quot;authorPhone&quot;: &quot;13967198817&quot;, // 作者电话 &quot;createTime&quot;: &quot;2023-02-12&quot;, // 发布时间 &quot;gathers&quot;: [&quot;Rose&quot;,&quot;Lucy&quot;], // 采集人集合 }</code></td></tr></tbody></table><h4 id="_3-1-7-隐藏或显示笔记" tabindex="-1">3.1.7.隐藏或显示笔记 <a class="header-anchor" href="#_3-1-7-隐藏或显示笔记" aria-label="Permalink to &quot;3.1.7.隐藏或显示笔记&quot;">​</a></h4><p>管理员如果觉得笔记内容有问题，可以在笔记列表页面隐藏笔记：</p><p><img src="'+V+'" alt="img" loading="lazy"></p><p>请求参数只需要指定id和是否隐藏即可。</p><p>因此，按照Restful来设计，接口如下：</p><table><thead><tr><th><strong>接口说明</strong></th><th>隐藏或显示笔记</th></tr></thead><tbody><tr><td><strong>请求方式</strong></td><td>PUT</td></tr><tr hidden=""><td><strong>请求路径</strong></td><td>/admin/notes/{id}/hidden/</td></tr><tr><td><strong>请求参数示例</strong></td><td>路径占位符，要采集的笔记id</td></tr><tr><td><strong>返回值示例</strong></td><td>无</td></tr></tbody></table><h3 id="_3-2-考试评测功能" tabindex="-1">3.2.考试评测功能 <a class="header-anchor" href="#_3-2-考试评测功能" aria-label="Permalink to &quot;3.2.考试评测功能&quot;">​</a></h3><p><strong>注意</strong>：考试评测的数据量较大，请使用MongoDB来存储考试记录、学员答案等信息。</p><h4 id="_3-2-1-获取试题并开始考试接口" tabindex="-1">3.2.1.获取试题并开始考试接口 <a class="header-anchor" href="#_3-2-1-获取试题并开始考试接口" aria-label="Permalink to &quot;3.2.1.获取试题并开始考试接口&quot;">​</a></h4><p>当用户在视频学习页面点击某个视频小节后面的**<code>练习</code>**按钮，或者点击章节末尾的<code>测试小节</code>时，就会去读取对应的练习题，展示在页面上：</p><p><img src="'+O+'" alt="img" loading="lazy"></p><p>不过，这里不仅仅是查询题目这么简单：</p><p>首先，考试是要计时的，我们需要在查询时先插入一条考试记录，记录考试的开始时间。</p><p>其次，不能随便什么人来了都能考试，我们要验证用户是否购买了该课程</p><p>最后，章节最后的考试每人只能参加一次；普通小节的练习则可以任意参加。</p><p>因此，开始考试的整体业务流程是这样的：</p><p><img src="'+v+'" alt="image-20240214025349149" loading="lazy"></p><p>为了满足上述业务流程，请求的参数就需要包含：</p><ul><li>课程id，方便判断用户是否购买课程</li><li>小节id，方便查询小节下的题目</li><li>考试类型，判断是练习还是考试</li></ul><p>而返回值则应该包含一个考试记录，用于将来提交考试结果做匹配。然后就是考试的题目信息了。</p><ul><li>考试记录id：考试的唯一标示，交卷的时候用</li><li>考试题目的列表： <ul><li>题目id</li><li>题目名称</li><li>题目选项（如果是选择题的话）</li><li>题目类型</li><li>题目分值</li></ul></li></ul><p>然后按照Restful来设计，接口如下：</p><table><thead><tr><th><strong>接口说明</strong></th><th>用户查询考题信息，并开始考试</th></tr></thead><tbody><tr><td><strong>请求方式</strong></td><td>POST</td></tr><tr><td><strong>请求路径</strong></td><td>/exams</td></tr><tr><td><strong>请求参数示例</strong></td><td><code>{ &quot;courseId&quot;: &quot;1578558664933920770&quot;, // 课程id &quot;sectionId&quot;: &quot;12341&quot;, // 小节id &quot;type&quot;: 1, // 类型，1-练习，2-考试 }</code></td></tr><tr><td><strong>返回值示例</strong></td><td><code>{ &quot;id&quot;: &quot;1578558664933920770&quot;, // 考试记录id &quot;questions&quot;: [ { &quot;difficulty&quot;: 0, // 难易度，1：简单，2：中等，3：困难 &quot;id&quot;: 0, // 题目id &quot;name&quot;: &quot;&quot;, // 题目名称 &quot;options&quot;: [], // 选择题的选项 &quot;score&quot;: 0, // 本题分数 &quot;type&quot;: &quot;&quot; // 题目类型，1：单选题，2：多选题，3：不定向选择题，4：判断题，5：主观题 } ] }</code></td></tr></tbody></table><h4 id="_3-2-2-提交考试结果" tabindex="-1">3.2.2.提交考试结果 <a class="header-anchor" href="#_3-2-2-提交考试结果" aria-label="Permalink to &quot;3.2.2.提交考试结果&quot;">​</a></h4><p>考试完成后，用户点击提交试卷，即可将答题信息提交到后台。</p><p><img src="'+C+'" alt="img" loading="lazy"></p><p>服务端接收到试卷以后，有一系列的动作要做：</p><ul><li>首先需要校验记录是否存在</li><li>然后还要做幂等校验，检查是否是重复提交</li><li>如果没有问题，则需要对试卷做自动批阅（客观题都可以自动批阅，目前1期项目中只包含客观题）</li><li>批阅完成，将考试得分、答题信息等保存到数据库中</li></ul><p>到这里，考试的相关流程就完结了。</p><p>不过，<strong>需要注意的是</strong>：考试小节属于课程学习的一部分，在我们之前实现的学习记录中，需要统计已经学习过的小节。因此当用户提交考试后，需要通知到学习微服务，新增一条学习记录。</p><p>因此，提交考试的整体业务流程是这样的：</p><p><img src="'+D+'" alt="image-20240214025419342" loading="lazy"></p><p>该业务主要是提交信息，无需返回数据。因此主要关注请求参数。而请求参数主要就是用户答题信息：</p><ul><li>考试记录id：考试的唯一标示，交卷的时候用</li><li>考试答题信息（数组）： <ul><li>题目id</li><li>题目答案</li><li>题目类型</li></ul></li></ul><p>然后按照Restful来设计，接口如下：</p><table><thead><tr><th><strong>接口说明</strong></th><th>提交考试结果</th></tr></thead><tbody><tr><td><strong>请求方式</strong></td><td>POST</td></tr><tr><td><strong>请求路径</strong></td><td>/exams/details</td></tr><tr><td><strong>请求参数示例</strong></td><td><code>{ &quot;id&quot;: &quot;12351412312141&quot;, // 考试记录id &quot;examDetails&quot;: [ { &quot;questionId&quot;: &quot;12351412312141&quot;, // 题目id &quot;questionType&quot;: 1, // 题目类型 &quot;answer&quot;: &quot;&quot; // 题目答案 } ] }</code></td></tr><tr><td><strong>返回值示例</strong></td><td>———</td></tr></tbody></table><h4 id="_3-2-3-分页查询考试记录" tabindex="-1">3.2.3.分页查询考试记录 <a class="header-anchor" href="#_3-2-3-分页查询考试记录" aria-label="Permalink to &quot;3.2.3.分页查询考试记录&quot;">​</a></h4><p>在用户的个人中心，可以查看以往的练习、考试记录：</p><p><img src="'+B+'" alt="img" loading="lazy"></p><p>点击查看即可进入考试详情页面：</p><p><img src="'+J+'" alt="img" loading="lazy"></p><p>这个接口就是一个简单的分页查询，请求入参就是基本的分页参数：</p><ul><li>页码</li><li>每页大小</li></ul><p>而返回值则是分页结果，其中的考试信息有：</p><ul><li>考试id</li><li>考试得分</li><li>考试类型</li><li>考试提交时间</li><li>考试用时</li><li>课程信息</li><li>章节信息</li></ul><p>然后按照Restful来设计，接口如下：</p><table><thead><tr><th><strong>接口说明</strong></th><th>分页查询考试记录</th></tr></thead><tbody><tr><td><strong>请求方式</strong></td><td>GET</td></tr><tr><td><strong>请求路径</strong></td><td>/exams/page</td></tr><tr><td><strong>请求参数示例</strong></td><td><code>{ &quot;pageNo&quot;: 1, &quot;pageSize&quot;: 5 }</code></td></tr><tr><td><strong>返回值示例</strong></td><td><code>{ &quot;list&quot;: [ { &quot;id&quot;: 0, // 考试id &quot;type&quot;: 1 // 考试类型（考试、练习） &quot;score&quot;: 0, // 得分 &quot;commitTime&quot;: &quot;&quot;, // 提交时间 &quot;duration&quot;: 0, // 考试用时 &quot;courseName&quot;: &quot;&quot;, // 课程名称 &quot;sectionName&quot;: &quot;&quot;, // 小节名称 } ], &quot;pages&quot;: 0, // 总页数 &quot;total&quot;: 0 // 总条数 }</code></td></tr></tbody></table><h4 id="_3-2-4-查询考试记录详情" tabindex="-1">3.2.4.查询考试记录详情 <a class="header-anchor" href="#_3-2-4-查询考试记录详情" aria-label="Permalink to &quot;3.2.4.查询考试记录详情&quot;">​</a></h4><p>在个人中心，用户可以分页查看考试记录。而点击考试记录后，即可查看考试详情：</p><p><img src="'+K+'" alt="img" loading="lazy"></p><p>由于考试的基础信息可以从分页列表带过来，因此这里主要是查询题目列表及用户答题信息。包括：</p><ul><li>题目id</li><li>学员的答案</li><li>是否正确</li><li>学员得分</li><li>老师评语</li><li>题目信息： <ul><li>题目id</li><li>题目名称</li><li>题目分值</li><li>题目选项</li><li>题目类型</li><li>题目正确答案</li><li>答案解析</li><li>难易程度</li></ul></li></ul><p>然后按照Restful来设计，接口如下：</p><table><thead><tr><th><strong>接口说明</strong></th><th>根据考试记录id，查询考试详情，也就是用户答题的每一道题目信息</th></tr></thead><tbody><tr><td><strong>请求方式</strong></td><td>GET</td></tr><tr id=""><td><strong>请求路径</strong></td><td>/exams/</td></tr><tr><td><strong>请求参数示例</strong></td><td>路径占位符，id就是考试记录的id</td></tr><tr><td><strong>返回值示例</strong></td><td><code>[ { &quot;answer&quot;: &quot;1,2,3&quot;, // 学员答案 &quot;comment&quot;: &quot;无&quot;, // 老师评语 &quot;correct&quot;: true, // 是否正确 &quot;score&quot;: 0, // 学员得分 &quot;question&quot;: { &quot;id&quot;: &quot;19275438947512098&quot;, // 问题id &quot;name&quot;: &quot;&quot;, // 问题名称 &quot;type&quot;: 1, // 问题类型 &quot;score&quot;: 0, // 问题分值 &quot;options&quot;: [], // 选项 &quot;answer&quot;: &quot;&quot;, // 正确答案 &quot;analysis&quot;: &quot;&quot;, // 答案解析 &quot;difficulty&quot;: 0, // 难易程度 }, } ]</code></td></tr></tbody></table><h1 id="_4-项目分组" tabindex="-1">4.项目分组 <a class="header-anchor" href="#_4-项目分组" aria-label="Permalink to &quot;4.项目分组&quot;">​</a></h1>',108),W=p('<h3 id="_4-1-时间安排" tabindex="-1">4.1.时间安排 <a class="header-anchor" href="#_4-1-时间安排" aria-label="Permalink to &quot;4.1.时间安排&quot;">​</a></h3><p>此次项目实战安排2天课时（可以加一天自习调整为3天），具体的时间安排如下：</p><ul><li>第一天上午，由讲师带领学生了解项目实战中的内容</li><li>第一天的下午，第二天，第三天上午，这些时间段是学生实战开发的时间</li><li>第三天下午，成果演示</li></ul><h3 id="_4-2-分组安排" tabindex="-1">4.2.分组安排 <a class="header-anchor" href="#_4-2-分组安排" aria-label="Permalink to &quot;4.2.分组安排&quot;">​</a></h3><ul><li>将一个班的学生分成若干小组，每个小组成员5~6人，最多不超过8人。</li><li>每个小组选取一名组长，组长负责组员的任务分工。</li><li>每个组员都要参与开发，不得以任何接口拒绝组长安排的任务。</li><li>每个小组都需要完成实战中的两个功能的开发。</li></ul><h3 id="_4-3-代码管理" tabindex="-1">4.3.代码管理 <a class="header-anchor" href="#_4-3-代码管理" aria-label="Permalink to &quot;4.3.代码管理&quot;">​</a></h3><p>在项目开发的过程中，我们都是基于虚拟机中的git提交代码的，在分组实战中，需要将代码共享，同组人员公共修改代码，此时虚拟机中的git就无法满足需求了，在这里，可以借助<a href="https://gitee.com/" target="_blank" rel="noreferrer">码云</a>来完成共享。基本的架构如下：</p><p><img src="'+G+'" alt="image-20240214025436699" loading="lazy"></p><p>说明：</p><ul><li>组长在码云中创建相应的项目，并且邀请组员成为开发者</li><li>组长将本地虚拟机环境中的git代码提交到码云（只需要提交实战中涉及到工程即可）</li><li>组员代码拉取到本地，即可进行项目开发，在开发完成后将代码提交到码云</li><li>待所有的功能开发完成后，组长将代码同步到本地虚拟机中的git中，最终基于组长的环境进行功能演示</li><li>同样，组员也将最终的代码同步到自己的本地环境中，提交到虚拟机中的git服务中</li><li>最终，所有人的本地虚拟机中的代码都应该是一致的</li></ul><h1 id="_5-成果演示" tabindex="-1">5.成果演示 <a class="header-anchor" href="#_5-成果演示" aria-label="Permalink to &quot;5.成果演示&quot;">​</a></h1>',11),tt=l("ul",null,[l("li",null,"每个组都需要准备一个演示ppt，在成果演示阶段使用，ppt风格不限"),l("li",null,"演示时，需要按照产品原型，满足所有功能要求"),l("li",null,"如果有额外实现一些相关的功能，会有加分")],-1);function ot(t,it,lt,rt,at,et){const a=q("ArticleMetadata"),e=q("ClientOnly");return r(),h("div",null,[F,s(e,null,{default:d(()=>{var o,i;return[(((o=t.$frontmatter)==null?void 0:o.aside)??!0)&&(((i=t.$frontmatter)==null?void 0:i.showArticleMetadata)??!0)?(r(),u(a,{key:0,article:t.$frontmatter},null,8,["article"])):n("",!0)]}),_:1}),Q,H,L,X,s(e,null,{default:d(()=>{var o,i;return[(((o=t.$frontmatter)==null?void 0:o.aside)??!0)&&(((i=t.$frontmatter)==null?void 0:i.showArticleMetadata)??!0)?(r(),u(a,{key:0,article:t.$frontmatter},null,8,["article"])):n("",!0)]}),_:1}),U,s(e,null,{default:d(()=>{var o,i;return[(((o=t.$frontmatter)==null?void 0:o.aside)??!0)&&(((i=t.$frontmatter)==null?void 0:i.showArticleMetadata)??!0)?(r(),u(a,{key:0,article:t.$frontmatter},null,8,["article"])):n("",!0)]}),_:1}),Y,s(e,null,{default:d(()=>{var o,i;return[(((o=t.$frontmatter)==null?void 0:o.aside)??!0)&&(((i=t.$frontmatter)==null?void 0:i.showArticleMetadata)??!0)?(r(),u(a,{key:0,article:t.$frontmatter},null,8,["article"])):n("",!0)]}),_:1}),W,s(e,null,{default:d(()=>{var o,i;return[(((o=t.$frontmatter)==null?void 0:o.aside)??!0)&&(((i=t.$frontmatter)==null?void 0:i.showArticleMetadata)??!0)?(r(),u(a,{key:0,article:t.$frontmatter},null,8,["article"])):n("",!0)]}),_:1}),tt])}const ut=c(Z,[["render",ot]]);export{dt as __pageData,ut as default};
