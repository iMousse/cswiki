import{_ as p,E as e,c as r,J as c,w as h,m as t,a as g,V as u,o as s,b as d,e as m}from"./chunks/framework.syB9hai_.js";const C=JSON.parse('{"title":"常见技术场景","description":"","frontmatter":{},"headers":[],"relativePath":"src/base/summarize/project-practice.md","filePath":"src/base/summarize/project-practice.md","lastUpdated":1730648753000}'),b={name:"src/base/summarize/project-practice.md"},k=t("h1",{id:"常见技术场景",tabindex:"-1"},[g("常见技术场景 "),t("a",{class:"header-anchor",href:"#常见技术场景","aria-label":'Permalink to "常见技术场景"'},"​")],-1),q=u('<p><a href="./">返回首页</a></p><h2 id="通用技术方案" tabindex="-1">通用技术方案 <a class="header-anchor" href="#通用技术方案" aria-label="Permalink to &quot;通用技术方案&quot;">​</a></h2><h3 id="单点登录这块怎么实现的" tabindex="-1">单点登录这块怎么实现的 <a class="header-anchor" href="#单点登录这块怎么实现的" aria-label="Permalink to &quot;单点登录这块怎么实现的&quot;">​</a></h3><h4 id="概述" tabindex="-1">概述 <a class="header-anchor" href="#概述" aria-label="Permalink to &quot;概述&quot;">​</a></h4><p>单点登录的英文名叫做：Single Sign On（简称<strong>SSO</strong>）,只需要登录一次，就可以访问所有信任的应用系统</p><p>在<strong>以前</strong>的时候，一般我们就<strong>单系统</strong>，所有的功能都在同一个系统上。</p><p><img src="https://mugrain.oss-cn-hangzhou.aliyuncs.com/cswiki/image-20230521113500488.png" alt="image-20230521113500488" loading="lazy"></p><p>单体系统的session共享</p><ul><li><p><strong>登录</strong>：将用户信息保存在Session对象中</p></li><li><p>如果在Session对象中能查到，说明已经登录</p></li><li><p>如果在Session对象中查不到，说明没登录（或者已经退出了登录）</p></li><li><p><strong>注销（退出登录）</strong>：从Session中删除用户的信息</p></li></ul><p>后来，我们为了<strong>合理利用资源和降低耦合性</strong>，于是把单系统<strong>拆分</strong>成多个子系统。</p><p><img src="https://mugrain.oss-cn-hangzhou.aliyuncs.com/cswiki/image-20230521113544219.png" alt="image-20230521113544219" loading="lazy"></p><p>多系统即可能有多个Tomcat，而Session是依赖当前系统的Tomcat，所以系统A的Session和系统B的Session是<strong>不共享</strong>的。</p><p>解决系统之间Session不共享问题有一下几种方案：</p><ul><li>Tomcat集群Session全局复制（最多支持5台tomcat，不推荐使用）</li><li>JWT(常见)</li><li>Oauth2</li><li>CAS</li><li>自己实现（redis+token）</li></ul><h4 id="jwt解决单点登录" tabindex="-1">JWT解决单点登录 <a class="header-anchor" href="#jwt解决单点登录" aria-label="Permalink to &quot;JWT解决单点登录&quot;">​</a></h4><p>现在有一个微服务的简单架构，如图：</p><p><img src="https://mugrain.oss-cn-hangzhou.aliyuncs.com/cswiki/image-20230521113906521.png" alt="image-20230521113906521" loading="lazy"></p><p>使用jwt解决单点登录的流程如下：</p><p><img src="https://mugrain.oss-cn-hangzhou.aliyuncs.com/cswiki/image-20230521113941467.png" alt="image-20230521113941467" loading="lazy"></p><h4 id="回答要点" tabindex="-1">回答要点 <a class="header-anchor" href="#回答要点" aria-label="Permalink to &quot;回答要点&quot;">​</a></h4><p>1，先解释什么是单点登录</p><p>单点登录的英文名叫做：Single Sign On（简称<strong>SSO</strong>）</p><p>2，介绍自己项目中涉及到的单点登录（即使没涉及过，也可以说实现的思路）</p><p>3，介绍单点登录的解决方案，以JWT为例</p><p>I. 用户访问其他系统，会在网关判断token是否有效</p><p>​ II. 如果token无效则会返回401（认证失败）前端跳转到登录页面</p><p>​ III. 用户发送登录请求，返回浏览器一个token，浏览器把token保存到cookie</p><p>​ IV. 再去访问其他服务的时候，都需要携带token，由网关统一验证后路由到目标服务</p><br><h3 id="权限认证是如何实现的" tabindex="-1">权限认证是如何实现的 <a class="header-anchor" href="#权限认证是如何实现的" aria-label="Permalink to &quot;权限认证是如何实现的&quot;">​</a></h3><h4 id="概述-1" tabindex="-1">概述 <a class="header-anchor" href="#概述-1" aria-label="Permalink to &quot;概述&quot;">​</a></h4><p>后台的管理系统，更注重权限控制，最常见的就是RBAC模型来指导实现权限</p><p>RBAC(Role-Based Access Control)基于角色的访问控制</p><ul><li><p>3个基础部分组成：用户、角色、权限</p></li><li><p>具体实现</p><ul><li>5张表（用户表、角色表、权限表、用户角色中间表、角色权限中间表）</li><li>7张表（用户表、角色表、权限表、菜单表、用户角色中间表、角色权限中间表、权限菜单中间表）</li></ul></li></ul><h4 id="rbac权限模型" tabindex="-1">RBAC权限模型 <a class="header-anchor" href="#rbac权限模型" aria-label="Permalink to &quot;RBAC权限模型&quot;">​</a></h4><p>最常见的5张表的关系</p><p><img src="https://mugrain.oss-cn-hangzhou.aliyuncs.com/cswiki/image-20230521114305463.png" alt="image-20230521114305463" loading="lazy"></p><h4 id="数据流转" tabindex="-1"><strong>数据流转</strong> <a class="header-anchor" href="#数据流转" aria-label="Permalink to &quot;**数据流转**&quot;">​</a></h4><p>张三具有什么权限呢？</p><p>流程：张三登录系统---&gt; 查询张三拥有的角色列表---&gt;再根据角色查询拥有的权限</p><p><img src="https://mugrain.oss-cn-hangzhou.aliyuncs.com/cswiki/image-20230521114432028.png" alt="image-20230521114432028" loading="lazy"></p><p>在实际的开发中，也会使用权限框架完成权限功能的实现，并且设置多种粒度，常见的框架有：</p><ul><li>Apache shiro</li><li>Spring security（推荐）</li></ul><h4 id="回答要点-1" tabindex="-1">回答要点 <a class="header-anchor" href="#回答要点-1" aria-label="Permalink to &quot;回答要点&quot;">​</a></h4><ul><li><p>后台管理系统的开发经验</p></li><li><p>介绍RBAC权限模型5张表的关系（用户、角色、权限）</p></li><li><p>权限框架：Spring security</p></li></ul><h3 id="上传数据的安全性你们怎么控制" tabindex="-1">上传数据的安全性你们怎么控制？ <a class="header-anchor" href="#上传数据的安全性你们怎么控制" aria-label="Permalink to &quot;上传数据的安全性你们怎么控制？&quot;">​</a></h3><h4 id="概述-2" tabindex="-1">概述 <a class="header-anchor" href="#概述-2" aria-label="Permalink to &quot;概述&quot;">​</a></h4><p><img src="https://mugrain.oss-cn-hangzhou.aliyuncs.com/cswiki/image-20230521124717749.png" alt="image-20230521124717749" loading="lazy"></p><blockquote><p>这里的安全性，主要说的是，浏览器访问后台，需要经过网络传输，有可能会出现安全的问题</p></blockquote><p>解决方案：使用非对称加密（或对称加密），给前端一个公钥让他把数据加密后传到后台，后台负责解密后处理数据</p><h4 id="对称加密" tabindex="-1">对称加密 <a class="header-anchor" href="#对称加密" aria-label="Permalink to &quot;对称加密&quot;">​</a></h4><p>文件加密和解密使用相同的密钥，即加密密钥也可以用作解密密钥</p><p><img src="https://mugrain.oss-cn-hangzhou.aliyuncs.com/cswiki/image-20230521125012727.png" alt="image-20230521125012727" loading="lazy"></p><ul><li><p>数据发信方将明文和加密密钥一起经过特殊的加密算法处理后，使其变成复杂的加密密文发送出去，</p></li><li><p>收信方收到密文后，若想解读出原文，则需要使用加密时用的密钥以及相同加密算法的逆算法对密文进行解密，才能使其回复成可读明文。</p></li><li><p>在对称加密算法中，使用的密钥只有一个，收发双方都使用这个密钥，这就需要解密方事先知道加密密钥。</p></li></ul><p><strong>优点:</strong> 对称加密算法的优点是算法公开、计算量小、加密速度快、加密效率高。</p><p><strong>缺点:</strong> 没有非对称加密安全.</p><p><strong>用途：</strong> 一般用于保存用户手机号、身份证等敏感但能解密的信息。</p><p><strong>常见的对称加密算法有</strong>: <code>AES、DES、3DES、Blowfish、IDEA、RC4、RC5、RC6、HS256 </code></p><h4 id="非对称加密" tabindex="-1">非对称加密 <a class="header-anchor" href="#非对称加密" aria-label="Permalink to &quot;非对称加密&quot;">​</a></h4><p>两个密钥：公开密钥（publickey）和私有密钥，公有密钥加密，私有密钥解密</p><p><img src="https://mugrain.oss-cn-hangzhou.aliyuncs.com/cswiki/image-20230521125136717.png" alt="image-20230521125136717" loading="lazy"></p><p>解释: 同时生成两把密钥：私钥和公钥，私钥隐秘保存，公钥可以下发给信任客户端.</p><p>加密与解密:</p><ul><li>私钥加密，持有公钥才可以解密</li><li>公钥加密，持有私钥才可解密</li></ul><p>签名:</p><ul><li>私钥签名, 持有公钥进行验证是否被篡改过.</li></ul><p>**优点: ** 非对称加密与对称加密相比，其安全性更好；</p><p><strong>缺点:</strong> 非对称加密的缺点是加密和解密花费时间长、速度慢，只适合对少量数据进行加密。 <strong>用途：</strong> 一般用于签名和认证。私钥服务器保存, 用来加密, 公钥客户拿着用于对于令牌或者签名的解密或者校验使用.</p><p><strong>常见的非对称加密算法有：</strong> RSA、DSA（数字签名用）、ECC（移动设备用）、RS256 (采用SHA-256 的 RSA 签名)</p><h4 id="回答要点-2" tabindex="-1">回答要点 <a class="header-anchor" href="#回答要点-2" aria-label="Permalink to &quot;回答要点&quot;">​</a></h4><ul><li>使用非对称加密（或对称加密），给前端一个公钥让他把数据加密后传到后台，后台解密后处理数据 <ul><li>传输的数据很大建议使用对称加密，不过不能保存敏感信息</li><li>传输的数据较小，要求安全性高，建议采用非对称加密</li></ul></li></ul><h2 id="项目中的问题" tabindex="-1">项目中的问题 <a class="header-anchor" href="#项目中的问题" aria-label="Permalink to &quot;项目中的问题&quot;">​</a></h2><h3 id="你负责项目的时候遇到了哪些比较棘手的问题" tabindex="-1">你负责项目的时候遇到了哪些比较棘手的问题 <a class="header-anchor" href="#你负责项目的时候遇到了哪些比较棘手的问题" aria-label="Permalink to &quot;你负责项目的时候遇到了哪些比较棘手的问题&quot;">​</a></h3><p>这个面试题主要考察的是，</p><ul><li>你是否有过开发经验</li><li>是否是核心开发人员</li></ul><p>有4个方面可以回答，只要挑出一个回答就行了</p><p><strong>（1）设计模式</strong></p><ul><li>工厂模式+策略</li><li>责任链模式</li></ul><blockquote><p>回答思路</p><p>1，什么背景（技术问题）</p><p>2，过程（解决问题的过程）</p><p>3，最终落地方案</p></blockquote><p>举例：</p><p>①：介绍登录业务（一开始没有用设计模式，所有的登录方式都柔和在一个业务类中，不过，发现需求经常改）</p><p>②：登录方式经常会增加或更换，每次都要修改业务层代码，所以，经过我的设计，使用了工厂设计模式和策略模式，解决了，经常修改业务层代码的问题</p><p>③：详细介绍一下工厂模式和策略模式（参考前面设计模式的课程）</p><p><strong>（2）线上BUG</strong></p><ul><li>CPU飙高</li><li>内存泄漏</li><li>线程死锁</li><li>....</li></ul><p>回答方式参考上面的回答思路，具体问题可以参考前面的课程（JVM和多线程相关的面试题）</p><p><strong>（3）调优</strong></p><ul><li>慢接口</li><li>慢SQL</li><li>缓存方案</li></ul><p><strong>（4）组件封装</strong></p><ul><li>分布式锁</li><li>接口幂等</li><li>分布式事务</li><li>支付通用</li></ul><h3 id="你们项目中日志怎么采集的" tabindex="-1">你们项目中日志怎么采集的 <a class="header-anchor" href="#你们项目中日志怎么采集的" aria-label="Permalink to &quot;你们项目中日志怎么采集的&quot;">​</a></h3><h5 id="问题" tabindex="-1">问题 <a class="header-anchor" href="#问题" aria-label="Permalink to &quot;问题&quot;">​</a></h5><p>1，为什么要采集日志？</p><p>日志是定位系统问题的重要手段，可以根据日志信息快速定位系统中的问题</p><p>2，采集日志的方式有哪些?</p><ul><li><p>ELK：即Elasticsearch、Logstash和Kibana三个软件的首字母</p></li><li><p>常规采集：按天保存到一个日志文件<img src="https://mugrain.oss-cn-hangzhou.aliyuncs.com/cswiki/image-20230521232726959.png" alt="image-20230521232726959" loading="lazy"></p></li></ul><h5 id="elk基本架构" tabindex="-1">ELK基本架构 <a class="header-anchor" href="#elk基本架构" aria-label="Permalink to &quot;ELK基本架构&quot;">​</a></h5><p>ELK即Elasticsearch、Logstash和Kibana三个开源软件的缩写</p><p><img src="https://mugrain.oss-cn-hangzhou.aliyuncs.com/cswiki/image-20230521232913086.png" alt="image-20230521232913086" loading="lazy"></p><ul><li><p>Elasticsearch Elasticsearch 全文搜索和分析引擎，对大容量的数据进行接近实时的存储、搜索和分析操作。</p></li><li><p>Logstash Logstash是一个数据收集引擎，它可以动态的从各种数据源搜集数据，并对数据进行过滤、分析和统一格式等操作，并将输出结果存储到指定位置上</p></li><li><p>Kibana Kibana是一个数据分析和可视化平台，通常与Elasticsearch配合使用，用于对其中的数据进行搜索、分析，并且以统计图标的形式展示。</p></li></ul><h5 id="参考回答" tabindex="-1">参考回答 <a class="header-anchor" href="#参考回答" aria-label="Permalink to &quot;参考回答&quot;">​</a></h5><ul><li><p>我们搭建了ELK日志采集系统</p></li><li><p>介绍ELK的三个组件：</p><ul><li>Elasticsearch是全文搜索分析引擎，可以对数据存储、搜索、分析</li><li>Logstash是一个数据收集引擎，可以动态收集数据，可以对数据进行过滤、分析，将数据存储到指定的位置</li><li>Kibana是一个数据分析和可视化平台，配合Elasticsearch对数据进行搜索，分析，图表化展示</li></ul></li></ul><h3 id="查看日志的命令" tabindex="-1">查看日志的命令 <a class="header-anchor" href="#查看日志的命令" aria-label="Permalink to &quot;查看日志的命令&quot;">​</a></h3><p>目前采集日志的方式：按天保存到一个日志文件</p><p><img src="https://mugrain.oss-cn-hangzhou.aliyuncs.com/cswiki/image-20230521233150276.png" alt="image-20230521233150276" loading="lazy"></p><p>也可以在logback配置文件中设置日志的目录和名字</p><p><img src="https://mugrain.oss-cn-hangzhou.aliyuncs.com/cswiki/image-20230521233220905.png" alt="image-20230521233220905" loading="lazy"></p><p>需要掌握的Linux中的日志：</p><ul><li><p>实时监控日志的变化</p><p>实时监控某一个日志文件的变化：tail -f xx.log；实时监控日志最后100行日志： tail –n 100 -f xx.log</p></li><li><p>按照行号查询</p><ul><li><p>查询日志尾部最后100行日志：tail – n 100 xx.log</p></li><li><p>查询日志头部开始100行日志：head –n 100 xx.log</p></li><li><p>查询某一个日志行号区间：cat -n xx.log | tail -n +100 | head -n 100 (查询100行至200行的日志)</p></li></ul></li><li><p>按照关键字找日志的信息</p><p>查询日志文件中包含debug的日志行号：cat -n xx.log | grep &quot;debug&quot;</p></li><li><p>按照日期查询</p><p>sed -n &#39;/2023-05-18 14:22:31.070/,/ 2023-05-18 14:27:14.158/p’xx.log</p></li><li><p>日志太多，处理方式</p><ul><li><p>分页查询日志信息：cat -n xx.log |grep &quot;debug&quot; | more</p></li><li><p>筛选过滤以后，输出到一个文件：cat -n xx.log | grep &quot;debug&quot; &gt;debug.txt</p></li></ul></li></ul><h3 id="生产问题怎么排查" tabindex="-1">生产问题怎么排查 <a class="header-anchor" href="#生产问题怎么排查" aria-label="Permalink to &quot;生产问题怎么排查&quot;">​</a></h3><p>已经上线的bug排查的思路：</p><p>1，先分析日志，通常在业务中都会有日志的记录，或者查看系统日志，或者查看日志文件，然后定位问题</p><p>2，远程debug(通常公司的正式环境（生产环境）是不允许远程debug的。一般远程debug都是公司的测试环境，方便调试代码)</p><p><strong>远程debug配置</strong></p><p>前提条件：<strong>远程的代码和本地的代码要保持一致</strong></p><p>1.远程代码需要配置启动参数，把项目打包放到服务器后启动项目的参数：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">java</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -jar</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=5005</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> project-1.0-SNAPSHOT.jar</span></span></code></pre></div><blockquote><p><strong>-agentlib:jdwp</strong> 是通知JVM使用(java debug wire protocol)来运行调试环境</p><p><strong>transport=dt_socket</strong> 调试数据的传送方式</p><p><strong>server=y</strong> 参数是指是否支持在server模式</p><p><strong>suspend=n</strong> 是否在调试客户端建立起来后，再执行JVM。</p><p><strong>address=5005</strong> 调试端口设置为5005，其它端口也可以</p></blockquote><p>2.idea中设置远程debug，找到idea中的 Edit Configurations...</p><p><img src="https://mugrain.oss-cn-hangzhou.aliyuncs.com/cswiki/image-20230521233554657.png" alt="image-20230521233554657" loading="lazy"></p><p><img src="https://mugrain.oss-cn-hangzhou.aliyuncs.com/cswiki/image-20230521233600556.png" alt="image-20230521233600556" loading="lazy"></p><ol start="3"><li>idea中启动远程debug<img src="https://mugrain.oss-cn-hangzhou.aliyuncs.com/cswiki/image-20230521233715574.png" alt="image-20230521233715574" loading="lazy"></li><li>访问远程服务器，在本地代码中打断点即可调试远程</li></ol><h3 id="怎么快速定位系统的瓶颈" tabindex="-1">怎么快速定位系统的瓶颈 <a class="header-anchor" href="#怎么快速定位系统的瓶颈" aria-label="Permalink to &quot;怎么快速定位系统的瓶颈&quot;">​</a></h3><ul><li><p>压测（性能测试），项目上线之前测评系统的压力</p><ul><li>压测目的：给出系统当前的性能状况；定位系统性能瓶颈或潜在性能瓶颈</li><li>指标：响应时间、 QPS、并发数、吞吐量、 CPU利用率、内存使用率、磁盘IO、错误率</li><li>压测工具：LoadRunner、Apache Jmeter …</li><li>后端工程师：根据压测的结果进行解决或调优（接口慢、代码报错、并发达不到要求…）</li></ul></li><li><p>监控工具、链路追踪工具，项目上线之后监控</p><ul><li>监控工具：Prometheus+Grafana</li><li>链路追踪工具：skywalking、Zipkin</li></ul></li><li><p>线上诊断工具Arthas(阿尔萨斯)，项目上线之后监控、排查</p><ul><li><p>官网：<a href="https://arthas.aliyun.com/" target="_blank" rel="noreferrer">https://arthas.aliyun.com/</a></p></li><li><p>核心功能：</p><p><img src="https://mugrain.oss-cn-hangzhou.aliyuncs.com/cswiki/image-20230521233926897.png" alt="image-20230521233926897" loading="lazy"></p><p><img src="https://mugrain.oss-cn-hangzhou.aliyuncs.com/cswiki/image-20230521233934644.png" alt="image-20230521233934644" loading="lazy"></p></li></ul></li></ul><h3 id="你们是怎么做压测-性能测试-的" tabindex="-1">你们是怎么做压测(性能测试)的 <a class="header-anchor" href="#你们是怎么做压测-性能测试-的" aria-label="Permalink to &quot;你们是怎么做压测(性能测试)的&quot;">​</a></h3>',125);function y(a,x,f,z,S,P){const o=e("ArticleMetadata"),n=e("ClientOnly");return s(),r("div",null,[k,c(n,null,{default:h(()=>{var i,l;return[(((i=a.$frontmatter)==null?void 0:i.aside)??!0)&&(((l=a.$frontmatter)==null?void 0:l.showArticleMetadata)??!0)?(s(),d(o,{key:0,article:a.$frontmatter},null,8,["article"])):m("",!0)]}),_:1}),q])}const w=p(b,[["render",y]]);export{C as __pageData,w as default};
