import{_ as r,E as k,c as o,b as e,w as i,a4 as t,V as p,m as s,a,o as n,J as h}from"./chunks/framework.syB9hai_.js";const E="/cswiki/assets/diagram.qJCgbgYT.png",d="/cswiki/assets/image-20211021160145072.BioDTJnY.png",c="/cswiki/assets/image-20211021162416525.UkC-ZYwB.png",$=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"src/base/spring/spring-bean.md","filePath":"src/base/spring/spring-bean.md","lastUpdated":1730648753000}'),g={name:"src/base/spring/spring-bean.md"},y=p('<h2 id="bean" tabindex="-1">BEAN <a class="header-anchor" href="#bean" aria-label="Permalink to &quot;BEAN&quot;">​</a></h2><h3 id="_1-容器接口" tabindex="-1">1) 容器接口 <a class="header-anchor" href="#_1-容器接口" aria-label="Permalink to &quot;1) 容器接口&quot;">​</a></h3><ul><li><p>BeanFactory 接口，典型功能有：</p><ul><li>getBean</li></ul></li><li><p>ApplicationContext 接口，是 BeanFactory 的子接口。它扩展了 BeanFactory 接口的功能，如：</p><ul><li>国际化</li><li>通配符方式获取一组 Resource 资源</li><li>整合 Environment 环境（能通过它获取各种来源的配置信息）</li><li>事件发布与监听，实现组件之间的解耦</li></ul></li></ul><p>可以看到，我们课上讲的，都是 BeanFactory 提供的基本功能，ApplicationContext 中的扩展功能都没有用到。</p><p><img src="'+E+`" alt="diagram" loading="lazy"></p><h4 id="演示1-beanfactory-与-applicationcontext-的区别" tabindex="-1">演示1 - BeanFactory 与 ApplicationContext 的区别 <a class="header-anchor" href="#演示1-beanfactory-与-applicationcontext-的区别" aria-label="Permalink to &quot;演示1 - BeanFactory 与 ApplicationContext 的区别&quot;">​</a></h4><h5 id="代码参考" tabindex="-1">代码参考 <a class="header-anchor" href="#代码参考" aria-label="Permalink to &quot;代码参考&quot;">​</a></h5><p><strong>com.itheima.a01</strong> 包</p><h4 id="收获💡" tabindex="-1">收获💡 <a class="header-anchor" href="#收获💡" aria-label="Permalink to &quot;收获💡&quot;">​</a></h4><p>通过这个示例结合 debug 查看 ApplicationContext 对象的内部结构，学到：</p><ol><li><p>到底什么是 BeanFactory</p><ul><li>它是 ApplicationContext 的父接口</li><li>它才是 Spring 的核心容器, 主要的 ApplicationContext 实现都【组合】了它的功能，【组合】是指 ApplicationContext 的一个重要成员变量就是 BeanFactory</li></ul></li><li><p>BeanFactory 能干点啥</p><ul><li>表面上只有 getBean</li><li>实际上控制反转、基本的依赖注入、直至 Bean 的生命周期的各种功能，都由它的实现类提供</li><li>例子中通过反射查看了它的成员变量 singletonObjects，内部包含了所有的单例 bean</li></ul></li><li><p>ApplicationContext 比 BeanFactory 多点啥</p><ul><li>ApplicationContext 组合并扩展了 BeanFactory 的功能</li><li>国际化、通配符方式获取一组 Resource 资源、整合 Environment 环境、事件发布与监听</li><li>新学一种代码之间解耦途径，事件解耦</li></ul></li></ol><p>建议练习：完成用户注册与发送短信之间的解耦，用事件方式、和 AOP 方式分别实现</p><blockquote><p><em><strong>注意</strong></em></p><ul><li>如果 jdk &gt; 8, 运行时请添加 --add-opens java.base/java.lang=ALL-UNNAMED，这是因为这些版本的 jdk 默认不允许跨 module 反射</li><li>事件发布还可以异步，这个视频中没有展示，请自行查阅 @EnableAsync，@Async 的用法</li></ul></blockquote><h4 id="演示2-国际化" tabindex="-1">演示2 - 国际化 <a class="header-anchor" href="#演示2-国际化" aria-label="Permalink to &quot;演示2 - 国际化&quot;">​</a></h4><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TestMessageSource</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        GenericApplicationContext context </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> GenericApplicationContext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        context.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">registerBean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;messageSource&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, MessageSource.class, () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            ResourceBundleMessageSource ms </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ResourceBundleMessageSource</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            ms.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setDefaultEncoding</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;utf-8&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            ms.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setBasename</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;messages&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ms;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        });</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        context.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">refresh</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(context.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getMessage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;hi&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, Locale.ENGLISH));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(context.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getMessage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;hi&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, Locale.CHINESE));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(context.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getMessage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;hi&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, Locale.JAPANESE));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>国际化文件均在 src/resources 目录下</p><p>messages.properties（空）</p><p>messages_en.properties</p><div class="language-properties vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">properties</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">hi</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=Hello</span></span></code></pre></div><p>messages_ja.properties</p><div class="language-properties vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">properties</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">hi</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=こんにちは</span></span></code></pre></div><p>messages_zh.properties</p><div class="language-properties vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">properties</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">hi</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=你好</span></span></code></pre></div><blockquote><p><em><strong>注意</strong></em></p><ul><li>ApplicationContext 中 MessageSource bean 的名字固定为 messageSource</li><li>使用 SpringBoot 时，国际化文件名固定为 messages</li><li>空的 messages.properties 也必须存在</li></ul></blockquote><h3 id="_2-容器实现" tabindex="-1">2) 容器实现 <a class="header-anchor" href="#_2-容器实现" aria-label="Permalink to &quot;2) 容器实现&quot;">​</a></h3><p>Spring 的发展历史较为悠久，因此很多资料还在讲解它较旧的实现，这里出于怀旧的原因，把它们都列出来，供大家参考</p><ul><li>DefaultListableBeanFactory，是 BeanFactory 最重要的实现，像<strong>控制反转</strong>和<strong>依赖注入</strong>功能，都是它来实现</li><li>ClassPathXmlApplicationContext，从类路径查找 XML 配置文件，创建容器（旧）</li><li>FileSystemXmlApplicationContext，从磁盘路径查找 XML 配置文件，创建容器（旧）</li><li>XmlWebApplicationContext，传统 SSM 整合时，基于 XML 配置文件的容器（旧）</li><li>AnnotationConfigWebApplicationContext，传统 SSM 整合时，基于 java 配置类的容器（旧）</li><li>AnnotationConfigApplicationContext，Spring boot 中非 web 环境容器（新）</li><li>AnnotationConfigServletWebServerApplicationContext，Spring boot 中 servlet web 环境容器（新）</li><li>AnnotationConfigReactiveWebServerApplicationContext，Spring boot 中 reactive web 环境容器（新）</li></ul><p>另外要注意的是，后面这些带有 ApplicationContext 的类都是 ApplicationContext 接口的实现，但它们是<strong>组合</strong>了 DefaultListableBeanFactory 的功能，并非继承而来</p><h4 id="演示1-defaultlistablebeanfactory" tabindex="-1">演示1 - DefaultListableBeanFactory <a class="header-anchor" href="#演示1-defaultlistablebeanfactory" aria-label="Permalink to &quot;演示1 - DefaultListableBeanFactory&quot;">​</a></h4><h5 id="代码参考-1" tabindex="-1">代码参考 <a class="header-anchor" href="#代码参考-1" aria-label="Permalink to &quot;代码参考&quot;">​</a></h5><p><strong>com.itheima.a02.TestBeanFactory</strong></p><h4 id="收获💡-1" tabindex="-1">收获💡 <a class="header-anchor" href="#收获💡-1" aria-label="Permalink to &quot;收获💡&quot;">​</a></h4><ul><li>beanFactory 可以通过 registerBeanDefinition 注册一个 bean definition 对象 <ul><li>我们平时使用的配置类、xml、组件扫描等方式都是生成 bean definition 对象注册到 beanFactory 当中</li><li>bean definition 描述了这个 bean 的创建蓝图：scope 是什么、用构造还是工厂创建、初始化销毁方法是什么，等等</li></ul></li><li>beanFactory 需要手动调用 beanFactory 后处理器对它做增强 <ul><li>例如通过解析 @Bean、@ComponentScan 等注解，来补充一些 bean definition</li></ul></li><li>beanFactory 需要手动添加 bean 后处理器，以便对后续 bean 的创建过程提供增强 <ul><li>例如 @Autowired，@Resource 等注解的解析都是 bean 后处理器完成的</li><li>bean 后处理的添加顺序会对解析结果有影响，见视频中同时加 @Autowired，@Resource 的例子</li></ul></li><li>beanFactory 需要手动调用方法来初始化单例</li><li>beanFactory 需要额外设置才能解析 \${} 与 #{}</li></ul><h4 id="演示2-常见-applicationcontext-实现" tabindex="-1">演示2 - 常见 ApplicationContext 实现 <a class="header-anchor" href="#演示2-常见-applicationcontext-实现" aria-label="Permalink to &quot;演示2 - 常见 ApplicationContext 实现&quot;">​</a></h4><h5 id="代码参考-2" tabindex="-1">代码参考 <a class="header-anchor" href="#代码参考-2" aria-label="Permalink to &quot;代码参考&quot;">​</a></h5><p><strong>com.itheima.a02.A02</strong></p><h4 id="收获💡-2" tabindex="-1">收获💡 <a class="header-anchor" href="#收获💡-2" aria-label="Permalink to &quot;收获💡&quot;">​</a></h4><ol><li>常见的 ApplicationContext 容器实现</li><li>内嵌容器、DispatcherServlet 的创建方法、作用</li></ol><h3 id="_3-bean-的生命周期" tabindex="-1">3) Bean 的生命周期 <a class="header-anchor" href="#_3-bean-的生命周期" aria-label="Permalink to &quot;3) Bean 的生命周期&quot;">​</a></h3><p>一个受 Spring 管理的 bean，生命周期主要阶段有</p><ol><li>创建：根据 bean 的构造方法或者工厂方法来创建 bean 实例对象</li><li>依赖注入：根据 @Autowired，@Value 或其它一些手段，为 bean 的成员变量填充值、建立关系</li><li>初始化：回调各种 Aware 接口，调用对象的各种初始化方法</li><li>销毁：在容器关闭时，会销毁所有单例对象（即调用它们的销毁方法） <ul><li>prototype 对象也能够销毁，不过需要容器这边主动调用</li></ul></li></ol><p>一些资料会提到，生命周期中还有一类 bean 后处理器：BeanPostProcessor，会在 bean 的初始化的前后，提供一些扩展逻辑。但这种说法是不完整的，见下面的演示1</p><h4 id="演示1-bean-生命周期" tabindex="-1">演示1 - bean 生命周期 <a class="header-anchor" href="#演示1-bean-生命周期" aria-label="Permalink to &quot;演示1 - bean 生命周期&quot;">​</a></h4><h5 id="代码参考-3" tabindex="-1">代码参考 <a class="header-anchor" href="#代码参考-3" aria-label="Permalink to &quot;代码参考&quot;">​</a></h5><p><strong>com.itheima.a03</strong> 包</p>`,45),u=p(`<p>创建前后的增强</p><ul><li>postProcessBeforeInstantiation <ul><li>这里返回的对象若不为 null 会替换掉原本的 bean，并且仅会走 postProcessAfterInitialization 流程</li></ul></li><li>postProcessAfterInstantiation <ul><li>这里如果返回 false 会跳过依赖注入阶段</li></ul></li></ul><p>依赖注入前的增强</p><ul><li>postProcessProperties <ul><li>如 @Autowired、@Value、@Resource</li></ul></li></ul><p>初始化前后的增强</p><ul><li>postProcessBeforeInitialization <ul><li>这里返回的对象会替换掉原本的 bean</li><li>如 @PostConstruct、@ConfigurationProperties</li></ul></li><li>postProcessAfterInitialization <ul><li>这里返回的对象会替换掉原本的 bean</li><li>如代理增强</li></ul></li></ul><p>销毁之前的增强</p><ul><li>postProcessBeforeDestruction <ul><li>如 @PreDestroy</li></ul></li></ul><h4 id="收获💡-3" tabindex="-1">收获💡 <a class="header-anchor" href="#收获💡-3" aria-label="Permalink to &quot;收获💡&quot;">​</a></h4><ol><li>Spring bean 生命周期各个阶段</li><li>模板设计模式, 指大流程已经固定好了, 通过接口回调（bean 后处理器）在一些关键点前后提供扩展</li></ol><h4 id="演示2-模板方法设计模式" tabindex="-1">演示2 - 模板方法设计模式 <a class="header-anchor" href="#演示2-模板方法设计模式" aria-label="Permalink to &quot;演示2 - 模板方法设计模式&quot;">​</a></h4><h5 id="关键代码" tabindex="-1">关键代码 <a class="header-anchor" href="#关键代码" aria-label="Permalink to &quot;关键代码&quot;">​</a></h5><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TestMethodTemplate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        MyBeanFactory beanFactory </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyBeanFactory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        beanFactory.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addBeanPostProcessor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(bean </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;解析 @Autowired&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        beanFactory.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addBeanPostProcessor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(bean </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;解析 @Resource&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        beanFactory.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getBean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 模板方法  Template Method Pattern</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyBeanFactory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Object </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getBean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            Object bean </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;构造 &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> bean);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;依赖注入 &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> bean); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// @Autowired, @Resource</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (BeanPostProcessor processor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> processors) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                processor.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">inject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(bean);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;初始化 &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> bean);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> bean;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        private</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> List&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">BeanPostProcessor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; processors </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ArrayList&lt;&gt;();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> addBeanPostProcessor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(BeanPostProcessor </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">processor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            processors.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(processor);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> BeanPostProcessor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> inject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Object </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">bean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 对依赖注入阶段的扩展</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="演示3-bean-后处理器排序" tabindex="-1">演示3 - bean 后处理器排序 <a class="header-anchor" href="#演示3-bean-后处理器排序" aria-label="Permalink to &quot;演示3 - bean 后处理器排序&quot;">​</a></h4><h5 id="代码参考-4" tabindex="-1">代码参考 <a class="header-anchor" href="#代码参考-4" aria-label="Permalink to &quot;代码参考&quot;">​</a></h5><p><strong>com.itheima.a03.TestProcessOrder</strong></p><h4 id="收获💡-4" tabindex="-1">收获💡 <a class="header-anchor" href="#收获💡-4" aria-label="Permalink to &quot;收获💡&quot;">​</a></h4><ol><li>实现了 PriorityOrdered 接口的优先级最高</li><li>实现了 Ordered 接口与加了 @Order 注解的平级, 按数字升序</li><li>其它的排在最后</li></ol><h3 id="_4-bean-后处理器" tabindex="-1">4) Bean 后处理器 <a class="header-anchor" href="#_4-bean-后处理器" aria-label="Permalink to &quot;4) Bean 后处理器&quot;">​</a></h3><h4 id="演示1-后处理器作用" tabindex="-1">演示1 - 后处理器作用 <a class="header-anchor" href="#演示1-后处理器作用" aria-label="Permalink to &quot;演示1 - 后处理器作用&quot;">​</a></h4><h5 id="代码参考-5" tabindex="-1">代码参考 <a class="header-anchor" href="#代码参考-5" aria-label="Permalink to &quot;代码参考&quot;">​</a></h5><p><strong>com.itheima.a04</strong> 包</p><h4 id="收获💡-5" tabindex="-1">收获💡 <a class="header-anchor" href="#收获💡-5" aria-label="Permalink to &quot;收获💡&quot;">​</a></h4><ol><li>@Autowired 等注解的解析属于 bean 生命周期阶段（依赖注入, 初始化）的扩展功能，这些扩展功能由 bean 后处理器来完成</li><li>每个后处理器各自增强什么功能 <ul><li>AutowiredAnnotationBeanPostProcessor 解析 @Autowired 与 @Value</li><li>CommonAnnotationBeanPostProcessor 解析 @Resource、@PostConstruct、@PreDestroy</li><li>ConfigurationPropertiesBindingPostProcessor 解析 @ConfigurationProperties</li></ul></li><li>另外 ContextAnnotationAutowireCandidateResolver 负责获取 @Value 的值，解析 @Qualifier、泛型、@Lazy 等</li></ol><h4 id="演示2-autowired-bean-后处理器运行分析" tabindex="-1">演示2 - @Autowired bean 后处理器运行分析 <a class="header-anchor" href="#演示2-autowired-bean-后处理器运行分析" aria-label="Permalink to &quot;演示2 - @Autowired bean 后处理器运行分析&quot;">​</a></h4><h5 id="代码参考-6" tabindex="-1">代码参考 <a class="header-anchor" href="#代码参考-6" aria-label="Permalink to &quot;代码参考&quot;">​</a></h5><p><strong>com.itheima.a04.DigInAutowired</strong></p><h4 id="收获💡-6" tabindex="-1">收获💡 <a class="header-anchor" href="#收获💡-6" aria-label="Permalink to &quot;收获💡&quot;">​</a></h4><ol><li>AutowiredAnnotationBeanPostProcessor.findAutowiringMetadata 用来获取某个 bean 上加了 @Value @Autowired 的成员变量，方法参数的信息，表示为 InjectionMetadata</li><li>InjectionMetadata 可以完成依赖注入</li><li>InjectionMetadata 内部根据成员变量，方法参数封装为 DependencyDescriptor 类型</li><li>有了 DependencyDescriptor，就可以利用 beanFactory.doResolveDependency 方法进行基于类型的查找</li></ol><h3 id="_5-beanfactory-后处理器" tabindex="-1">5) BeanFactory 后处理器 <a class="header-anchor" href="#_5-beanfactory-后处理器" aria-label="Permalink to &quot;5) BeanFactory 后处理器&quot;">​</a></h3><h4 id="演示1-beanfactory-后处理器的作用" tabindex="-1">演示1 - BeanFactory 后处理器的作用 <a class="header-anchor" href="#演示1-beanfactory-后处理器的作用" aria-label="Permalink to &quot;演示1 - BeanFactory 后处理器的作用&quot;">​</a></h4><h5 id="代码参考-7" tabindex="-1">代码参考 <a class="header-anchor" href="#代码参考-7" aria-label="Permalink to &quot;代码参考&quot;">​</a></h5><p><strong>com.itheima.a05</strong> 包</p><ul><li>ConfigurationClassPostProcessor 可以解析 <ul><li>@ComponentScan</li><li>@Bean</li><li>@Import</li><li>@ImportResource</li></ul></li><li>MapperScannerConfigurer 可以解析 <ul><li>Mapper 接口</li></ul></li></ul><h4 id="收获💡-7" tabindex="-1">收获💡 <a class="header-anchor" href="#收获💡-7" aria-label="Permalink to &quot;收获💡&quot;">​</a></h4><ol><li>@ComponentScan, @Bean, @Mapper 等注解的解析属于核心容器（即 BeanFactory）的扩展功能</li><li>这些扩展功能由不同的 BeanFactory 后处理器来完成，其实主要就是补充了一些 bean 定义</li></ol><h4 id="演示2-模拟解析-componentscan" tabindex="-1">演示2 - 模拟解析 @ComponentScan <a class="header-anchor" href="#演示2-模拟解析-componentscan" aria-label="Permalink to &quot;演示2 - 模拟解析 @ComponentScan&quot;">​</a></h4><h5 id="代码参考-8" tabindex="-1">代码参考 <a class="header-anchor" href="#代码参考-8" aria-label="Permalink to &quot;代码参考&quot;">​</a></h5><p><strong>com.itheima.a05.ComponentScanPostProcessor</strong></p><h4 id="收获💡-8" tabindex="-1">收获💡 <a class="header-anchor" href="#收获💡-8" aria-label="Permalink to &quot;收获💡&quot;">​</a></h4><ol><li>Spring 操作元数据的工具类 CachingMetadataReaderFactory</li><li>通过注解元数据（AnnotationMetadata）获取直接或间接标注的注解信息</li><li>通过类元数据（ClassMetadata）获取类名，AnnotationBeanNameGenerator 生成 bean 名</li><li>解析元数据是基于 ASM 技术</li></ol><h4 id="演示3-模拟解析-bean" tabindex="-1">演示3 - 模拟解析 @Bean <a class="header-anchor" href="#演示3-模拟解析-bean" aria-label="Permalink to &quot;演示3 - 模拟解析 @Bean&quot;">​</a></h4><h5 id="代码参考-9" tabindex="-1">代码参考 <a class="header-anchor" href="#代码参考-9" aria-label="Permalink to &quot;代码参考&quot;">​</a></h5><p><strong>com.itheima.a05.AtBeanPostProcessor</strong></p><h4 id="收获💡-9" tabindex="-1">收获💡 <a class="header-anchor" href="#收获💡-9" aria-label="Permalink to &quot;收获💡&quot;">​</a></h4><ol><li>进一步熟悉注解元数据（AnnotationMetadata）获取方法上注解信息</li></ol><h4 id="演示4-模拟解析-mapper-接口" tabindex="-1">演示4 - 模拟解析 Mapper 接口 <a class="header-anchor" href="#演示4-模拟解析-mapper-接口" aria-label="Permalink to &quot;演示4 - 模拟解析 Mapper 接口&quot;">​</a></h4><h5 id="代码参考-10" tabindex="-1">代码参考 <a class="header-anchor" href="#代码参考-10" aria-label="Permalink to &quot;代码参考&quot;">​</a></h5><p><strong>com.itheima.a05.MapperPostProcessor</strong></p><h4 id="收获💡-10" tabindex="-1">收获💡 <a class="header-anchor" href="#收获💡-10" aria-label="Permalink to &quot;收获💡&quot;">​</a></h4><ol><li>Mapper 接口被 Spring 管理的本质：实际是被作为 MapperFactoryBean 注册到容器中</li><li>Spring 的诡异做法，根据接口生成的 BeanDefinition 仅为根据接口名生成 bean 名</li></ol><h3 id="_6-aware-接口" tabindex="-1">6) Aware 接口 <a class="header-anchor" href="#_6-aware-接口" aria-label="Permalink to &quot;6) Aware 接口&quot;">​</a></h3><h4 id="演示-aware-接口及-initializingbean-接口" tabindex="-1">演示 - Aware 接口及 InitializingBean 接口 <a class="header-anchor" href="#演示-aware-接口及-initializingbean-接口" aria-label="Permalink to &quot;演示 - Aware 接口及 InitializingBean 接口&quot;">​</a></h4><h5 id="代码参考-11" tabindex="-1">代码参考 <a class="header-anchor" href="#代码参考-11" aria-label="Permalink to &quot;代码参考&quot;">​</a></h5><p><strong>com.itheima.a06</strong> 包</p><h4 id="收获💡-11" tabindex="-1">收获💡 <a class="header-anchor" href="#收获💡-11" aria-label="Permalink to &quot;收获💡&quot;">​</a></h4><ol><li>Aware 接口提供了一种【内置】 的注入手段，例如 <ul><li>BeanNameAware 注入 bean 的名字</li><li>BeanFactoryAware 注入 BeanFactory 容器</li><li>ApplicationContextAware 注入 ApplicationContext 容器</li><li>EmbeddedValueResolverAware 注入 \${} 解析器</li></ul></li><li>InitializingBean 接口提供了一种【内置】的初始化手段</li><li>对比 <ul><li>内置的注入和初始化不受扩展功能的影响，总会被执行</li><li>而扩展功能受某些情况影响可能会失效</li><li>因此 Spring 框架内部的类常用内置注入和初始化</li></ul></li></ol><h4 id="配置类-autowired-失效分析" tabindex="-1">配置类 @Autowired 失效分析 <a class="header-anchor" href="#配置类-autowired-失效分析" aria-label="Permalink to &quot;配置类 @Autowired 失效分析&quot;">​</a></h4><p>Java 配置类不包含 BeanFactoryPostProcessor 的情况</p>`,59),A=s("p",null,"Java 配置类包含 BeanFactoryPostProcessor 的情况，因此要创建其中的 BeanFactoryPostProcessor 必须提前创建 Java 配置类，而此时的 BeanPostProcessor 还未准备好，导致 @Autowired 等注解失效",-1),F=p(`<p>对应代码</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Configuration</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyConfig1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> final</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Logger log </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> LoggerFactory.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getLogger</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(MyConfig1.class);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Autowired</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> setApplicationContext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ApplicationContext </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">applicationContext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        log.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">debug</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;注入 ApplicationContext&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">PostConstruct</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        log.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">debug</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;初始化&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Bean</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> //  ⬅️ 注释或添加 beanFactory 后处理器对应上方两种情况</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> BeanFactoryPostProcessor </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">processor1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> beanFactory </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            log.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">debug</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;执行 processor1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><blockquote><p><em><strong>注意</strong></em></p><p>解决方法：</p><ul><li>用内置依赖注入和初始化取代扩展依赖注入和初始化</li><li>用静态工厂方法代替实例工厂方法，避免工厂对象提前被创建</li></ul></blockquote><h3 id="_7-初始化与销毁" tabindex="-1">7) 初始化与销毁 <a class="header-anchor" href="#_7-初始化与销毁" aria-label="Permalink to &quot;7) 初始化与销毁&quot;">​</a></h3><h4 id="演示-初始化销毁顺序" tabindex="-1">演示 - 初始化销毁顺序 <a class="header-anchor" href="#演示-初始化销毁顺序" aria-label="Permalink to &quot;演示 - 初始化销毁顺序&quot;">​</a></h4><h5 id="代码参考-12" tabindex="-1">代码参考 <a class="header-anchor" href="#代码参考-12" aria-label="Permalink to &quot;代码参考&quot;">​</a></h5><p><strong>com.itheima.a07</strong> 包</p><h4 id="收获💡-12" tabindex="-1">收获💡 <a class="header-anchor" href="#收获💡-12" aria-label="Permalink to &quot;收获💡&quot;">​</a></h4><p>Spring 提供了多种初始化手段，除了课堂上讲的 @PostConstruct，@Bean(initMethod) 之外，还可以实现 InitializingBean 接口来进行初始化，如果同一个 bean 用了以上手段声明了 3 个初始化方法，那么它们的执行顺序是</p><ol><li>@PostConstruct 标注的初始化方法</li><li>InitializingBean 接口的初始化方法</li><li>@Bean(initMethod) 指定的初始化方法</li></ol><p>与初始化类似，Spring 也提供了多种销毁手段，执行顺序为</p><ol><li>@PreDestroy 标注的销毁方法</li><li>DisposableBean 接口的销毁方法</li><li>@Bean(destroyMethod) 指定的销毁方法</li></ol><h3 id="_8-scope" tabindex="-1">8) Scope <a class="header-anchor" href="#_8-scope" aria-label="Permalink to &quot;8) Scope&quot;">​</a></h3><p>在当前版本的 Spring 和 Spring Boot 程序中，支持五种 Scope</p><ul><li>singleton，容器启动时创建（未设置延迟），容器关闭时销毁</li><li>prototype，每次使用时创建，不会自动销毁，需要调用 DefaultListableBeanFactory.destroyBean(bean) 销毁</li><li>request，每次请求用到此 bean 时创建，请求结束时销毁</li><li>session，每个会话用到此 bean 时创建，会话结束时销毁</li><li>application，web 容器用到此 bean 时创建，容器停止时销毁</li></ul><p>有些文章提到有 globalSession 这一 Scope，也是陈旧的说法，目前 Spring 中已废弃</p><p>但要注意，如果在 singleton 注入其它 scope 都会有问题，解决方法有</p><ul><li>@Lazy</li><li>@Scope(proxyMode = ScopedProxyMode.TARGET_CLASS)</li><li>ObjectFactory</li><li>ApplicationContext.getBean</li></ul><h4 id="演示1-request-session-application-作用域" tabindex="-1">演示1 - request, session, application 作用域 <a class="header-anchor" href="#演示1-request-session-application-作用域" aria-label="Permalink to &quot;演示1 - request, session, application 作用域&quot;">​</a></h4><h5 id="代码参考-13" tabindex="-1">代码参考 <a class="header-anchor" href="#代码参考-13" aria-label="Permalink to &quot;代码参考&quot;">​</a></h5><p><strong>com.itheima.a08</strong> 包</p><ul><li>打开不同的浏览器, 刷新 <a href="http://localhost:8080/test" target="_blank" rel="noreferrer">http://localhost:8080/test</a> 即可查看效果</li><li>如果 jdk &gt; 8, 运行时请添加 --add-opens java.base/java.lang=ALL-UNNAMED</li></ul><h4 id="收获💡-13" tabindex="-1">收获💡 <a class="header-anchor" href="#收获💡-13" aria-label="Permalink to &quot;收获💡&quot;">​</a></h4><ol><li>有几种 scope</li><li>在 singleton 中使用其它几种 scope 的方法</li><li>其它 scope 的销毁时机 <ul><li>可以将通过 server.servlet.session.timeout=30s 观察 session bean 的销毁</li><li>ServletContextScope 销毁机制疑似实现有误</li></ul></li></ol><h4 id="分析-singleton-注入其它-scope-失效" tabindex="-1">分析 - singleton 注入其它 scope 失效 <a class="header-anchor" href="#分析-singleton-注入其它-scope-失效" aria-label="Permalink to &quot;分析 - singleton 注入其它 scope 失效&quot;">​</a></h4><p>以单例注入多例为例</p><p>有一个单例对象 E</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Component</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> E</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> final</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Logger log </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> LoggerFactory.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getLogger</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(E.class);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> F f;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> E</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        log.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">info</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;E()&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Autowired</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> setF</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(F </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.f </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> f;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        log.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">info</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;setF(F f) {}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, f.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getClass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> F </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getF</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> f;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>要注入的对象 F 期望是多例</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Component</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Scope</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;prototype&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> F</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> final</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Logger log </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> LoggerFactory.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getLogger</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(F.class);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> F</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        log.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">info</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;F()&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>测试</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">E e </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> context.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getBean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(E.class);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">F f1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> e.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getF</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">F f2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> e.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getF</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(f1);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(f2);</span></span></code></pre></div><p>输出</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>com.itheima.demo.cycle.F@6622fc65</span></span>
<span class="line"><span>com.itheima.demo.cycle.F@6622fc65</span></span></code></pre></div><p>发现它们是同一个对象，而不是期望的多例对象</p><p>对于单例对象来讲，依赖注入仅发生了一次，后续再没有用到多例的 F，因此 E 用的始终是第一次依赖注入的 F</p>`,36),b=s("p",null,"解决",-1),m=s("ul",null,[s("li",null,"仍然使用 @Lazy 生成代理"),s("li",null,[a("代理对象虽然还是同一个，但当每次"),s("strong",null,"使用代理对象的任意方法"),a("时，由代理创建新的 f 对象")])],-1),B=p(`<div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Component</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> E</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Autowired</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Lazy</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> setF</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(F </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.f </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> f;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        log.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">info</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;setF(F f) {}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, f.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getClass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><blockquote><p><em><strong>注意</strong></em></p><ul><li>@Lazy 加在也可以加在成员变量上，但加在 set 方法上的目的是可以观察输出，加在成员变量上就不行了</li><li>@Autowired 加在 set 方法的目的类似</li></ul></blockquote><p>输出</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>E: setF(F f) class com.itheima.demo.cycle.F$$EnhancerBySpringCGLIB$$8b54f2bc</span></span>
<span class="line"><span>F: F()</span></span>
<span class="line"><span>com.itheima.demo.cycle.F@3a6f2de3</span></span>
<span class="line"><span>F: F()</span></span>
<span class="line"><span>com.itheima.demo.cycle.F@56303b57</span></span></code></pre></div><p>从输出日志可以看到调用 setF 方法时，f 对象的类型是代理类型</p><h4 id="演示2-4种解决方法" tabindex="-1">演示2 - 4种解决方法 <a class="header-anchor" href="#演示2-4种解决方法" aria-label="Permalink to &quot;演示2 - 4种解决方法&quot;">​</a></h4><h5 id="代码参考-14" tabindex="-1">代码参考 <a class="header-anchor" href="#代码参考-14" aria-label="Permalink to &quot;代码参考&quot;">​</a></h5><p><strong>com.itheima.a08.sub</strong> 包</p><ul><li>如果 jdk &gt; 8, 运行时请添加 --add-opens java.base/java.lang=ALL-UNNAMED</li></ul><h4 id="收获💡-14" tabindex="-1">收获💡 <a class="header-anchor" href="#收获💡-14" aria-label="Permalink to &quot;收获💡&quot;">​</a></h4><ol><li>单例注入其它 scope 的四种解决方法 <ul><li>@Lazy</li><li>@Scope(value = &quot;prototype&quot;, proxyMode = ScopedProxyMode.TARGET_CLASS)</li><li>ObjectFactory</li><li>ApplicationContext</li></ul></li><li>解决方法虽然不同，但理念上殊途同归: 都是推迟其它 scope bean 的获取</li></ol><h2 id="aop" tabindex="-1">AOP <a class="header-anchor" href="#aop" aria-label="Permalink to &quot;AOP&quot;">​</a></h2><p>AOP 底层实现方式之一是代理，由代理结合通知和目标，提供增强功能</p><p>除此以外，aspectj 提供了两种另外的 AOP 底层实现：</p><ul><li><p>第一种是通过 ajc 编译器在<strong>编译</strong> class 类文件时，就把通知的增强功能，织入到目标类的字节码中</p></li><li><p>第二种是通过 agent 在<strong>加载</strong>目标类时，修改目标类的字节码，织入增强功能</p></li><li><p>作为对比，之前学习的代理是<strong>运行</strong>时生成新的字节码</p></li></ul><p>简单比较的话：</p><ul><li>aspectj 在编译和加载时，修改目标字节码，性能较高</li><li>aspectj 因为不用代理，能突破一些技术上的限制，例如对构造、对静态方法、对 final 也能增强</li><li>但 aspectj 侵入性较强，且需要学习新的 aspectj 特有语法，因此没有广泛流行</li></ul><h3 id="_9-aop-实现之-ajc-编译器" tabindex="-1">9) AOP 实现之 ajc 编译器 <a class="header-anchor" href="#_9-aop-实现之-ajc-编译器" aria-label="Permalink to &quot;9) AOP 实现之 ajc 编译器&quot;">​</a></h3><p>代码参考项目 <strong>demo6_advanced_aspectj_01</strong></p><h4 id="收获💡-15" tabindex="-1">收获💡 <a class="header-anchor" href="#收获💡-15" aria-label="Permalink to &quot;收获💡&quot;">​</a></h4><ol><li>编译器也能修改 class 实现增强</li><li>编译器增强能突破代理仅能通过方法重写增强的限制：可以对构造方法、静态方法等实现增强</li></ol><blockquote><p><em><strong>注意</strong></em></p><ul><li>版本选择了 java 8, 因为目前的 aspectj-maven-plugin 1.14.0 最高只支持到 java 16</li><li>一定要用 maven 的 compile 来编译, idea 不会调用 ajc 编译器</li></ul></blockquote><h3 id="_10-aop-实现之-agent-类加载" tabindex="-1">10) AOP 实现之 agent 类加载 <a class="header-anchor" href="#_10-aop-实现之-agent-类加载" aria-label="Permalink to &quot;10) AOP 实现之 agent 类加载&quot;">​</a></h3><p>代码参考项目 <strong>demo6_advanced_aspectj_02</strong></p><h4 id="收获💡-16" tabindex="-1">收获💡 <a class="header-anchor" href="#收获💡-16" aria-label="Permalink to &quot;收获💡&quot;">​</a></h4><ol><li>类加载时可以通过 agent 修改 class 实现增强</li></ol><h3 id="_11-aop-实现之-proxy" tabindex="-1">11) AOP 实现之 proxy <a class="header-anchor" href="#_11-aop-实现之-proxy" aria-label="Permalink to &quot;11) AOP 实现之 proxy&quot;">​</a></h3><h4 id="演示1-jdk-动态代理" tabindex="-1">演示1 - jdk 动态代理 <a class="header-anchor" href="#演示1-jdk-动态代理" aria-label="Permalink to &quot;演示1 - jdk 动态代理&quot;">​</a></h4><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> JdkProxyDemo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Target</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> implements</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;target foo&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">param</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 目标对象</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        Target target </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Target</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 代理对象</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        Foo proxy </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (Foo) Proxy.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">newProxyInstance</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                Target.class.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getClassLoader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> Class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[]{Foo.class},</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                (p, method, args) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;proxy before...&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    Object result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> method.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">invoke</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(target, args);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;proxy after...&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> result;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                });</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 调用代理</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        proxy.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>运行结果</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>proxy before...</span></span>
<span class="line"><span>target foo</span></span>
<span class="line"><span>proxy after...</span></span></code></pre></div><h4 id="收获💡-17" tabindex="-1">收获💡 <a class="header-anchor" href="#收获💡-17" aria-label="Permalink to &quot;收获💡&quot;">​</a></h4><ul><li>jdk 动态代理要求目标<strong>必须</strong>实现接口，生成的代理类实现相同接口，因此代理与目标之间是平级兄弟关系</li></ul><h4 id="演示2-cglib-代理" tabindex="-1">演示2 - cglib 代理 <a class="header-anchor" href="#演示2-cglib-代理" aria-label="Permalink to &quot;演示2 - cglib 代理&quot;">​</a></h4><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CglibProxyDemo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Target</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;target foo&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">param</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 目标对象</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        Target target </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Target</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 代理对象</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        Target proxy </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (Target) Enhancer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">create</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Target.class, </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                (MethodInterceptor) (p, method, args, methodProxy) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;proxy before...&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            Object result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> methodProxy.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">invoke</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(target, args);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // 另一种调用方法，不需要目标对象实例</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//            Object result = methodProxy.invokeSuper(p, args);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;proxy after...&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> result;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        });</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 调用代理</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        proxy.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>运行结果与 jdk 动态代理相同</p><h4 id="收获💡-18" tabindex="-1">收获💡 <a class="header-anchor" href="#收获💡-18" aria-label="Permalink to &quot;收获💡&quot;">​</a></h4><ul><li>cglib 不要求目标实现接口，它生成的代理类是目标的子类，因此代理与目标之间是子父关系</li><li>限制⛔：根据上述分析 final 类无法被 cglib 增强</li></ul><h3 id="_12-jdk-动态代理进阶" tabindex="-1">12) jdk 动态代理进阶 <a class="header-anchor" href="#_12-jdk-动态代理进阶" aria-label="Permalink to &quot;12) jdk 动态代理进阶&quot;">​</a></h3><h4 id="演示1-模拟-jdk-动态代理" tabindex="-1">演示1 - 模拟 jdk 动态代理 <a class="header-anchor" href="#演示1-模拟-jdk-动态代理" aria-label="Permalink to &quot;演示1 - 模拟 jdk 动态代理&quot;">​</a></h4><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> A12</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> bar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Target</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> implements</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;target foo&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> bar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;target bar&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">param</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // ⬇️1. 创建代理，这时传入 InvocationHandler</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        Foo proxy </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> $Proxy0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> InvocationHandler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {    </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // ⬇️5. 进入 InvocationHandler</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Object </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">invoke</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Object </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">proxy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, Method </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">method</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">throws</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Throwable{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                // ⬇️6. 功能增强</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;before...&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                // ⬇️7. 反射调用目标方法</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> method.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">invoke</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Target</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), args);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        });</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // ⬇️2. 调用代理方法</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        proxy.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        proxy.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>模拟代理实现</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> java.lang.reflect.InvocationHandler;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> java.lang.reflect.Method;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> java.lang.reflect.Proxy;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> java.lang.reflect.UndeclaredThrowableException;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ⬇️这就是 jdk 代理类的源码, 秘密都在里面</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> $Proxy0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Proxy</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> implements</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> A12.Foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Proxy0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(InvocationHandler </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">h</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        super</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(h);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ⬇️3. 进入代理方法</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // ⬇️4. 回调 InvocationHandler</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            h.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">invoke</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, foo, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> Object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (RuntimeException | Error </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            throw</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> e;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (Throwable </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            throw</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> UndeclaredThrowableException</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(e);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Override</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> bar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            Object result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> h.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">invoke</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, bar, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> Object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) result;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (RuntimeException | Error </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            throw</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> e;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (Throwable </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            throw</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> UndeclaredThrowableException</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(e);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    static</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Method foo;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    static</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Method bar;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    static</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            foo </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> A12.Foo.class.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getMethod</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;foo&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            bar </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> A12.Foo.class.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getMethod</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;bar&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (NoSuchMethodException </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            throw</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> NoSuchMethodError</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(e.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getMessage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="收获💡-19" tabindex="-1">收获💡 <a class="header-anchor" href="#收获💡-19" aria-label="Permalink to &quot;收获💡&quot;">​</a></h4><p>代理一点都不难，无非就是利用了多态、反射的知识</p><ol><li>方法重写可以增强逻辑，只不过这【增强逻辑】千变万化，不能写死在代理内部</li><li>通过接口回调将【增强逻辑】置于代理类之外</li><li>配合接口方法反射（是多态调用），就可以再联动调用目标方法</li><li>会用 arthas 的 jad 工具反编译代理类</li><li>限制⛔：代理增强是借助多态来实现，因此成员变量、静态方法、final 方法均不能通过代理实现</li></ol><h4 id="演示2-方法反射优化" tabindex="-1">演示2 - 方法反射优化 <a class="header-anchor" href="#演示2-方法反射优化" aria-label="Permalink to &quot;演示2 - 方法反射优化&quot;">​</a></h4><h5 id="代码参考-15" tabindex="-1">代码参考 <a class="header-anchor" href="#代码参考-15" aria-label="Permalink to &quot;代码参考&quot;">​</a></h5><p><strong>com.itheima.a12.TestMethodInvoke</strong></p><h4 id="收获💡-20" tabindex="-1">收获💡 <a class="header-anchor" href="#收获💡-20" aria-label="Permalink to &quot;收获💡&quot;">​</a></h4><ol><li>前 16 次反射性能较低</li><li>第 17 次调用会生成代理类，优化为非反射调用</li><li>会用 arthas 的 jad 工具反编译第 17 次调用生成的代理类</li></ol><blockquote><p><em><strong>注意</strong></em></p><p>运行时请添加 --add-opens java.base/java.lang.reflect=ALL-UNNAMED --add-opens java.base/jdk.internal.reflect=ALL-UNNAMED</p></blockquote><h3 id="_13-cglib-代理进阶" tabindex="-1">13) cglib 代理进阶 <a class="header-anchor" href="#_13-cglib-代理进阶" aria-label="Permalink to &quot;13) cglib 代理进阶&quot;">​</a></h3><h4 id="演示-模拟-cglib-代理" tabindex="-1">演示 - 模拟 cglib 代理 <a class="header-anchor" href="#演示-模拟-cglib-代理" aria-label="Permalink to &quot;演示 - 模拟 cglib 代理&quot;">​</a></h4><h5 id="代码参考-16" tabindex="-1">代码参考 <a class="header-anchor" href="#代码参考-16" aria-label="Permalink to &quot;代码参考&quot;">​</a></h5><p><strong>com.itheima.a13</strong> 包</p><h4 id="收获💡-21" tabindex="-1">收获💡 <a class="header-anchor" href="#收获💡-21" aria-label="Permalink to &quot;收获💡&quot;">​</a></h4><p>和 jdk 动态代理原理查不多</p><ol><li>回调的接口换了一下，InvocationHandler 改成了 MethodInterceptor</li><li>调用目标时有所改进，见下面代码片段 <ol><li>method.invoke 是反射调用，必须调用到足够次数才会进行优化</li><li>methodProxy.invoke 是不反射调用，它会正常（间接）调用目标对象的方法（Spring 采用）</li><li>methodProxy.invokeSuper 也是不反射调用，它会正常（间接）调用代理对象的方法，可以省略目标对象</li></ol></li></ol><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> A14Application</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">throws</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> InvocationTargetException {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        Target target </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Target</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        Proxy proxy </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Proxy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        proxy.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setCallbacks</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> Callback</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[]{(MethodInterceptor) (p, m, a, mp) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;proxy before...&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mp.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getSignature</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // ⬇️调用目标方法(三种)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//            Object result = m.invoke(target, a);  // ⬅️反射调用</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//            Object result = mp.invoke(target, a); // ⬅️非反射调用, 结合目标用</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            Object result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mp.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">invokeSuper</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(p, a);   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ⬅️非反射调用, 结合代理用</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;proxy after...&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mp.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getSignature</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> result;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }});</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // ⬇️调用代理方法</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        proxy.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">save</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><blockquote><p><em><strong>注意</strong></em></p><ul><li>调用 Object 的方法, 后两种在 jdk &gt;= 9 时都有问题, 需要 --add-opens java.base/java.lang=ALL-UNNAMED</li></ul></blockquote><h3 id="_14-cglib-避免反射调用" tabindex="-1">14) cglib 避免反射调用 <a class="header-anchor" href="#_14-cglib-避免反射调用" aria-label="Permalink to &quot;14) cglib 避免反射调用&quot;">​</a></h3><h4 id="演示-cglib-如何避免反射" tabindex="-1">演示 - cglib 如何避免反射 <a class="header-anchor" href="#演示-cglib-如何避免反射" aria-label="Permalink to &quot;演示 - cglib 如何避免反射&quot;">​</a></h4><h5 id="代码参考-17" tabindex="-1">代码参考 <a class="header-anchor" href="#代码参考-17" aria-label="Permalink to &quot;代码参考&quot;">​</a></h5><p><strong>com.itheima.a13.ProxyFastClass</strong>，<strong>com.itheima.a13.TargetFastClass</strong></p><h4 id="收获💡-22" tabindex="-1">收获💡 <a class="header-anchor" href="#收获💡-22" aria-label="Permalink to &quot;收获💡&quot;">​</a></h4><ol><li>当调用 MethodProxy 的 invoke 或 invokeSuper 方法时, 会动态生成两个类 <ul><li>ProxyFastClass 配合代理对象一起使用, 避免反射</li><li>TargetFastClass 配合目标对象一起使用, 避免反射 (Spring 用的这种)</li></ul></li><li>TargetFastClass 记录了 Target 中方法与编号的对应关系 <ul><li>save(long) 编号 2</li><li>save(int) 编号 1</li><li>save() 编号 0</li><li>首先根据方法名和参数个数、类型, 用 switch 和 if 找到这些方法编号</li><li>然后再根据编号去调用目标方法, 又用了一大堆 switch 和 if, 但避免了反射</li></ul></li><li>ProxyFastClass 记录了 Proxy 中方法与编号的对应关系，不过 Proxy 额外提供了下面几个方法 <ul><li>saveSuper(long) 编号 2，不增强，仅是调用 super.save(long)</li><li>saveSuper(int) 编号 1，不增强, 仅是调用 super.save(int)</li><li>saveSuper() 编号 0，不增强, 仅是调用 super.save()</li><li>查找方式与 TargetFastClass 类似</li></ul></li><li>为什么有这么麻烦的一套东西呢？ <ul><li>避免反射, 提高性能, 代价是一个代理类配两个 FastClass 类, 代理类中还得增加仅调用 super 的一堆方法</li><li>用编号处理方法对应关系比较省内存, 另外, 最初获得方法顺序是不确定的, 这个过程没法固定死</li></ul></li></ol><h3 id="_15-jdk-和-cglib-在-spring-中的统一" tabindex="-1">15) jdk 和 cglib 在 Spring 中的统一 <a class="header-anchor" href="#_15-jdk-和-cglib-在-spring-中的统一" aria-label="Permalink to &quot;15) jdk 和 cglib 在 Spring 中的统一&quot;">​</a></h3><p>Spring 中对切点、通知、切面的抽象如下</p><ul><li>切点：接口 Pointcut，典型实现 AspectJExpressionPointcut</li><li>通知：典型接口为 MethodInterceptor 代表环绕通知</li><li>切面：Advisor，包含一个 Advice 通知，PointcutAdvisor 包含一个 Advice 通知和一个 Pointcut</li></ul>`,70),C=s("p",null,"代理相关类图",-1),q=s("ul",null,[s("li",null,"AopProxyFactory 根据 proxyTargetClass 等设置选择 AopProxy 实现"),s("li",null,"AopProxy 通过 getProxy 创建代理对象"),s("li",null,"图中 Proxy 都实现了 Advised 接口，能够获得关联的切面集合与目标（其实是从 ProxyFactory 取得）"),s("li",null,"调用代理方法时，会借助 ProxyFactory 将通知统一转为环绕通知：MethodInterceptor")],-1),v=p('<h4 id="演示-底层切点、通知、切面" tabindex="-1">演示 - 底层切点、通知、切面 <a class="header-anchor" href="#演示-底层切点、通知、切面" aria-label="Permalink to &quot;演示 - 底层切点、通知、切面&quot;">​</a></h4><h5 id="代码参考-18" tabindex="-1">代码参考 <a class="header-anchor" href="#代码参考-18" aria-label="Permalink to &quot;代码参考&quot;">​</a></h5><p><strong>com.itheima.a15.A15</strong></p><h4 id="收获💡-23" tabindex="-1">收获💡 <a class="header-anchor" href="#收获💡-23" aria-label="Permalink to &quot;收获💡&quot;">​</a></h4><ol><li>底层的切点实现</li><li>底层的通知实现</li><li>底层的切面实现</li><li>ProxyFactory 用来创建代理 <ul><li>如果指定了接口，且 proxyTargetClass = false，使用 JdkDynamicAopProxy</li><li>如果没有指定接口，或者 proxyTargetClass = true，使用 ObjenesisCglibAopProxy <ul><li>例外：如果目标是接口类型或已经是 Jdk 代理，使用 JdkDynamicAopProxy</li></ul></li></ul></li></ol><blockquote><p><em><strong>注意</strong></em></p><ul><li>要区分本章节提到的 MethodInterceptor，它与之前 cglib 中用的的 MethodInterceptor 是不同的接口</li></ul></blockquote><h3 id="_16-切点匹配" tabindex="-1">16) 切点匹配 <a class="header-anchor" href="#_16-切点匹配" aria-label="Permalink to &quot;16) 切点匹配&quot;">​</a></h3><h4 id="演示-切点匹配" tabindex="-1">演示 - 切点匹配 <a class="header-anchor" href="#演示-切点匹配" aria-label="Permalink to &quot;演示 - 切点匹配&quot;">​</a></h4><h5 id="代码参考-19" tabindex="-1">代码参考 <a class="header-anchor" href="#代码参考-19" aria-label="Permalink to &quot;代码参考&quot;">​</a></h5><p><strong>com.itheima.a16.A16</strong></p><h4 id="收获💡-24" tabindex="-1">收获💡 <a class="header-anchor" href="#收获💡-24" aria-label="Permalink to &quot;收获💡&quot;">​</a></h4><ol><li>常见 aspectj 切点用法</li><li>aspectj 切点的局限性，实际的 @Transactional 切点实现</li></ol><h3 id="_17-从-aspect-到-advisor" tabindex="-1">17) 从 @Aspect 到 Advisor <a class="header-anchor" href="#_17-从-aspect-到-advisor" aria-label="Permalink to &quot;17) 从 @Aspect 到 Advisor&quot;">​</a></h3><h4 id="演示1-代理创建器" tabindex="-1">演示1 - 代理创建器 <a class="header-anchor" href="#演示1-代理创建器" aria-label="Permalink to &quot;演示1 - 代理创建器&quot;">​</a></h4><h5 id="代码参考-20" tabindex="-1">代码参考 <a class="header-anchor" href="#代码参考-20" aria-label="Permalink to &quot;代码参考&quot;">​</a></h5><p><strong>org.springframework.aop.framework.autoproxy</strong> 包</p><h4 id="收获💡-25" tabindex="-1">收获💡 <a class="header-anchor" href="#收获💡-25" aria-label="Permalink to &quot;收获💡&quot;">​</a></h4><ol><li>AnnotationAwareAspectJAutoProxyCreator 的作用 <ul><li>将高级 @Aspect 切面统一为低级 Advisor 切面</li><li>在合适的时机创建代理</li></ul></li><li>findEligibleAdvisors 找到有【资格】的 Advisors <ul><li>有【资格】的 Advisor 一部分是低级的, 可以由自己编写, 如本例 A17 中的 advisor3</li><li>有【资格】的 Advisor 另一部分是高级的, 由解析 @Aspect 后获得</li></ul></li><li>wrapIfNecessary <ul><li>它内部调用 findEligibleAdvisors, 只要返回集合不空, 则表示需要创建代理</li><li>它的调用时机通常在原始对象初始化后执行, 但碰到循环依赖会提前至依赖注入之前执行</li></ul></li></ol><h4 id="演示2-代理创建时机" tabindex="-1">演示2 - 代理创建时机 <a class="header-anchor" href="#演示2-代理创建时机" aria-label="Permalink to &quot;演示2 - 代理创建时机&quot;">​</a></h4><h5 id="代码参考-21" tabindex="-1">代码参考 <a class="header-anchor" href="#代码参考-21" aria-label="Permalink to &quot;代码参考&quot;">​</a></h5><p><strong>org.springframework.aop.framework.autoproxy.A17_1</strong></p><h4 id="收获💡-26" tabindex="-1">收获💡 <a class="header-anchor" href="#收获💡-26" aria-label="Permalink to &quot;收获💡&quot;">​</a></h4><ol><li>代理的创建时机 <ul><li>初始化之后 (无循环依赖时)</li><li>实例创建后, 依赖注入前 (有循环依赖时), 并暂存于二级缓存</li></ul></li><li>依赖注入与初始化不应该被增强, 仍应被施加于原始对象</li></ol><h4 id="演示3-before-对应的低级通知" tabindex="-1">演示3 - @Before 对应的低级通知 <a class="header-anchor" href="#演示3-before-对应的低级通知" aria-label="Permalink to &quot;演示3 - @Before 对应的低级通知&quot;">​</a></h4><h5 id="代码参考-22" tabindex="-1">代码参考 <a class="header-anchor" href="#代码参考-22" aria-label="Permalink to &quot;代码参考&quot;">​</a></h5><p><strong>org.springframework.aop.framework.autoproxy.A17_2</strong></p><h4 id="收获💡-27" tabindex="-1">收获💡 <a class="header-anchor" href="#收获💡-27" aria-label="Permalink to &quot;收获💡&quot;">​</a></h4><ol><li>@Before 前置通知会被转换为原始的 AspectJMethodBeforeAdvice 形式, 该对象包含了如下信息 <ol><li>通知代码从哪儿来</li><li>切点是什么(这里为啥要切点, 后面解释)</li><li>通知对象如何创建, 本例共用同一个 Aspect 对象</li></ol></li><li>类似的还有 <ol><li>AspectJAroundAdvice (环绕通知)</li><li>AspectJAfterReturningAdvice</li><li>AspectJAfterThrowingAdvice (环绕通知)</li><li>AspectJAfterAdvice (环绕通知)</li></ol></li></ol><h3 id="_18-静态通知调用" tabindex="-1">18) 静态通知调用 <a class="header-anchor" href="#_18-静态通知调用" aria-label="Permalink to &quot;18) 静态通知调用&quot;">​</a></h3><p>代理对象调用流程如下（以 JDK 动态代理实现为例）</p><ul><li>从 ProxyFactory 获得 Target 和环绕通知链，根据他俩创建 MethodInvocation，简称 mi</li><li>首次执行 mi.proceed() 发现有下一个环绕通知，调用它的 invoke(mi)</li><li>进入环绕通知1，执行前增强，再次调用 mi.proceed() 发现有下一个环绕通知，调用它的 invoke(mi)</li><li>进入环绕通知2，执行前增强，调用 mi.proceed() 发现没有环绕通知，调用 mi.invokeJoinPoint() 执行目标方法</li><li>目标方法执行结束，将结果返回给环绕通知2，执行环绕通知2 的后增强</li><li>环绕通知2继续将结果返回给环绕通知1，执行环绕通知1 的后增强</li><li>环绕通知1返回最终的结果</li></ul><p>图中不同颜色对应一次环绕通知或目标的调用起始至终结</p>',32),D=p('<h4 id="演示1-通知调用过程" tabindex="-1">演示1 - 通知调用过程 <a class="header-anchor" href="#演示1-通知调用过程" aria-label="Permalink to &quot;演示1 - 通知调用过程&quot;">​</a></h4><h5 id="代码参考-23" tabindex="-1">代码参考 <a class="header-anchor" href="#代码参考-23" aria-label="Permalink to &quot;代码参考&quot;">​</a></h5><p><strong>org.springframework.aop.framework.A18</strong></p><h4 id="收获💡-28" tabindex="-1">收获💡 <a class="header-anchor" href="#收获💡-28" aria-label="Permalink to &quot;收获💡&quot;">​</a></h4><p>代理方法执行时会做如下工作</p><ol><li>通过 proxyFactory 的 getInterceptorsAndDynamicInterceptionAdvice() 将其他通知统一转换为 MethodInterceptor 环绕通知 <ul><li>MethodBeforeAdviceAdapter 将 @Before AspectJMethodBeforeAdvice 适配为 MethodBeforeAdviceInterceptor</li><li>AfterReturningAdviceAdapter 将 @AfterReturning AspectJAfterReturningAdvice 适配为 AfterReturningAdviceInterceptor</li><li>这体现的是适配器设计模式</li></ul></li><li>所谓静态通知，体现在上面方法的 Interceptors 部分，这些通知调用时无需再次检查切点，直接调用即可</li><li>结合目标与环绕通知链，创建 MethodInvocation 对象，通过它完成整个调用</li></ol><h4 id="演示2-模拟-methodinvocation" tabindex="-1">演示2 - 模拟 MethodInvocation <a class="header-anchor" href="#演示2-模拟-methodinvocation" aria-label="Permalink to &quot;演示2 - 模拟 MethodInvocation&quot;">​</a></h4><h5 id="代码参考-24" tabindex="-1">代码参考 <a class="header-anchor" href="#代码参考-24" aria-label="Permalink to &quot;代码参考&quot;">​</a></h5><p><strong>org.springframework.aop.framework.A18_1</strong></p><h4 id="收获💡-29" tabindex="-1">收获💡 <a class="header-anchor" href="#收获💡-29" aria-label="Permalink to &quot;收获💡&quot;">​</a></h4><ol><li>proceed() 方法调用链中下一个环绕通知</li><li>每个环绕通知内部继续调用 proceed()</li><li>调用到没有更多通知了, 就调用目标方法</li></ol><p>MethodInvocation 的编程技巧在实现拦截器、过滤器时能用上</p><h3 id="_19-动态通知调用" tabindex="-1">19) 动态通知调用 <a class="header-anchor" href="#_19-动态通知调用" aria-label="Permalink to &quot;19) 动态通知调用&quot;">​</a></h3><h4 id="演示-带参数绑定的通知方法调用" tabindex="-1">演示 - 带参数绑定的通知方法调用 <a class="header-anchor" href="#演示-带参数绑定的通知方法调用" aria-label="Permalink to &quot;演示 - 带参数绑定的通知方法调用&quot;">​</a></h4><h5 id="代码参考-25" tabindex="-1">代码参考 <a class="header-anchor" href="#代码参考-25" aria-label="Permalink to &quot;代码参考&quot;">​</a></h5><p><strong>org.springframework.aop.framework.autoproxy.A19</strong></p><h4 id="收获💡-30" tabindex="-1">收获💡 <a class="header-anchor" href="#收获💡-30" aria-label="Permalink to &quot;收获💡&quot;">​</a></h4><ol><li>通过 proxyFactory 的 getInterceptorsAndDynamicInterceptionAdvice() 将其他通知统一转换为 MethodInterceptor 环绕通知</li><li>所谓动态通知，体现在上面方法的 DynamicInterceptionAdvice 部分，这些通知调用时因为要为通知方法绑定参数，还需再次利用切点表达式</li><li>动态通知调用复杂程度高，性能较低</li></ol><h2 id="web" tabindex="-1">WEB <a class="header-anchor" href="#web" aria-label="Permalink to &quot;WEB&quot;">​</a></h2><h3 id="_20-requestmappinghandlermapping-与-requestmappinghandleradapter" tabindex="-1">20) RequestMappingHandlerMapping 与 RequestMappingHandlerAdapter <a class="header-anchor" href="#_20-requestmappinghandlermapping-与-requestmappinghandleradapter" aria-label="Permalink to &quot;20) RequestMappingHandlerMapping 与 RequestMappingHandlerAdapter&quot;">​</a></h3><p>RequestMappingHandlerMapping 与 RequestMappingHandlerAdapter 俩是一对，分别用来</p><ul><li>处理 @RequestMapping 映射</li><li>调用控制器方法、并处理方法参数与方法返回值</li></ul><h4 id="演示1-dispatcherservlet-初始化" tabindex="-1">演示1 - DispatcherServlet 初始化 <a class="header-anchor" href="#演示1-dispatcherservlet-初始化" aria-label="Permalink to &quot;演示1 - DispatcherServlet 初始化&quot;">​</a></h4><h5 id="代码参考-26" tabindex="-1">代码参考 <a class="header-anchor" href="#代码参考-26" aria-label="Permalink to &quot;代码参考&quot;">​</a></h5><p><strong>com.itheima.a20</strong> 包</p><h4 id="收获💡-31" tabindex="-1">收获💡 <a class="header-anchor" href="#收获💡-31" aria-label="Permalink to &quot;收获💡&quot;">​</a></h4><ol><li>DispatcherServlet 是在第一次被访问时执行初始化, 也可以通过配置修改为 Tomcat 启动后就初始化</li><li>在初始化时会从 Spring 容器中找一些 Web 需要的组件, 如 HandlerMapping、HandlerAdapter 等，并逐一调用它们的初始化</li><li>RequestMappingHandlerMapping 初始化时，会收集所有 @RequestMapping 映射信息，封装为 Map，其中 <ul><li>key 是 RequestMappingInfo 类型，包括请求路径、请求方法等信息</li><li>value 是 HandlerMethod 类型，包括控制器方法对象、控制器对象</li><li>有了这个 Map，就可以在请求到达时，快速完成映射，找到 HandlerMethod 并与匹配的拦截器一起返回给 DispatcherServlet</li></ul></li><li>RequestMappingHandlerAdapter 初始化时，会准备 HandlerMethod 调用时需要的各个组件，如： <ul><li>HandlerMethodArgumentResolver 解析控制器方法参数</li><li>HandlerMethodReturnValueHandler 处理控制器方法返回值</li></ul></li></ol><h4 id="演示2-自定义参数与返回值处理器" tabindex="-1">演示2 - 自定义参数与返回值处理器 <a class="header-anchor" href="#演示2-自定义参数与返回值处理器" aria-label="Permalink to &quot;演示2 - 自定义参数与返回值处理器&quot;">​</a></h4><h5 id="代码参考-27" tabindex="-1">代码参考 <a class="header-anchor" href="#代码参考-27" aria-label="Permalink to &quot;代码参考&quot;">​</a></h5><p><strong>com.itheima.a20.TokenArgumentResolver</strong> ，<strong>com.itheima.a20.YmlReturnValueHandler</strong></p><h4 id="收获💡-32" tabindex="-1">收获💡 <a class="header-anchor" href="#收获💡-32" aria-label="Permalink to &quot;收获💡&quot;">​</a></h4><ol><li>体会参数解析器的作用</li><li>体会返回值处理器的作用</li></ol><h3 id="_21-参数解析器" tabindex="-1">21) 参数解析器 <a class="header-anchor" href="#_21-参数解析器" aria-label="Permalink to &quot;21) 参数解析器&quot;">​</a></h3><h4 id="演示-常见参数解析器" tabindex="-1">演示 - 常见参数解析器 <a class="header-anchor" href="#演示-常见参数解析器" aria-label="Permalink to &quot;演示 - 常见参数解析器&quot;">​</a></h4><h5 id="代码参考-28" tabindex="-1">代码参考 <a class="header-anchor" href="#代码参考-28" aria-label="Permalink to &quot;代码参考&quot;">​</a></h5><p><strong>com.itheima.a21</strong> 包</p><h4 id="收获💡-33" tabindex="-1">收获💡 <a class="header-anchor" href="#收获💡-33" aria-label="Permalink to &quot;收获💡&quot;">​</a></h4><ol><li>初步了解 RequestMappingHandlerAdapter 的调用过程 <ol><li>控制器方法被封装为 HandlerMethod</li><li>准备对象绑定与类型转换</li><li>准备 ModelAndViewContainer 用来存储中间 Model 结果</li><li>解析每个参数值</li></ol></li><li>解析参数依赖的就是各种参数解析器，它们都有两个重要方法 <ul><li>supportsParameter 判断是否支持方法参数</li><li>resolveArgument 解析方法参数</li></ul></li><li>常见参数的解析 <ul><li>@RequestParam</li><li>省略 @RequestParam</li><li>@RequestParam(defaultValue)</li><li>MultipartFile</li><li>@PathVariable</li><li>@RequestHeader</li><li>@CookieValue</li><li>@Value</li><li>HttpServletRequest 等</li><li>@ModelAttribute</li><li>省略 @ModelAttribute</li><li>@RequestBody</li></ul></li><li>组合模式在 Spring 中的体现</li><li>@RequestParam, @CookieValue 等注解中的参数名、默认值, 都可以写成活的, 即从 ${ } #{ }中获取</li></ol><h3 id="_22-参数名解析" tabindex="-1">22) 参数名解析 <a class="header-anchor" href="#_22-参数名解析" aria-label="Permalink to &quot;22) 参数名解析&quot;">​</a></h3><h4 id="演示-两种方法获取参数名" tabindex="-1">演示 - 两种方法获取参数名 <a class="header-anchor" href="#演示-两种方法获取参数名" aria-label="Permalink to &quot;演示 - 两种方法获取参数名&quot;">​</a></h4><h5 id="代码参考-29" tabindex="-1">代码参考 <a class="header-anchor" href="#代码参考-29" aria-label="Permalink to &quot;代码参考&quot;">​</a></h5><p><strong>com.itheima.a22.A22</strong></p><h4 id="收获💡-34" tabindex="-1">收获💡 <a class="header-anchor" href="#收获💡-34" aria-label="Permalink to &quot;收获💡&quot;">​</a></h4><ol><li>如果编译时添加了 -parameters 可以生成参数表, 反射时就可以拿到参数名</li><li>如果编译时添加了 -g 可以生成调试信息, 但分为两种情况 <ul><li>普通类, 会包含局部变量表, 用 asm 可以拿到参数名</li><li>接口, 不会包含局部变量表, 无法获得参数名 <ul><li>这也是 MyBatis 在实现 Mapper 接口时为何要提供 @Param 注解来辅助获得参数名</li></ul></li></ul></li></ol><h3 id="_23-对象绑定与类型转换" tabindex="-1">23) 对象绑定与类型转换 <a class="header-anchor" href="#_23-对象绑定与类型转换" aria-label="Permalink to &quot;23) 对象绑定与类型转换&quot;">​</a></h3><h4 id="底层第一套转换接口与实现" tabindex="-1">底层第一套转换接口与实现 <a class="header-anchor" href="#底层第一套转换接口与实现" aria-label="Permalink to &quot;底层第一套转换接口与实现&quot;">​</a></h4>',46),f=s("ul",null,[s("li",null,"Printer 把其它类型转为 String"),s("li",null,"Parser 把 String 转为其它类型"),s("li",null,"Formatter 综合 Printer 与 Parser 功能"),s("li",null,"Converter 把类型 S 转为类型 T"),s("li",null,"Printer、Parser、Converter 经过适配转换成 GenericConverter 放入 Converters 集合"),s("li",null,"FormattingConversionService 利用其它们实现转换")],-1),P=s("h4",{id:"底层第二套转换接口",tabindex:"-1"},[a("底层第二套转换接口 "),s("a",{class:"header-anchor",href:"#底层第二套转换接口","aria-label":'Permalink to "底层第二套转换接口"'},"​")],-1),x=s("ul",null,[s("li",null,"PropertyEditor 把 String 与其它类型相互转换"),s("li",null,"PropertyEditorRegistry 可以注册多个 PropertyEditor 对象"),s("li",null,"与第一套接口直接可以通过 FormatterPropertyEditorAdapter 来进行适配")],-1),S=s("h4",{id:"高层接口与实现",tabindex:"-1"},[a("高层接口与实现 "),s("a",{class:"header-anchor",href:"#高层接口与实现","aria-label":'Permalink to "高层接口与实现"'},"​")],-1),_=p('<ul><li>它们都实现了 TypeConverter 这个高层转换接口，在转换时，会用到 TypeConverter Delegate 委派ConversionService 与 PropertyEditorRegistry 真正执行转换（Facade 门面模式） <ul><li>首先看是否有自定义转换器, @InitBinder 添加的即属于这种 (用了适配器模式把 Formatter 转为需要的 PropertyEditor)</li><li>再看有没有 ConversionService 转换</li><li>再利用默认的 PropertyEditor 转换</li><li>最后有一些特殊处理</li></ul></li><li>SimpleTypeConverter 仅做类型转换</li><li>BeanWrapperImpl 为 bean 的属性赋值，当需要时做类型转换，走 Property</li><li>DirectFieldAccessor 为 bean 的属性赋值，当需要时做类型转换，走 Field</li><li>ServletRequestDataBinder 为 bean 的属性执行绑定，当需要时做类型转换，根据 directFieldAccess 选择走 Property 还是 Field，具备校验与获取校验结果功能</li></ul><h4 id="演示1-类型转换与数据绑定" tabindex="-1">演示1 - 类型转换与数据绑定 <a class="header-anchor" href="#演示1-类型转换与数据绑定" aria-label="Permalink to &quot;演示1 - 类型转换与数据绑定&quot;">​</a></h4><h5 id="代码参考-30" tabindex="-1">代码参考 <a class="header-anchor" href="#代码参考-30" aria-label="Permalink to &quot;代码参考&quot;">​</a></h5><p><strong>com.itheima.a23</strong> 包</p><h4 id="收获💡-35" tabindex="-1">收获💡 <a class="header-anchor" href="#收获💡-35" aria-label="Permalink to &quot;收获💡&quot;">​</a></h4><p>基本的类型转换与数据绑定用法</p><ul><li>SimpleTypeConverter</li><li>BeanWrapperImpl</li><li>DirectFieldAccessor</li><li>ServletRequestDataBinder</li></ul><h4 id="演示2-数据绑定工厂" tabindex="-1">演示2 - 数据绑定工厂 <a class="header-anchor" href="#演示2-数据绑定工厂" aria-label="Permalink to &quot;演示2 - 数据绑定工厂&quot;">​</a></h4><h5 id="代码参考-31" tabindex="-1">代码参考 <a class="header-anchor" href="#代码参考-31" aria-label="Permalink to &quot;代码参考&quot;">​</a></h5><p><strong>com.itheima.a23.TestServletDataBinderFactory</strong></p><h4 id="收获💡-36" tabindex="-1">收获💡 <a class="header-anchor" href="#收获💡-36" aria-label="Permalink to &quot;收获💡&quot;">​</a></h4><p>ServletRequestDataBinderFactory 的用法和扩展点</p><ol><li>可以解析控制器的 @InitBinder 标注方法作为扩展点，添加自定义转换器 <ul><li>控制器私有范围</li></ul></li><li>可以通过 ConfigurableWebBindingInitializer 配置 ConversionService 作为扩展点，添加自定义转换器 <ul><li>公共范围</li></ul></li><li>同时加了 @InitBinder 和 ConversionService 的转换优先级 <ol><li>优先采用 @InitBinder 的转换器</li><li>其次使用 ConversionService 的转换器</li><li>使用默认转换器</li><li>特殊处理（例如有参构造）</li></ol></li></ol><h4 id="演示3-获取泛型参数" tabindex="-1">演示3 - 获取泛型参数 <a class="header-anchor" href="#演示3-获取泛型参数" aria-label="Permalink to &quot;演示3 - 获取泛型参数&quot;">​</a></h4><h5 id="代码参考-32" tabindex="-1">代码参考 <a class="header-anchor" href="#代码参考-32" aria-label="Permalink to &quot;代码参考&quot;">​</a></h5><p><strong>com.itheima.a23.sub</strong> 包</p><h4 id="收获💡-37" tabindex="-1">收获💡 <a class="header-anchor" href="#收获💡-37" aria-label="Permalink to &quot;收获💡&quot;">​</a></h4><ol><li>java api 获取泛型参数</li><li>spring api 获取泛型参数</li></ol><h3 id="_24-controlleradvice-之-initbinder" tabindex="-1">24) @ControllerAdvice 之 @InitBinder <a class="header-anchor" href="#_24-controlleradvice-之-initbinder" aria-label="Permalink to &quot;24) @ControllerAdvice 之 @InitBinder&quot;">​</a></h3><h4 id="演示-准备-initbinder" tabindex="-1">演示 - 准备 @InitBinder <a class="header-anchor" href="#演示-准备-initbinder" aria-label="Permalink to &quot;演示 - 准备 @InitBinder&quot;">​</a></h4><p><strong>准备 @InitBinder</strong> 在整个 HandlerAdapter 调用过程中所处的位置</p>',21),M=p('<ul><li>RequestMappingHandlerAdapter 在图中缩写为 HandlerAdapter</li><li>HandlerMethodArgumentResolverComposite 在图中缩写为 ArgumentResolvers</li><li>HandlerMethodReturnValueHandlerComposite 在图中缩写为 ReturnValueHandlers</li></ul><h4 id="收获💡-38" tabindex="-1">收获💡 <a class="header-anchor" href="#收获💡-38" aria-label="Permalink to &quot;收获💡&quot;">​</a></h4><ol><li>RequestMappingHandlerAdapter 初始化时会解析 @ControllerAdvice 中的 @InitBinder 方法</li><li>RequestMappingHandlerAdapter 会以类为单位，在该类首次使用时，解析此类的 @InitBinder 方法</li><li>以上两种 @InitBinder 的解析结果都会缓存来避免重复解析</li><li>控制器方法调用时，会综合利用本类的 @InitBinder 方法和 @ControllerAdvice 中的 @InitBinder 方法创建绑定工厂</li></ol><h3 id="_25-控制器方法执行流程" tabindex="-1">25) 控制器方法执行流程 <a class="header-anchor" href="#_25-控制器方法执行流程" aria-label="Permalink to &quot;25) 控制器方法执行流程&quot;">​</a></h3><h4 id="图1" tabindex="-1">图1 <a class="header-anchor" href="#图1" aria-label="Permalink to &quot;图1&quot;">​</a></h4>',5),w=p('<p>HandlerMethod 需要</p><ul><li>bean 即是哪个 Controller</li><li>method 即是 Controller 中的哪个方法</li></ul><p>ServletInvocableHandlerMethod 需要</p><ul><li>WebDataBinderFactory 负责对象绑定、类型转换</li><li>ParameterNameDiscoverer 负责参数名解析</li><li>HandlerMethodArgumentResolverComposite 负责解析参数</li><li>HandlerMethodReturnValueHandlerComposite 负责处理返回值</li></ul><h4 id="图2" tabindex="-1">图2 <a class="header-anchor" href="#图2" aria-label="Permalink to &quot;图2&quot;">​</a></h4>',5),H=s("h4",{id:"图3",tabindex:"-1"},[a("图3 "),s("a",{class:"header-anchor",href:"#图3","aria-label":'Permalink to "图3"'},"​")],-1),R=p('<h3 id="_26-controlleradvice-之-modelattribute" tabindex="-1">26) @ControllerAdvice 之 @ModelAttribute <a class="header-anchor" href="#_26-controlleradvice-之-modelattribute" aria-label="Permalink to &quot;26) @ControllerAdvice 之 @ModelAttribute&quot;">​</a></h3><h4 id="演示-准备-modelattribute" tabindex="-1">演示 - 准备 @ModelAttribute <a class="header-anchor" href="#演示-准备-modelattribute" aria-label="Permalink to &quot;演示 - 准备 @ModelAttribute&quot;">​</a></h4><h5 id="代码参考-33" tabindex="-1">代码参考 <a class="header-anchor" href="#代码参考-33" aria-label="Permalink to &quot;代码参考&quot;">​</a></h5><p><strong>com.itheima.a26</strong> 包</p><p><strong>准备 @ModelAttribute</strong> 在整个 HandlerAdapter 调用过程中所处的位置</p>',5),T=p('<h4 id="收获💡-39" tabindex="-1">收获💡 <a class="header-anchor" href="#收获💡-39" aria-label="Permalink to &quot;收获💡&quot;">​</a></h4><ol><li>RequestMappingHandlerAdapter 初始化时会解析 @ControllerAdvice 中的 @ModelAttribute 方法</li><li>RequestMappingHandlerAdapter 会以类为单位，在该类首次使用时，解析此类的 @ModelAttribute 方法</li><li>以上两种 @ModelAttribute 的解析结果都会缓存来避免重复解析</li><li>控制器方法调用时，会综合利用本类的 @ModelAttribute 方法和 @ControllerAdvice 中的 @ModelAttribute 方法创建模型工厂</li></ol><h3 id="_27-返回值处理器" tabindex="-1">27) 返回值处理器 <a class="header-anchor" href="#_27-返回值处理器" aria-label="Permalink to &quot;27) 返回值处理器&quot;">​</a></h3><h4 id="演示-常见返回值处理器" tabindex="-1">演示 - 常见返回值处理器 <a class="header-anchor" href="#演示-常见返回值处理器" aria-label="Permalink to &quot;演示 - 常见返回值处理器&quot;">​</a></h4><h5 id="代码参考-34" tabindex="-1">代码参考 <a class="header-anchor" href="#代码参考-34" aria-label="Permalink to &quot;代码参考&quot;">​</a></h5><p><strong>com.itheima.a27</strong> 包</p><h4 id="收获💡-40" tabindex="-1">收获💡 <a class="header-anchor" href="#收获💡-40" aria-label="Permalink to &quot;收获💡&quot;">​</a></h4><ol><li>常见的返回值处理器 <ul><li>ModelAndView，分别获取其模型和视图名，放入 ModelAndViewContainer</li><li>返回值类型为 String 时，把它当做视图名，放入 ModelAndViewContainer</li><li>返回值添加了 @ModelAttribute 注解时，将返回值作为模型，放入 ModelAndViewContainer <ul><li>此时需找到默认视图名</li></ul></li><li>返回值省略 @ModelAttribute 注解且返回非简单类型时，将返回值作为模型，放入 ModelAndViewContainer <ul><li>此时需找到默认视图名</li></ul></li><li>返回值类型为 ResponseEntity 时 <ul><li>此时走 MessageConverter，并设置 ModelAndViewContainer.requestHandled 为 true</li></ul></li><li>返回值类型为 HttpHeaders 时 <ul><li>会设置 ModelAndViewContainer.requestHandled 为 true</li></ul></li><li>返回值添加了 @ResponseBody 注解时 <ul><li>此时走 MessageConverter，并设置 ModelAndViewContainer.requestHandled 为 true</li></ul></li></ul></li><li>组合模式在 Spring 中的体现 + 1</li></ol><h3 id="_28-messageconverter" tabindex="-1">28) MessageConverter <a class="header-anchor" href="#_28-messageconverter" aria-label="Permalink to &quot;28) MessageConverter&quot;">​</a></h3><h4 id="演示-messageconverter-的作用" tabindex="-1">演示 - MessageConverter 的作用 <a class="header-anchor" href="#演示-messageconverter-的作用" aria-label="Permalink to &quot;演示 - MessageConverter 的作用&quot;">​</a></h4><h5 id="代码参考-35" tabindex="-1">代码参考 <a class="header-anchor" href="#代码参考-35" aria-label="Permalink to &quot;代码参考&quot;">​</a></h5><p><strong>com.itheima.a28.A28</strong></p><h4 id="收获💡-41" tabindex="-1">收获💡 <a class="header-anchor" href="#收获💡-41" aria-label="Permalink to &quot;收获💡&quot;">​</a></h4><ol><li>MessageConverter 的作用 <ul><li>@ResponseBody 是返回值处理器解析的</li><li>但具体转换工作是 MessageConverter 做的</li></ul></li><li>如何选择 MediaType <ul><li>首先看 @RequestMapping 上有没有指定</li><li>其次看 request 的 Accept 头有没有指定</li><li>最后按 MessageConverter 的顺序, 谁能谁先转换</li></ul></li></ol><h3 id="_29-controlleradvice-之-responsebodyadvice" tabindex="-1">29) @ControllerAdvice 之 ResponseBodyAdvice <a class="header-anchor" href="#_29-controlleradvice-之-responsebodyadvice" aria-label="Permalink to &quot;29) @ControllerAdvice 之 ResponseBodyAdvice&quot;">​</a></h3><h4 id="演示-responsebodyadvice-增强" tabindex="-1">演示 - ResponseBodyAdvice 增强 <a class="header-anchor" href="#演示-responsebodyadvice-增强" aria-label="Permalink to &quot;演示 - ResponseBodyAdvice 增强&quot;">​</a></h4><h5 id="代码参考-36" tabindex="-1">代码参考 <a class="header-anchor" href="#代码参考-36" aria-label="Permalink to &quot;代码参考&quot;">​</a></h5><p><strong>com.itheima.a29</strong> 包</p><p><strong>ResponseBodyAdvice 增强</strong> 在整个 HandlerAdapter 调用过程中所处的位置</p>',19),I=p(`<h4 id="收获💡-42" tabindex="-1">收获💡 <a class="header-anchor" href="#收获💡-42" aria-label="Permalink to &quot;收获💡&quot;">​</a></h4><ol><li>ResponseBodyAdvice 返回响应体前包装</li></ol><h3 id="_30-异常解析器" tabindex="-1">30) 异常解析器 <a class="header-anchor" href="#_30-异常解析器" aria-label="Permalink to &quot;30) 异常解析器&quot;">​</a></h3><h4 id="演示-exceptionhandlerexceptionresolver" tabindex="-1">演示 - ExceptionHandlerExceptionResolver <a class="header-anchor" href="#演示-exceptionhandlerexceptionresolver" aria-label="Permalink to &quot;演示 - ExceptionHandlerExceptionResolver&quot;">​</a></h4><h5 id="代码参考-37" tabindex="-1">代码参考 <a class="header-anchor" href="#代码参考-37" aria-label="Permalink to &quot;代码参考&quot;">​</a></h5><p><strong>com.itheima.a30.A30</strong></p><h4 id="收获💡-43" tabindex="-1">收获💡 <a class="header-anchor" href="#收获💡-43" aria-label="Permalink to &quot;收获💡&quot;">​</a></h4><ol><li>它能够重用参数解析器、返回值处理器，实现组件重用</li><li>它能够支持嵌套异常</li></ol><h3 id="_31-controlleradvice-之-exceptionhandler" tabindex="-1">31) @ControllerAdvice 之 @ExceptionHandler <a class="header-anchor" href="#_31-controlleradvice-之-exceptionhandler" aria-label="Permalink to &quot;31) @ControllerAdvice 之 @ExceptionHandler&quot;">​</a></h3><h4 id="演示-准备-exceptionhandler" tabindex="-1">演示 - 准备 @ExceptionHandler <a class="header-anchor" href="#演示-准备-exceptionhandler" aria-label="Permalink to &quot;演示 - 准备 @ExceptionHandler&quot;">​</a></h4><h5 id="代码参考-38" tabindex="-1">代码参考 <a class="header-anchor" href="#代码参考-38" aria-label="Permalink to &quot;代码参考&quot;">​</a></h5><p><strong>com.itheima.a31</strong> 包</p><h4 id="收获💡-44" tabindex="-1">收获💡 <a class="header-anchor" href="#收获💡-44" aria-label="Permalink to &quot;收获💡&quot;">​</a></h4><ol><li>ExceptionHandlerExceptionResolver 初始化时会解析 @ControllerAdvice 中的 @ExceptionHandler 方法</li><li>ExceptionHandlerExceptionResolver 会以类为单位，在该类首次处理异常时，解析此类的 @ExceptionHandler 方法</li><li>以上两种 @ExceptionHandler 的解析结果都会缓存来避免重复解析</li></ol><h3 id="_32-tomcat-异常处理" tabindex="-1">32) Tomcat 异常处理 <a class="header-anchor" href="#_32-tomcat-异常处理" aria-label="Permalink to &quot;32) Tomcat 异常处理&quot;">​</a></h3><ul><li><p>我们知道 @ExceptionHandler 只能处理发生在 mvc 流程中的异常，例如控制器内、拦截器内，那么如果是 Filter 出现了异常，如何进行处理呢？</p></li><li><p>在 Spring Boot 中，是这么实现的：</p><ol><li>因为内嵌了 Tomcat 容器，因此可以配置 Tomcat 的错误页面，Filter 与 错误页面之间是通过请求转发跳转的，可以在这里做手脚</li><li>先通过 ErrorPageRegistrarBeanPostProcessor 这个后处理器配置错误页面地址，默认为 <code>/error</code> 也可以通过 <code>\${server.error.path}</code> 进行配置</li><li>当 Filter 发生异常时，不会走 Spring 流程，但会走 Tomcat 的错误处理，于是就希望转发至 <code>/error</code> 这个地址 <ul><li>当然，如果没有 @ExceptionHandler，那么最终也会走到 Tomcat 的错误处理</li></ul></li><li>Spring Boot 又提供了一个 BasicErrorController，它就是一个标准 @Controller，@RequestMapping 配置为 <code>/error</code>，所以处理异常的职责就又回到了 Spring</li><li>异常信息由于会被 Tomcat 放入 request 作用域，因此 BasicErrorController 里也能获取到</li><li>具体异常信息会由 DefaultErrorAttributes 封装好</li><li>BasicErrorController 通过 Accept 头判断需要生成哪种 MediaType 的响应 <ul><li>如果要的不是 text/html，走 MessageConverter 流程</li><li>如果需要 text/html，走 mvc 流程，此时又分两种情况 <ul><li>配置了 ErrorViewResolver，根据状态码去找 View</li><li>没配置或没找到，用 BeanNameViewResolver 根据一个固定为 error 的名字找到 View，即所谓的 WhitelabelErrorView</li></ul></li></ul></li></ol></li></ul><blockquote><p><em><strong>评价</strong></em></p><ul><li>一个错误处理搞得这么复杂，就问恶心不？</li></ul></blockquote><h4 id="演示1-错误页处理" tabindex="-1">演示1 - 错误页处理 <a class="header-anchor" href="#演示1-错误页处理" aria-label="Permalink to &quot;演示1 - 错误页处理&quot;">​</a></h4><h5 id="关键代码-1" tabindex="-1">关键代码 <a class="header-anchor" href="#关键代码-1" aria-label="Permalink to &quot;关键代码&quot;">​</a></h5><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Bean</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // ⬅️修改了 Tomcat 服务器默认错误地址, 出错时使用请求转发方式跳转</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ErrorPageRegistrar </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">errorPageRegistrar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> webServerFactory </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> webServerFactory.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addErrorPages</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ErrorPage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/error&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Bean</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // ⬅️TomcatServletWebServerFactory 初始化前用它增强, 注册所有 ErrorPageRegistrar</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ErrorPageRegistrarBeanPostProcessor </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">errorPageRegistrarBeanPostProcessor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ErrorPageRegistrarBeanPostProcessor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="收获💡-45" tabindex="-1">收获💡 <a class="header-anchor" href="#收获💡-45" aria-label="Permalink to &quot;收获💡&quot;">​</a></h4><ol><li>Tomcat 的错误页处理手段</li></ol><h4 id="演示2-basicerrorcontroller" tabindex="-1">演示2 - BasicErrorController <a class="header-anchor" href="#演示2-basicerrorcontroller" aria-label="Permalink to &quot;演示2 - BasicErrorController&quot;">​</a></h4><h5 id="关键代码-2" tabindex="-1">关键代码 <a class="header-anchor" href="#关键代码-2" aria-label="Permalink to &quot;关键代码&quot;">​</a></h5><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Bean</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // ⬅️ErrorProperties 封装环境键值, ErrorAttributes 控制有哪些错误信息</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> BasicErrorController </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">basicErrorController</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ErrorProperties errorProperties </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ErrorProperties</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    errorProperties.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setIncludeException</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> BasicErrorController</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> DefaultErrorAttributes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), errorProperties);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Bean</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // ⬅️名称为 error 的视图, 作为 BasicErrorController 的 text/html 响应结果</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> View </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> View</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Override</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> render</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            Map&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">model</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            HttpServletRequest </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">request</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            HttpServletResponse </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">response</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        ) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">throws</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Exception {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(model);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            response.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setContentType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;text/html;charset=utf-8&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            response.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getWriter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                    &lt;h3&gt;服务器内部错误&lt;/h3&gt;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                    &quot;&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Bean</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // ⬅️收集容器中所有 View 对象, bean 的名字作为视图名</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ViewResolver </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">viewResolver</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> BeanNameViewResolver</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="收获💡-46" tabindex="-1">收获💡 <a class="header-anchor" href="#收获💡-46" aria-label="Permalink to &quot;收获💡&quot;">​</a></h4><ol><li>Spring Boot 中 BasicErrorController 如何工作</li></ol><h3 id="_33-beannameurlhandlermapping-与-simplecontrollerhandleradapter" tabindex="-1">33) BeanNameUrlHandlerMapping 与 SimpleControllerHandlerAdapter <a class="header-anchor" href="#_33-beannameurlhandlermapping-与-simplecontrollerhandleradapter" aria-label="Permalink to &quot;33) BeanNameUrlHandlerMapping 与 SimpleControllerHandlerAdapter&quot;">​</a></h3><h4 id="演示-本组映射器和适配器" tabindex="-1">演示 - 本组映射器和适配器 <a class="header-anchor" href="#演示-本组映射器和适配器" aria-label="Permalink to &quot;演示 - 本组映射器和适配器&quot;">​</a></h4><h5 id="关键代码-3" tabindex="-1">关键代码 <a class="header-anchor" href="#关键代码-3" aria-label="Permalink to &quot;关键代码&quot;">​</a></h5><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Bean</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> BeanNameUrlHandlerMapping </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">beanNameUrlHandlerMapping</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> BeanNameUrlHandlerMapping</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Bean</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> SimpleControllerHandlerAdapter </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">simpleControllerHandlerAdapter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SimpleControllerHandlerAdapter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Bean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/c3&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Controller </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">controller3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (request, response) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        response.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getWriter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;this is c3&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="收获💡-47" tabindex="-1">收获💡 <a class="header-anchor" href="#收获💡-47" aria-label="Permalink to &quot;收获💡&quot;">​</a></h4><ol><li>BeanNameUrlHandlerMapping，以 / 开头的 bean 的名字会被当作映射路径</li><li>这些 bean 本身当作 handler，要求实现 Controller 接口</li><li>SimpleControllerHandlerAdapter，调用 handler</li><li>模拟实现这组映射器和适配器</li></ol><h3 id="_34-routerfunctionmapping-与-handlerfunctionadapter" tabindex="-1">34) RouterFunctionMapping 与 HandlerFunctionAdapter <a class="header-anchor" href="#_34-routerfunctionmapping-与-handlerfunctionadapter" aria-label="Permalink to &quot;34) RouterFunctionMapping 与 HandlerFunctionAdapter&quot;">​</a></h3><h4 id="演示-本组映射器和适配器-1" tabindex="-1">演示 - 本组映射器和适配器 <a class="header-anchor" href="#演示-本组映射器和适配器-1" aria-label="Permalink to &quot;演示 - 本组映射器和适配器&quot;">​</a></h4><h5 id="关键代码-4" tabindex="-1">关键代码 <a class="header-anchor" href="#关键代码-4" aria-label="Permalink to &quot;关键代码&quot;">​</a></h5><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Bean</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> RouterFunctionMapping </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">routerFunctionMapping</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> RouterFunctionMapping</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Bean</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> HandlerFunctionAdapter </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">handlerFunctionAdapter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HandlerFunctionAdapter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Bean</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> RouterFunction</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ServerResponse</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> r1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //           ⬇️映射条件   ⬇️handler</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> route</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">GET</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/r1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), request </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ok</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">body</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;this is r1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="收获💡-48" tabindex="-1">收获💡 <a class="header-anchor" href="#收获💡-48" aria-label="Permalink to &quot;收获💡&quot;">​</a></h4><ol><li>RouterFunctionMapping, 通过 RequestPredicate 条件映射</li><li>handler 要实现 HandlerFunction 接口</li><li>HandlerFunctionAdapter, 调用 handler</li></ol><h3 id="_35-simpleurlhandlermapping-与-httprequesthandleradapter" tabindex="-1">35) SimpleUrlHandlerMapping 与 HttpRequestHandlerAdapter <a class="header-anchor" href="#_35-simpleurlhandlermapping-与-httprequesthandleradapter" aria-label="Permalink to &quot;35) SimpleUrlHandlerMapping 与 HttpRequestHandlerAdapter&quot;">​</a></h3><h4 id="演示1-本组映射器和适配器" tabindex="-1">演示1 - 本组映射器和适配器 <a class="header-anchor" href="#演示1-本组映射器和适配器" aria-label="Permalink to &quot;演示1 - 本组映射器和适配器&quot;">​</a></h4><h5 id="代码参考-39" tabindex="-1">代码参考 <a class="header-anchor" href="#代码参考-39" aria-label="Permalink to &quot;代码参考&quot;">​</a></h5><p><strong>org.springframework.boot.autoconfigure.web.servlet.A35</strong></p><h5 id="关键代码-5" tabindex="-1">关键代码 <a class="header-anchor" href="#关键代码-5" aria-label="Permalink to &quot;关键代码&quot;">​</a></h5><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Bean</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> SimpleUrlHandlerMapping </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">simpleUrlHandlerMapping</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ApplicationContext context) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    SimpleUrlHandlerMapping handlerMapping </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SimpleUrlHandlerMapping</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Map</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">String, ResourceHttpRequestHandler</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> map </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> context.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getBeansOfType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ResourceHttpRequestHandler.class);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    handlerMapping.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setUrlMap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(map);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> handlerMapping;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Bean</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> HttpRequestHandlerAdapter </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">httpRequestHandlerAdapter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HttpRequestHandlerAdapter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Bean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/**&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ResourceHttpRequestHandler </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">handler1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ResourceHttpRequestHandler handler </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ResourceHttpRequestHandler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    handler.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setLocations</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(List.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">of</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ClassPathResource</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;static/&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)));</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> handler;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Bean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/img/**&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ResourceHttpRequestHandler </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">handler2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ResourceHttpRequestHandler handler </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ResourceHttpRequestHandler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    handler.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setLocations</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(List.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">of</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ClassPathResource</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;images/&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)));</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> handler;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="收获💡-49" tabindex="-1">收获💡 <a class="header-anchor" href="#收获💡-49" aria-label="Permalink to &quot;收获💡&quot;">​</a></h4><ol><li>SimpleUrlHandlerMapping 不会在初始化时收集映射信息，需要手动收集</li><li>SimpleUrlHandlerMapping 映射路径</li><li>ResourceHttpRequestHandler 作为静态资源 handler</li><li>HttpRequestHandlerAdapter, 调用此 handler</li></ol><h4 id="演示2-静态资源解析优化" tabindex="-1">演示2 - 静态资源解析优化 <a class="header-anchor" href="#演示2-静态资源解析优化" aria-label="Permalink to &quot;演示2 - 静态资源解析优化&quot;">​</a></h4><h5 id="关键代码-6" tabindex="-1">关键代码 <a class="header-anchor" href="#关键代码-6" aria-label="Permalink to &quot;关键代码&quot;">​</a></h5><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Bean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/**&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ResourceHttpRequestHandler </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">handler1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ResourceHttpRequestHandler handler </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ResourceHttpRequestHandler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    handler.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setLocations</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(List.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">of</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ClassPathResource</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;static/&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    handler.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setResourceResolvers</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(List.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">of</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        	// ⬇️缓存优化</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CachingResourceResolver</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ConcurrentMapCache</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;cache1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)),</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        	// ⬇️压缩优化</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> EncodedResourceResolver</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(),</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        	// ⬇️原始资源解析</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> PathResourceResolver</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ));</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> handler;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="收获💡-50" tabindex="-1">收获💡 <a class="header-anchor" href="#收获💡-50" aria-label="Permalink to &quot;收获💡&quot;">​</a></h4><ol><li>责任链模式体现</li><li>压缩文件需要手动生成</li></ol><h4 id="演示3-欢迎页" tabindex="-1">演示3 - 欢迎页 <a class="header-anchor" href="#演示3-欢迎页" aria-label="Permalink to &quot;演示3 - 欢迎页&quot;">​</a></h4><h5 id="关键代码-7" tabindex="-1">关键代码 <a class="header-anchor" href="#关键代码-7" aria-label="Permalink to &quot;关键代码&quot;">​</a></h5><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Bean</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> WelcomePageHandlerMapping </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">welcomePageHandlerMapping</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ApplicationContext context) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Resource resource </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> context.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getResource</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;classpath:static/index.html&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> WelcomePageHandlerMapping</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, context, resource, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/**&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Bean</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> SimpleControllerHandlerAdapter </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">simpleControllerHandlerAdapter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SimpleControllerHandlerAdapter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="收获💡-51" tabindex="-1">收获💡 <a class="header-anchor" href="#收获💡-51" aria-label="Permalink to &quot;收获💡&quot;">​</a></h4><ol><li>欢迎页支持静态欢迎页与动态欢迎页</li><li>WelcomePageHandlerMapping 映射欢迎页（即只映射 &#39;/&#39;） <ul><li>它内置的 handler ParameterizableViewController 作用是不执行逻辑，仅根据视图名找视图</li><li>视图名固定为 forward:index.html</li></ul></li><li>SimpleControllerHandlerAdapter, 调用 handler <ul><li>转发至 /index.html</li><li>处理 /index.html 又会走上面的静态资源处理流程</li></ul></li></ol><h4 id="映射器与适配器小结" tabindex="-1">映射器与适配器小结 <a class="header-anchor" href="#映射器与适配器小结" aria-label="Permalink to &quot;映射器与适配器小结&quot;">​</a></h4><ol><li>HandlerMapping 负责建立请求与控制器之间的映射关系 <ul><li>RequestMappingHandlerMapping (与 @RequestMapping 匹配)</li><li>WelcomePageHandlerMapping (/)</li><li>BeanNameUrlHandlerMapping (与 bean 的名字匹配 以 / 开头)</li><li>RouterFunctionMapping (函数式 RequestPredicate, HandlerFunction)</li><li>SimpleUrlHandlerMapping (静态资源 通配符 /** /img/**)</li><li>之间也会有顺序问题, boot 中默认顺序如上</li></ul></li><li>HandlerAdapter 负责实现对各种各样的 handler 的适配调用 <ul><li>RequestMappingHandlerAdapter 处理：@RequestMapping 方法 <ul><li>参数解析器、返回值处理器体现了组合模式</li></ul></li><li>SimpleControllerHandlerAdapter 处理：Controller 接口</li><li>HandlerFunctionAdapter 处理：HandlerFunction 函数式接口</li><li>HttpRequestHandlerAdapter 处理：HttpRequestHandler 接口 (静态资源处理)</li><li>这也是典型适配器模式体现</li></ul></li></ol>`,59),j=p('<h3 id="_36-mvc-处理流程" tabindex="-1">36) mvc 处理流程 <a class="header-anchor" href="#_36-mvc-处理流程" aria-label="Permalink to &quot;36) mvc 处理流程&quot;">​</a></h3><p>当浏览器发送一个请求 <code>http://localhost:8080/hello</code> 后，请求到达服务器，其处理流程是：</p><ol><li><p>服务器提供了 DispatcherServlet，它使用的是标准 Servlet 技术</p><ul><li>路径：默认映射路径为 <code>/</code>，即会匹配到所有请求 URL，可作为请求的统一入口，也被称之为<strong>前控制器</strong><ul><li>jsp 不会匹配到 DispatcherServlet</li><li>其它有路径的 Servlet 匹配优先级也高于 DispatcherServlet</li></ul></li><li>创建：在 Boot 中，由 DispatcherServletAutoConfiguration 这个自动配置类提供 DispatcherServlet 的 bean</li><li>初始化：DispatcherServlet 初始化时会优先到容器里寻找各种组件，作为它的成员变量 <ul><li>HandlerMapping，初始化时记录映射关系</li><li>HandlerAdapter，调用控制器方法或者Handler方法。初始化时准备参数解析器、返回值处理器、消息转换器</li><li>HandlerExceptionResolver，初始化时准备参数解析器、返回值处理器、消息转换器</li><li>ViewResolver</li></ul></li></ul></li><li><p>DispatcherServlet 会利用 RequestMappingHandlerMapping 查找控制器方法</p><ul><li><p>例如根据 /hello 路径找到 @RequestMapping(&quot;/hello&quot;) 对应的控制器方法</p></li><li><p>控制器方法会被封装为 HandlerMethod 对象，并结合匹配到的拦截器一起返回给 DispatcherServlet</p></li><li><p>HandlerMethod 和拦截器合在一起称为 HandlerExecutionChain（调用链）对象</p></li></ul></li><li><p>DispatcherServlet 接下来会：</p><ol><li>调用拦截器的 preHandle 方法</li><li>RequestMappingHandlerAdapter 调用 handle 方法，准备数据绑定工厂、模型工厂、ModelAndViewContainer、将 HandlerMethod 完善为 ServletInvocableHandlerMethod <ul><li>@ControllerAdvice 全局增强点1️⃣：补充模型数据</li><li>@ControllerAdvice 全局增强点2️⃣：补充自定义类型转换器</li><li>使用 HandlerMethodArgumentResolver 准备参数 <ul><li>@ControllerAdvice 全局增强点3️⃣：RequestBody 增强</li></ul></li><li>调用 ServletInvocableHandlerMethod</li><li>使用 HandlerMethodReturnValueHandler 处理返回值 <ul><li>@ControllerAdvice 全局增强点4️⃣：ResponseBody 增强</li></ul></li><li>根据 ModelAndViewContainer 获取 ModelAndView <ul><li>如果返回的 ModelAndView 为 null，不走第 4 步视图解析及渲染流程 <ul><li>例如，有的返回值处理器调用了 HttpMessageConverter 来将结果转换为 JSON，这时 ModelAndView 就为 null</li></ul></li><li>如果返回的 ModelAndView 不为 null，会在第 4 步走视图解析及渲染流程</li></ul></li></ul></li><li>调用拦截器的 postHandle 方法</li><li>处理异常或视图渲染 <ul><li>如果 1~3 出现异常，走 ExceptionHandlerExceptionResolver 处理异常流程 <ul><li>@ControllerAdvice 全局增强点5️⃣：@ExceptionHandler 异常处理</li></ul></li><li>正常，走视图解析及渲染流程</li></ul></li><li>调用拦截器的 afterCompletion 方法</li></ol></li></ol><h2 id="boot" tabindex="-1">Boot <a class="header-anchor" href="#boot" aria-label="Permalink to &quot;Boot&quot;">​</a></h2><h3 id="_37-boot-骨架项目" tabindex="-1">37) Boot 骨架项目 <a class="header-anchor" href="#_37-boot-骨架项目" aria-label="Permalink to &quot;37) Boot 骨架项目&quot;">​</a></h3><p>如果是 linux 环境，用以下命令即可获取 spring boot 的骨架 pom.xml</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">curl</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -G</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://start.spring.io/pom.xml -d dependencies=web,mysql,mybatis -o pom.xml</span></span></code></pre></div><p>也可以使用 Postman 等工具实现</p><p>若想获取更多用法，请参考</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">curl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://start.spring.io</span></span></code></pre></div><h3 id="_38-boot-war项目" tabindex="-1">38) Boot War项目 <a class="header-anchor" href="#_38-boot-war项目" aria-label="Permalink to &quot;38) Boot War项目&quot;">​</a></h3><p>步骤1：创建模块，区别在于打包方式选择 war</p><p><img src="'+d+'" alt="" loading="lazy"></p><p>接下来勾选 Spring Web 支持</p><p><img src="'+c+`" alt="" loading="lazy"></p><p>步骤2：编写控制器</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Controller</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyController</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">RequestMapping</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/hello&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> String </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">abc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;进入了控制器&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;hello&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>步骤3：编写 jsp 视图，新建 webapp 目录和一个 hello.jsp 文件，注意文件名与控制器方法返回的视图逻辑名一致</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>src</span></span>
<span class="line"><span>	|- main</span></span>
<span class="line"><span>		|- java</span></span>
<span class="line"><span>		|- resources</span></span>
<span class="line"><span>		|- webapp</span></span>
<span class="line"><span>			|- hello.jsp</span></span></code></pre></div><p>步骤4：配置视图路径，打开 application.properties 文件</p><div class="language-properties vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">properties</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">spring.mvc.view.prefix</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=/</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">spring.mvc.view.suffix</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=.jsp</span></span></code></pre></div><blockquote><p>将来 prefix + 控制器方法返回值 + suffix 即为视图完整路径</p></blockquote><h4 id="测试" tabindex="-1">测试 <a class="header-anchor" href="#测试" aria-label="Permalink to &quot;测试&quot;">​</a></h4><p>如果用 mvn 插件 <code>mvn spring-boot:run</code> 或 main 方法测试</p><ul><li>必须添加如下依赖，因为此时用的还是内嵌 tomcat，而内嵌 tomcat 默认不带 jasper（用来解析 jsp）</li></ul><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">dependency</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;org.apache.tomcat.embed&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;tomcat-embed-jasper&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">scope</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;provided&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">scope</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">dependency</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>也可以使用 Idea 配置 tomcat 来测试，此时用的是外置 tomcat</p><ul><li>骨架生成的代码中，多了一个 ServletInitializer，它的作用就是配置外置 Tomcat 使用的，在外置 Tomcat 启动后，去调用它创建和运行 SpringApplication</li></ul><h4 id="启示" tabindex="-1">启示 <a class="header-anchor" href="#启示" aria-label="Permalink to &quot;启示&quot;">​</a></h4><p>对于 jar 项目，若要支持 jsp，也可以在加入 jasper 依赖的前提下，把 jsp 文件置入 <code>META-INF/resources</code></p><h3 id="_39-boot-启动过程" tabindex="-1">39) Boot 启动过程 <a class="header-anchor" href="#_39-boot-启动过程" aria-label="Permalink to &quot;39) Boot 启动过程&quot;">​</a></h3><p>阶段一：SpringApplication 构造</p><ol><li>记录 BeanDefinition 源</li><li>推断应用类型</li><li>记录 ApplicationContext 初始化器</li><li>记录监听器</li><li>推断主启动类</li></ol><p>阶段二：执行 run 方法</p><ol><li><p>得到 SpringApplicationRunListeners，名字取得不好，实际是事件发布器</p><ul><li>发布 application starting 事件1️⃣</li></ul></li><li><p>封装启动 args</p></li><li><p>准备 Environment 添加命令行参数（*）</p></li><li><p>ConfigurationPropertySources 处理（*）</p><ul><li>发布 application environment 已准备事件2️⃣</li></ul></li><li><p>通过 EnvironmentPostProcessorApplicationListener 进行 env 后处理（*）</p><ul><li>application.properties，由 StandardConfigDataLocationResolver 解析</li><li>spring.application.json</li></ul></li><li><p>绑定 spring.main 到 SpringApplication 对象（*）</p></li><li><p>打印 banner（*）</p></li><li><p>创建容器</p></li><li><p>准备容器</p><ul><li>发布 application context 已初始化事件3️⃣</li></ul></li><li><p>加载 bean 定义</p><ul><li>发布 application prepared 事件4️⃣</li></ul></li><li><p>refresh 容器</p><ul><li>发布 application started 事件5️⃣</li></ul></li><li><p>执行 runner</p><ul><li><p>发布 application ready 事件6️⃣</p></li><li><p>这其中有异常，发布 application failed 事件7️⃣</p></li></ul></li></ol><blockquote><p>带 * 的有独立的示例</p></blockquote><h4 id="演示-启动过程" tabindex="-1">演示 - 启动过程 <a class="header-anchor" href="#演示-启动过程" aria-label="Permalink to &quot;演示 - 启动过程&quot;">​</a></h4><p><strong>com.itheima.a39.A39_1</strong> 对应 SpringApplication 构造</p><p><strong>com.itheima.a39.A39_2</strong> 对应第1步，并演示 7 个事件</p><p><strong>com.itheima.a39.A39_3</strong> 对应第2、8到12步</p><p><strong>org.springframework.boot.Step3</strong></p><p><strong>org.springframework.boot.Step4</strong></p><p><strong>org.springframework.boot.Step5</strong></p><p><strong>org.springframework.boot.Step6</strong></p><p><strong>org.springframework.boot.Step7</strong></p><h4 id="收获💡-52" tabindex="-1">收获💡 <a class="header-anchor" href="#收获💡-52" aria-label="Permalink to &quot;收获💡&quot;">​</a></h4><ol><li>SpringApplication 构造方法中所做的操作 <ul><li>可以有多种源用来加载 bean 定义</li><li>应用类型推断</li><li>添加容器初始化器</li><li>添加监听器</li><li>演示主类推断</li></ul></li><li>如何读取 spring.factories 中的配置</li><li>从配置中获取重要的事件发布器：SpringApplicationRunListeners</li><li>容器的创建、初始化器增强、加载 bean 定义等</li><li>CommandLineRunner、ApplicationRunner 的作用</li><li>环境对象 <ol><li>命令行 PropertySource</li><li>ConfigurationPropertySources 规范环境键名称</li><li>EnvironmentPostProcessor 后处理增强 <ul><li>由 EventPublishingRunListener 通过监听事件2️⃣来调用</li></ul></li><li>绑定 spring.main 前缀的 key value 至 SpringApplication</li></ol></li><li>Banner</li></ol><h3 id="_40-tomcat-内嵌容器" tabindex="-1">40) Tomcat 内嵌容器 <a class="header-anchor" href="#_40-tomcat-内嵌容器" aria-label="Permalink to &quot;40) Tomcat 内嵌容器&quot;">​</a></h3><p>Tomcat 基本结构</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>Server</span></span>
<span class="line"><span>└───Service</span></span>
<span class="line"><span>    ├───Connector (协议, 端口)</span></span>
<span class="line"><span>    └───Engine</span></span>
<span class="line"><span>        └───Host(虚拟主机 localhost)</span></span>
<span class="line"><span>            ├───Context1 (应用1, 可以设置虚拟路径, / 即 url 起始路径; 项目磁盘路径, 即 docBase )</span></span>
<span class="line"><span>            │   │   index.html</span></span>
<span class="line"><span>            │   └───WEB-INF</span></span>
<span class="line"><span>            │       │   web.xml (servlet, filter, listener) 3.0</span></span>
<span class="line"><span>            │       ├───classes (servlet, controller, service ...)</span></span>
<span class="line"><span>            │       ├───jsp</span></span>
<span class="line"><span>            │       └───lib (第三方 jar 包)</span></span>
<span class="line"><span>            └───Context2 (应用2)</span></span>
<span class="line"><span>                │   index.html</span></span>
<span class="line"><span>                └───WEB-INF</span></span>
<span class="line"><span>                        web.xml</span></span></code></pre></div><h4 id="演示1-tomcat-内嵌容器" tabindex="-1">演示1 - Tomcat 内嵌容器 <a class="header-anchor" href="#演示1-tomcat-内嵌容器" aria-label="Permalink to &quot;演示1 - Tomcat 内嵌容器&quot;">​</a></h4><h5 id="关键代码-8" tabindex="-1">关键代码 <a class="header-anchor" href="#关键代码-8" aria-label="Permalink to &quot;关键代码&quot;">​</a></h5><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] args) throws LifecycleException, IOException {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 1.创建 Tomcat 对象</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Tomcat tomcat </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Tomcat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    tomcat.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setBaseDir</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;tomcat&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 2.创建项目文件夹, 即 docBase 文件夹</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    File docBase </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Files.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createTempDirectory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;boot.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toFile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    docBase.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">deleteOnExit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 3.创建 Tomcat 项目, 在 Tomcat 中称为 Context</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Context context </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tomcat.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addContext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, docBase.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getAbsolutePath</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 4.编程添加 Servlet</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    context.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addServletContainerInitializer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ServletContainerInitializer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Override</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> onStartup</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Set&lt;Class&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&gt; </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">c</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, ServletContext </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">ctx</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">throws</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ServletException {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            HelloServlet helloServlet </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HelloServlet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            ctx.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addServlet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;aaa&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, helloServlet).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addMapping</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/hello&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }, Collections.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">emptySet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 5.启动 Tomcat</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    tomcat.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">start</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 6.创建连接器, 设置监听端口</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Connector connector </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Connector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Http11Nio2Protocol</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    connector.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setPort</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8080</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    tomcat.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setConnector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(connector);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="演示2-集成-spring-容器" tabindex="-1">演示2 - 集成 Spring 容器 <a class="header-anchor" href="#演示2-集成-spring-容器" aria-label="Permalink to &quot;演示2 - 集成 Spring 容器&quot;">​</a></h4><h5 id="关键代码-9" tabindex="-1">关键代码 <a class="header-anchor" href="#关键代码-9" aria-label="Permalink to &quot;关键代码&quot;">​</a></h5><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">WebApplicationContext springContext </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getApplicationContext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 4.编程添加 Servlet</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">context.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addServletContainerInitializer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ServletContainerInitializer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Override</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> onStartup</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Set&lt;Class&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&gt; </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">c</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, ServletContext </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">ctx</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">throws</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ServletException {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // ⬇️通过 ServletRegistrationBean 添加 DispatcherServlet 等</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (ServletRegistrationBean registrationBean </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">             springContext.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getBeansOfType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ServletRegistrationBean.class).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">values</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            registrationBean.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">onStartup</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ctx);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}, Collections.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">emptySet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span></code></pre></div><h3 id="_41-boot-自动配置" tabindex="-1">41) Boot 自动配置 <a class="header-anchor" href="#_41-boot-自动配置" aria-label="Permalink to &quot;41) Boot 自动配置&quot;">​</a></h3><h4 id="aopautoconfiguration" tabindex="-1">AopAutoConfiguration <a class="header-anchor" href="#aopautoconfiguration" aria-label="Permalink to &quot;AopAutoConfiguration&quot;">​</a></h4><p>Spring Boot 是利用了自动配置类来简化了 aop 相关配置</p><ul><li>AOP 自动配置类为 <code>org.springframework.boot.autoconfigure.aop.AopAutoConfiguration</code></li><li>可以通过 <code>spring.aop.auto=false</code> 禁用 aop 自动配置</li><li>AOP 自动配置的本质是通过 <code>@EnableAspectJAutoProxy</code> 来开启了自动代理，如果在引导类上自己添加了 <code>@EnableAspectJAutoProxy</code> 那么以自己添加的为准</li><li><code>@EnableAspectJAutoProxy</code> 的本质是向容器中添加了 <code>AnnotationAwareAspectJAutoProxyCreator</code> 这个 bean 后处理器，它能够找到容器中所有切面，并为匹配切点的目标类创建代理，创建代理的工作一般是在 bean 的初始化阶段完成的</li></ul><h4 id="datasourceautoconfiguration" tabindex="-1">DataSourceAutoConfiguration <a class="header-anchor" href="#datasourceautoconfiguration" aria-label="Permalink to &quot;DataSourceAutoConfiguration&quot;">​</a></h4><ul><li>对应的自动配置类为：org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration</li><li>它内部采用了条件装配，通过检查容器的 bean，以及类路径下的 class，来决定该 @Bean 是否生效</li></ul><p>简单说明一下，Spring Boot 支持两大类数据源：</p><ul><li>EmbeddedDatabase - 内嵌数据库连接池</li><li>PooledDataSource - 非内嵌数据库连接池</li></ul><p>PooledDataSource 又支持如下数据源</p><ul><li>hikari 提供的 HikariDataSource</li><li>tomcat-jdbc 提供的 DataSource</li><li>dbcp2 提供的 BasicDataSource</li><li>oracle 提供的 PoolDataSourceImpl</li></ul><p>如果知道数据源的实现类类型，即指定了 <code>spring.datasource.type</code>，理论上可以支持所有数据源，但这样做的一个最大问题是无法订制每种数据源的详细配置（如最大、最小连接数等）</p><h4 id="mybatisautoconfiguration" tabindex="-1">MybatisAutoConfiguration <a class="header-anchor" href="#mybatisautoconfiguration" aria-label="Permalink to &quot;MybatisAutoConfiguration&quot;">​</a></h4><ul><li>MyBatis 自动配置类为 <code>org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration</code></li><li>它主要配置了两个 bean <ul><li>SqlSessionFactory - MyBatis 核心对象，用来创建 SqlSession</li><li>SqlSessionTemplate - SqlSession 的实现，此实现会与当前线程绑定</li><li>用 ImportBeanDefinitionRegistrar 的方式扫描所有标注了 @Mapper 注解的接口</li><li>用 AutoConfigurationPackages 来确定扫描的包</li></ul></li><li>还有一个相关的 bean：MybatisProperties，它会读取配置文件中带 <code>mybatis.</code> 前缀的配置项进行定制配置</li></ul><p>@MapperScan 注解的作用与 MybatisAutoConfiguration 类似，会注册 MapperScannerConfigurer 有如下区别</p><ul><li>@MapperScan 扫描具体包（当然也可以配置关注哪个注解）</li><li>@MapperScan 如果不指定扫描具体包，则会把引导类范围内，所有接口当做 Mapper 接口</li><li>MybatisAutoConfiguration 关注的是所有标注 @Mapper 注解的接口，会忽略掉非 @Mapper 标注的接口</li></ul><p>这里有同学有疑问，之前介绍的都是将具体类交给 Spring 管理，怎么到了 MyBatis 这儿，接口就可以被管理呢？</p><ul><li>其实并非将接口交给 Spring 管理，而是每个接口会对应一个 MapperFactoryBean，是后者被 Spring 所管理，接口只是作为 MapperFactoryBean 的一个属性来配置</li></ul><h4 id="transactionautoconfiguration" tabindex="-1">TransactionAutoConfiguration <a class="header-anchor" href="#transactionautoconfiguration" aria-label="Permalink to &quot;TransactionAutoConfiguration&quot;">​</a></h4><ul><li><p>事务自动配置类有两个：</p><ul><li><code>org.springframework.boot.autoconfigure.jdbc.DataSourceTransactionManagerAutoConfiguration</code></li><li><code>org.springframework.boot.autoconfigure.transaction.TransactionAutoConfiguration</code></li></ul></li><li><p>前者配置了 DataSourceTransactionManager 用来执行事务的提交、回滚操作</p></li><li><p>后者功能上对标 @EnableTransactionManagement，包含以下三个 bean</p><ul><li>BeanFactoryTransactionAttributeSourceAdvisor 事务切面类，包含通知和切点</li><li>TransactionInterceptor 事务通知类，由它在目标方法调用前后加入事务操作</li><li>AnnotationTransactionAttributeSource 会解析 @Transactional 及事务属性，也包含了切点功能</li></ul></li><li><p>如果自己配置了 DataSourceTransactionManager 或是在引导类加了 @EnableTransactionManagement，则以自己配置的为准</p></li></ul><h4 id="servletwebserverfactoryautoconfiguration" tabindex="-1">ServletWebServerFactoryAutoConfiguration <a class="header-anchor" href="#servletwebserverfactoryautoconfiguration" aria-label="Permalink to &quot;ServletWebServerFactoryAutoConfiguration&quot;">​</a></h4><ul><li>提供 ServletWebServerFactory</li></ul><h4 id="dispatcherservletautoconfiguration" tabindex="-1">DispatcherServletAutoConfiguration <a class="header-anchor" href="#dispatcherservletautoconfiguration" aria-label="Permalink to &quot;DispatcherServletAutoConfiguration&quot;">​</a></h4><ul><li>提供 DispatcherServlet</li><li>提供 DispatcherServletRegistrationBean</li></ul><h4 id="webmvcautoconfiguration" tabindex="-1">WebMvcAutoConfiguration <a class="header-anchor" href="#webmvcautoconfiguration" aria-label="Permalink to &quot;WebMvcAutoConfiguration&quot;">​</a></h4><ul><li>配置 DispatcherServlet 的各项组件，提供的 bean 见过的有 <ul><li>多项 HandlerMapping</li><li>多项 HandlerAdapter</li><li>HandlerExceptionResolver</li></ul></li></ul><h4 id="errormvcautoconfiguration" tabindex="-1">ErrorMvcAutoConfiguration <a class="header-anchor" href="#errormvcautoconfiguration" aria-label="Permalink to &quot;ErrorMvcAutoConfiguration&quot;">​</a></h4><ul><li>提供的 bean 有 BasicErrorController</li></ul><h4 id="multipartautoconfiguration" tabindex="-1">MultipartAutoConfiguration <a class="header-anchor" href="#multipartautoconfiguration" aria-label="Permalink to &quot;MultipartAutoConfiguration&quot;">​</a></h4><ul><li>它提供了 org.springframework.web.multipart.support.StandardServletMultipartResolver</li><li>该 bean 用来解析 multipart/form-data 格式的数据</li></ul><h4 id="httpencodingautoconfiguration" tabindex="-1">HttpEncodingAutoConfiguration <a class="header-anchor" href="#httpencodingautoconfiguration" aria-label="Permalink to &quot;HttpEncodingAutoConfiguration&quot;">​</a></h4><ul><li>POST 请求参数如果有中文，无需特殊设置，这是因为 Spring Boot 已经配置了 org.springframework.boot.web.servlet.filter.OrderedCharacterEncodingFilter</li><li>对应配置 server.servlet.encoding.charset=UTF-8，默认就是 UTF-8</li><li>当然，它只影响非 json 格式的数据</li></ul><h4 id="演示-自动配置类原理" tabindex="-1">演示 - 自动配置类原理 <a class="header-anchor" href="#演示-自动配置类原理" aria-label="Permalink to &quot;演示 - 自动配置类原理&quot;">​</a></h4><h5 id="关键代码-10" tabindex="-1">关键代码 <a class="header-anchor" href="#关键代码-10" aria-label="Permalink to &quot;关键代码&quot;">​</a></h5><p>假设已有第三方的两个自动配置类</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Configuration</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // ⬅️第三方的配置类</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AutoConfiguration1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Bean</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Bean1 </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bean1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Bean1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Configuration</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // ⬅️第三方的配置类</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AutoConfiguration2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Bean</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Bean2 </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bean2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Bean2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>提供一个配置文件 META-INF/spring.factories，key 为导入器类名，值为多个自动配置类名，用逗号分隔</p><div class="language-properties vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">properties</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">MyImportSelector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">AutoConfiguration1,\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">AutoConfiguration2</span></span></code></pre></div><blockquote><p><em><strong>注意</strong></em></p><ul><li>上述配置文件中 MyImportSelector 与 AutoConfiguration1，AutoConfiguration2 为简洁均省略了包名，自己测试时请将包名根据情况补全</li></ul></blockquote><p>引入自动配置</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Configuration</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // ⬅️本项目的配置类</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(MyImportSelector.class)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Config</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyImportSelector</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> implements</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> DeferredImportSelector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ⬇️该方法从 META-INF/spring.factories 读取自动配置类名，返回的 String[] 即为要导入的配置类</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">selectImports</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(AnnotationMetadata </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">importingClassMetadata</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> SpringFactoriesLoader</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">loadFactoryNames</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(MyImportSelector.class, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="收获💡-53" tabindex="-1">收获💡 <a class="header-anchor" href="#收获💡-53" aria-label="Permalink to &quot;收获💡&quot;">​</a></h4><ol><li>自动配置类本质上就是一个配置类而已，只是用 META-INF/spring.factories 管理，与应用配置类解耦</li><li>@Enable 打头的注解本质是利用了 @Import</li><li>@Import 配合 DeferredImportSelector 即可实现导入，selectImports 方法的返回值即为要导入的配置类名</li><li>DeferredImportSelector 的导入会在最后执行，为的是让其它配置优先解析</li></ol><h3 id="_42-条件装配底层" tabindex="-1">42) 条件装配底层 <a class="header-anchor" href="#_42-条件装配底层" aria-label="Permalink to &quot;42) 条件装配底层&quot;">​</a></h3><p>条件装配的底层是本质上是 @Conditional 与 Condition，这两个注解。引入自动配置类时，期望满足一定条件才能被 Spring 管理，不满足则不管理，怎么做呢？</p><p>比如条件是【类路径下必须有 dataSource】这个 bean ，怎么做呢？</p><p>首先编写条件判断类，它实现 Condition 接口，编写条件判断逻辑</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyCondition1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> implements</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Condition</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ⬇️如果存在 Druid 依赖，条件成立</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> boolean</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> matches</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ConditionContext </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, AnnotatedTypeMetadata </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">metadata</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ClassUtils.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isPresent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>其次，在要导入的自动配置类上添加 <code>@Conditional(MyCondition1.class)</code>，将来此类被导入时就会做条件检查</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Configuration</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 第三方的配置类</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Conditional</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(MyCondition1.class) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ⬅️加入条件</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AutoConfiguration1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Bean</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Bean1 </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bean1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Bean1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>分别测试加入和去除 druid 依赖，观察 bean1 是否存在于容器</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">dependency</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;com.alibaba&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;druid&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">version</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;1.1.17&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">version</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">dependency</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><h4 id="收获💡-54" tabindex="-1">收获💡 <a class="header-anchor" href="#收获💡-54" aria-label="Permalink to &quot;收获💡&quot;">​</a></h4><ol><li>学习一种特殊的 if - else</li></ol><h2 id="其它" tabindex="-1">其它 <a class="header-anchor" href="#其它" aria-label="Permalink to &quot;其它&quot;">​</a></h2><h3 id="_43-factorybean" tabindex="-1">43) FactoryBean <a class="header-anchor" href="#_43-factorybean" aria-label="Permalink to &quot;43) FactoryBean&quot;">​</a></h3><h4 id="演示-factorybean" tabindex="-1">演示 - FactoryBean <a class="header-anchor" href="#演示-factorybean" aria-label="Permalink to &quot;演示 - FactoryBean&quot;">​</a></h4><h5 id="代码参考-40" tabindex="-1">代码参考 <a class="header-anchor" href="#代码参考-40" aria-label="Permalink to &quot;代码参考&quot;">​</a></h5><p><strong>com.itheima.a43</strong> 包</p><h4 id="收获💡-55" tabindex="-1">收获💡 <a class="header-anchor" href="#收获💡-55" aria-label="Permalink to &quot;收获💡&quot;">​</a></h4><ol><li>它的作用是用制造创建过程较为复杂的产品, 如 SqlSessionFactory, 但 @Bean 已具备等价功能</li><li>使用上较为古怪, 一不留神就会用错 <ol><li>被 FactoryBean 创建的产品 <ul><li>会认为创建、依赖注入、Aware 接口回调、前初始化这些都是 FactoryBean 的职责, 这些流程都不会走</li><li>唯有后初始化的流程会走, 也就是产品可以被代理增强</li><li>单例的产品不会存储于 BeanFactory 的 singletonObjects 成员中, 而是另一个 factoryBeanObjectCache 成员中</li></ul></li><li>按名字去获取时, 拿到的是产品对象, 名字前面加 &amp; 获取的是工厂对象</li></ol></li></ol><h3 id="_44-indexed-原理" tabindex="-1">44) @Indexed 原理 <a class="header-anchor" href="#_44-indexed-原理" aria-label="Permalink to &quot;44) @Indexed 原理&quot;">​</a></h3><p>真实项目中，只需要加入以下依赖即可</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">dependency</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;org.springframework&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;spring-context-indexer&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">optional</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;true&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">optional</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">dependency</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><h4 id="演示-indexed" tabindex="-1">演示 - @Indexed <a class="header-anchor" href="#演示-indexed" aria-label="Permalink to &quot;演示 - @Indexed&quot;">​</a></h4><h5 id="代码参考-41" tabindex="-1">代码参考 <a class="header-anchor" href="#代码参考-41" aria-label="Permalink to &quot;代码参考&quot;">​</a></h5><p><strong>com.itheima.a44</strong> 包</p><h4 id="收获💡-56" tabindex="-1">收获💡 <a class="header-anchor" href="#收获💡-56" aria-label="Permalink to &quot;收获💡&quot;">​</a></h4><ol><li>在编译时就根据 @Indexed 生成 META-INF/spring.components 文件</li><li>扫描时 <ul><li>如果发现 META-INF/spring.components 存在, 以它为准加载 bean definition</li><li>否则, 会遍历包下所有 class 资源 (包括 jar 内的)</li></ul></li><li>解决的问题，在编译期就找到 @Component 组件，节省运行期间扫描 @Component 的时间</li></ol><h3 id="_45-代理进一步理解" tabindex="-1">45) 代理进一步理解 <a class="header-anchor" href="#_45-代理进一步理解" aria-label="Permalink to &quot;45) 代理进一步理解&quot;">​</a></h3><h4 id="演示-代理" tabindex="-1">演示 - 代理 <a class="header-anchor" href="#演示-代理" aria-label="Permalink to &quot;演示 - 代理&quot;">​</a></h4><h5 id="代码参考-42" tabindex="-1">代码参考 <a class="header-anchor" href="#代码参考-42" aria-label="Permalink to &quot;代码参考&quot;">​</a></h5><p><strong>com.itheima.a45</strong> 包</p><h4 id="收获💡-57" tabindex="-1">收获💡 <a class="header-anchor" href="#收获💡-57" aria-label="Permalink to &quot;收获💡&quot;">​</a></h4><ol><li><p>spring 代理的设计特点</p><ul><li><p>依赖注入和初始化影响的是原始对象</p><ul><li>因此 cglib 不能用 MethodProxy.invokeSuper()</li></ul></li><li><p>代理与目标是两个对象，二者成员变量并不共用数据</p></li></ul></li><li><p>static 方法、final 方法、private 方法均无法增强</p><ul><li>进一步理解代理增强基于方法重写</li></ul></li></ol><h3 id="_46-value-装配底层" tabindex="-1">46) @Value 装配底层 <a class="header-anchor" href="#_46-value-装配底层" aria-label="Permalink to &quot;46) @Value 装配底层&quot;">​</a></h3><h4 id="按类型装配的步骤" tabindex="-1">按类型装配的步骤 <a class="header-anchor" href="#按类型装配的步骤" aria-label="Permalink to &quot;按类型装配的步骤&quot;">​</a></h4><ol><li>查看需要的类型是否为 Optional，是，则进行封装（非延迟），否则向下走</li><li>查看需要的类型是否为 ObjectFactory 或 ObjectProvider，是，则进行封装（延迟），否则向下走</li><li>查看需要的类型（成员或参数）上是否用 @Lazy 修饰，是，则返回代理，否则向下走</li><li>解析 @Value 的值 <ol><li>如果需要的值是字符串，先解析 \${ }，再解析 #</li><li>不是字符串，需要用 TypeConverter 转换</li></ol></li><li>看需要的类型是否为 Stream、Array、Collection、Map，是，则按集合处理，否则向下走</li><li>在 BeanFactory 的 resolvableDependencies 中找有没有类型合适的对象注入，没有向下走</li><li>在 BeanFactory 及父工厂中找类型匹配的 bean 进行筛选，筛选时会考虑 @Qualifier 及泛型</li><li>结果个数为 0 抛出 NoSuchBeanDefinitionException 异常</li><li>如果结果 &gt; 1，再根据 @Primary 进行筛选</li><li>如果结果仍 &gt; 1，再根据成员名或变量名进行筛选</li><li>结果仍 &gt; 1，抛出 NoUniqueBeanDefinitionException 异常</li></ol><h4 id="演示-value-装配过程" tabindex="-1">演示 - @Value 装配过程 <a class="header-anchor" href="#演示-value-装配过程" aria-label="Permalink to &quot;演示 - @Value 装配过程&quot;">​</a></h4><h5 id="代码参考-43" tabindex="-1">代码参考 <a class="header-anchor" href="#代码参考-43" aria-label="Permalink to &quot;代码参考&quot;">​</a></h5><p><strong>com.itheima.a46</strong> 包</p><h4 id="收获💡-58" tabindex="-1">收获💡 <a class="header-anchor" href="#收获💡-58" aria-label="Permalink to &quot;收获💡&quot;">​</a></h4><ol><li>ContextAnnotationAutowireCandidateResolver 作用之一，获取 @Value 的值</li><li>了解 \${ } 对应的解析器</li><li>了解 #{ } 对应的解析器</li><li>TypeConvert 的一项体现</li></ol><h3 id="_47-autowired-装配底层" tabindex="-1">47) @Autowired 装配底层 <a class="header-anchor" href="#_47-autowired-装配底层" aria-label="Permalink to &quot;47) @Autowired 装配底层&quot;">​</a></h3><h4 id="演示-autowired-装配过程" tabindex="-1">演示 - @Autowired 装配过程 <a class="header-anchor" href="#演示-autowired-装配过程" aria-label="Permalink to &quot;演示 - @Autowired 装配过程&quot;">​</a></h4><h5 id="代码参考-44" tabindex="-1">代码参考 <a class="header-anchor" href="#代码参考-44" aria-label="Permalink to &quot;代码参考&quot;">​</a></h5><p><strong>com.itheima.a47</strong> 包</p><h4 id="收获💡-59" tabindex="-1">收获💡 <a class="header-anchor" href="#收获💡-59" aria-label="Permalink to &quot;收获💡&quot;">​</a></h4><ol><li>@Autowired 本质上是根据成员变量或方法参数的类型进行装配</li><li>如果待装配类型是 Optional，需要根据 Optional 泛型找到 bean，再封装为 Optional 对象装配</li><li>如果待装配的类型是 ObjectFactory，需要根据 ObjectFactory 泛型创建 ObjectFactory 对象装配 <ul><li>此方法可以延迟 bean 的获取</li></ul></li><li>如果待装配的成员变量或方法参数上用 @Lazy 标注，会创建代理对象装配 <ul><li>此方法可以延迟真实 bean 的获取</li><li>被装配的代理不作为 bean</li></ul></li><li>如果待装配类型是数组，需要获取数组元素类型，根据此类型找到多个 bean 进行装配</li><li>如果待装配类型是 Collection 或其子接口，需要获取 Collection 泛型，根据此类型找到多个 bean</li><li>如果待装配类型是 ApplicationContext 等特殊类型 <ul><li>会在 BeanFactory 的 resolvableDependencies 成员按类型查找装配</li><li>resolvableDependencies 是 map 集合，key 是特殊类型，value 是其对应对象</li><li>不能直接根据 key 进行查找，而是用 isAssignableFrom 逐一尝试右边类型是否可以被赋值给左边的 key 类型</li></ul></li><li>如果待装配类型有泛型参数 <ul><li>需要利用 ContextAnnotationAutowireCandidateResolver 按泛型参数类型筛选</li></ul></li><li>如果待装配类型有 @Qualifier <ul><li>需要利用 ContextAnnotationAutowireCandidateResolver 按注解提供的 bean 名称筛选</li></ul></li><li>有 @Primary 标注的 @Component 或 @Bean 的处理</li><li>与成员变量名或方法参数名同名 bean 的处理</li></ol><h3 id="_48-事件监听器" tabindex="-1">48) 事件监听器 <a class="header-anchor" href="#_48-事件监听器" aria-label="Permalink to &quot;48) 事件监听器&quot;">​</a></h3><h4 id="演示-事件监听器" tabindex="-1">演示 - 事件监听器 <a class="header-anchor" href="#演示-事件监听器" aria-label="Permalink to &quot;演示 - 事件监听器&quot;">​</a></h4><h5 id="代码参考-45" tabindex="-1">代码参考 <a class="header-anchor" href="#代码参考-45" aria-label="Permalink to &quot;代码参考&quot;">​</a></h5><p><strong>com.itheima.a48</strong> 包</p><h4 id="收获💡-60" tabindex="-1">收获💡 <a class="header-anchor" href="#收获💡-60" aria-label="Permalink to &quot;收获💡&quot;">​</a></h4><p>事件监听器的两种方式</p><ol><li>实现 ApplicationListener 接口 <ul><li>根据接口泛型确定事件类型</li></ul></li><li>@EventListener 标注监听方法 <ul><li>根据监听器方法参数确定事件类型</li><li>解析时机：在 SmartInitializingSingleton（所有单例初始化完成后），解析每个单例 bean</li></ul></li></ol><h3 id="_49-事件发布器" tabindex="-1">49) 事件发布器 <a class="header-anchor" href="#_49-事件发布器" aria-label="Permalink to &quot;49) 事件发布器&quot;">​</a></h3><h4 id="演示-事件发布器" tabindex="-1">演示 - 事件发布器 <a class="header-anchor" href="#演示-事件发布器" aria-label="Permalink to &quot;演示 - 事件发布器&quot;">​</a></h4><h5 id="代码参考-46" tabindex="-1">代码参考 <a class="header-anchor" href="#代码参考-46" aria-label="Permalink to &quot;代码参考&quot;">​</a></h5><p><strong>com.itheima.a49</strong> 包</p><h4 id="收获💡-61" tabindex="-1">收获💡 <a class="header-anchor" href="#收获💡-61" aria-label="Permalink to &quot;收获💡&quot;">​</a></h4><p>事件发布器模拟实现</p><ol><li>addApplicationListenerBean 负责收集容器中的监听器 <ul><li>监听器会统一转换为 GenericApplicationListener 对象，以支持判断事件类型</li></ul></li><li>multicastEvent 遍历监听器集合，发布事件 <ul><li>发布前先通过 GenericApplicationListener.supportsEventType 判断支持该事件类型才发事件</li><li>可以利用线程池进行异步发事件优化</li></ul></li><li>如果发送的事件对象不是 ApplicationEvent 类型，Spring 会把它包装为 PayloadApplicationEvent 并用泛型技术解析事件对象的原始类型 <ul><li>视频中未讲解</li></ul></li></ol>`,158);function V(L,O,N,W,J,U){const l=k("Mermaid");return n(),o("div",null,[y,(n(),e(t,null,{default:i(()=>[h(l,{id:"mermaid-387",class:"mermaid",graph:"graph%20LR%0A%0A%E5%88%9B%E5%BB%BA%20--%3E%20%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5%0A%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5%20--%3E%20%E5%88%9D%E5%A7%8B%E5%8C%96%0A%E5%88%9D%E5%A7%8B%E5%8C%96%20--%3E%20%E5%8F%AF%E7%94%A8%0A%E5%8F%AF%E7%94%A8%20--%3E%20%E9%94%80%E6%AF%81%0A"})]),fallback:i(()=>[a(" Loading... ")]),_:1})),u,(n(),e(t,null,{default:i(()=>[h(l,{id:"mermaid-846",class:"mermaid",graph:"sequenceDiagram%20%0Aparticipant%20ac%20as%20ApplicationContext%0Aparticipant%20bfpp%20as%20BeanFactoryPostProcessor%0Aparticipant%20bpp%20as%20BeanPostProcessor%0Aparticipant%20config%20as%20Java%E9%85%8D%E7%BD%AE%E7%B1%BB%0Aac%20-%3E%3E%20bfpp%20%3A%201.%20%E6%89%A7%E8%A1%8C%20BeanFactoryPostProcessor%0Aac%20-%3E%3E%20bpp%20%3A%202.%20%E6%B3%A8%E5%86%8C%20BeanPostProcessor%0Aac%20-%3E%3E%20%2Bconfig%20%3A%203.%20%E5%88%9B%E5%BB%BA%E5%92%8C%E5%88%9D%E5%A7%8B%E5%8C%96%0Abpp%20-%3E%3E%20config%20%3A%203.1%20%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5%E6%89%A9%E5%B1%95(%E5%A6%82%20%40Value%20%E5%92%8C%20%40Autowired)%0Abpp%20-%3E%3E%20config%20%3A%203.2%20%E5%88%9D%E5%A7%8B%E5%8C%96%E6%89%A9%E5%B1%95(%E5%A6%82%20%40PostConstruct)%0Aac%20-%3E%3E%20config%20%3A%203.3%20%E6%89%A7%E8%A1%8C%20Aware%20%E5%8F%8A%20InitializingBean%0Aconfig%20--%3E%3E%20-ac%20%3A%203.4%20%E5%88%9B%E5%BB%BA%E6%88%90%E5%8A%9F%0A"})]),fallback:i(()=>[a(" Loading... ")]),_:1})),A,(n(),e(t,null,{default:i(()=>[h(l,{id:"mermaid-850",class:"mermaid",graph:"sequenceDiagram%20%0Aparticipant%20ac%20as%20ApplicationContext%0Aparticipant%20bfpp%20as%20BeanFactoryPostProcessor%0Aparticipant%20bpp%20as%20BeanPostProcessor%0Aparticipant%20config%20as%20Java%E9%85%8D%E7%BD%AE%E7%B1%BB%0Aac%20-%3E%3E%20%2Bconfig%20%3A%203.%20%E5%88%9B%E5%BB%BA%E5%92%8C%E5%88%9D%E5%A7%8B%E5%8C%96%0Aac%20-%3E%3E%20config%20%3A%203.1%20%E6%89%A7%E8%A1%8C%20Aware%20%E5%8F%8A%20InitializingBean%0Aconfig%20--%3E%3E%20-ac%20%3A%203.2%20%E5%88%9B%E5%BB%BA%E6%88%90%E5%8A%9F%0A%0Aac%20-%3E%3E%20bfpp%20%3A%201.%20%E6%89%A7%E8%A1%8C%20BeanFactoryPostProcessor%0Aac%20-%3E%3E%20bpp%20%3A%202.%20%E6%B3%A8%E5%86%8C%20BeanPostProcessor%0A"})]),fallback:i(()=>[a(" Loading... ")]),_:1})),F,(n(),e(t,null,{default:i(()=>[h(l,{id:"mermaid-1072",class:"mermaid",graph:"graph%20LR%0A%0Ae1(e%20%E5%88%9B%E5%BB%BA)%0Ae2(e%20set%20%E6%B3%A8%E5%85%A5%20f)%0A%0Af1(f%20%E5%88%9B%E5%BB%BA)%0A%0Ae1--%3Ef1--%3Ee2%0A%0A"})]),fallback:i(()=>[a(" Loading... ")]),_:1})),b,m,(n(),e(t,null,{default:i(()=>[h(l,{id:"mermaid-1088",class:"mermaid",graph:"graph%20LR%0A%0Ae1(e%20%E5%88%9B%E5%BB%BA)%0Ae2(e%20set%20%E6%B3%A8%E5%85%A5%20f%E4%BB%A3%E7%90%86)%0A%0Af1(f%20%E5%88%9B%E5%BB%BA)%0Af2(f%20%E5%88%9B%E5%BB%BA)%0Af3(f%20%E5%88%9B%E5%BB%BA)%0A%0Ae1--%3Ee2%0Ae2--%E4%BD%BF%E7%94%A8f%E6%96%B9%E6%B3%95--%3Ef1%0Ae2--%E4%BD%BF%E7%94%A8f%E6%96%B9%E6%B3%95--%3Ef2%0Ae2--%E4%BD%BF%E7%94%A8f%E6%96%B9%E6%B3%95--%3Ef3%0A%0A"})]),fallback:i(()=>[a(" Loading... ")]),_:1})),B,(n(),e(t,null,{default:i(()=>[h(l,{id:"mermaid-1584",class:"mermaid",graph:"classDiagram%0A%0Aclass%20Advice%0Aclass%20MethodInterceptor%0Aclass%20Advisor%0Aclass%20PointcutAdvisor%0A%0APointcut%20%3C%7C--%20AspectJExpressionPointcut%0AAdvice%20%3C%7C--%20MethodInterceptor%0AAdvisor%20%3C%7C--%20PointcutAdvisor%0APointcutAdvisor%20o--%20%22%E4%B8%80%22%20Pointcut%0APointcutAdvisor%20o--%20%22%E4%B8%80%22%20Advice%0A%0A%3C%3Cinterface%3E%3E%20Advice%0A%3C%3Cinterface%3E%3E%20MethodInterceptor%0A%3C%3Cinterface%3E%3E%20Pointcut%0A%3C%3Cinterface%3E%3E%20Advisor%0A%3C%3Cinterface%3E%3E%20PointcutAdvisor%0A"})]),fallback:i(()=>[a(" Loading... ")]),_:1})),C,q,(n(),e(t,null,{default:i(()=>[h(l,{id:"mermaid-1610",class:"mermaid",graph:"classDiagram%0A%0AAdvised%20%3C%7C--%20ProxyFactory%0AProxyFactory%20o--%20Target%0AProxyFactory%20o--%20%22%E5%A4%9A%22%20Advisor%0A%0AProxyFactory%20--%3E%20AopProxyFactory%20%3A%20%E4%BD%BF%E7%94%A8%0AAopProxyFactory%20--%3E%20AopProxy%0AAdvised%20%3C%7C--%20%E5%9F%BA%E4%BA%8ECGLIB%E7%9A%84Proxy%0A%E5%9F%BA%E4%BA%8ECGLIB%E7%9A%84Proxy%20%3C--%20ObjenesisCglibAopProxy%20%3A%20%E5%88%9B%E5%BB%BA%0AAopProxy%20%3C%7C--%20ObjenesisCglibAopProxy%0AAopProxy%20%3C%7C--%20JdkDynamicAopProxy%0A%E5%9F%BA%E4%BA%8EJDK%E7%9A%84Proxy%20%3C--%20JdkDynamicAopProxy%20%3A%20%E5%88%9B%E5%BB%BA%0AAdvised%20%3C%7C--%20%E5%9F%BA%E4%BA%8EJDK%E7%9A%84Proxy%0A%0Aclass%20AopProxy%20%7B%0A%20%20%20%2BgetProxy()%20Object%0A%7D%0A%0Aclass%20ProxyFactory%20%7B%0A%09proxyTargetClass%20%3A%20boolean%0A%7D%0A%0Aclass%20ObjenesisCglibAopProxy%20%7B%0A%09advised%20%3A%20ProxyFactory%0A%7D%0A%0Aclass%20JdkDynamicAopProxy%20%7B%0A%09advised%20%3A%20ProxyFactory%0A%7D%0A%0A%3C%3Cinterface%3E%3E%20Advised%0A%3C%3Cinterface%3E%3E%20AopProxyFactory%0A%3C%3Cinterface%3E%3E%20AopProxy%0A"})]),fallback:i(()=>[a(" Loading... ")]),_:1})),v,(n(),e(t,null,{default:i(()=>[h(l,{id:"mermaid-1916",class:"mermaid",graph:"sequenceDiagram%0Aparticipant%20Proxy%0Aparticipant%20ih%20as%20InvocationHandler%0Aparticipant%20mi%20as%20MethodInvocation%0Aparticipant%20Factory%20as%20ProxyFactory%0Aparticipant%20mi1%20as%20MethodInterceptor1%0Aparticipant%20mi2%20as%20MethodInterceptor2%0Aparticipant%20Target%0A%0AProxy%20-%3E%3E%20%2Bih%20%3A%20invoke()%0Aih%20-%3E%3E%20%2BFactory%20%3A%20%E8%8E%B7%E5%BE%97%20Target%0AFactory%20--%3E%3E%20-ih%20%3A%20%0Aih%20-%3E%3E%20%2BFactory%20%3A%20%E8%8E%B7%E5%BE%97%20MethodInterceptor%20%E9%93%BE%0AFactory%20--%3E%3E%20-ih%20%3A%20%0Aih%20-%3E%3E%20%2Bmi%20%3A%20%E5%88%9B%E5%BB%BA%20mi%0Ami%20--%3E%3E%20-ih%20%3A%20%0Arect%20rgb(200%2C%20223%2C%20255)%0Aih%20-%3E%3E%20%2Bmi%20%3A%20mi.proceed()%0Ami%20-%3E%3E%20%2Bmi1%20%3A%20invoke(mi)%0Ami1%20-%3E%3E%20mi1%20%3A%20%E5%89%8D%E5%A2%9E%E5%BC%BA%0Arect%20rgb(200%2C%20190%2C%20255)%0Ami1%20-%3E%3E%20mi%20%3A%20mi.proceed()%0Ami%20-%3E%3E%20%2Bmi2%20%3A%20invoke(mi)%0Ami2%20-%3E%3E%20mi2%20%3A%20%E5%89%8D%E5%A2%9E%E5%BC%BA%0Arect%20rgb(150%2C%20190%2C%20155)%0Ami2%20-%3E%3E%20mi%20%3A%20mi.proceed()%0Ami%20-%3E%3E%20%2BTarget%20%3A%20mi.invokeJoinPoint()%0ATarget%20-%3E%3E%20Target%20%3A%20%0ATarget%20--%3E%3E%20-mi2%20%3A%20%E7%BB%93%E6%9E%9C%0Aend%0Ami2%20-%3E%3E%20mi2%20%3A%20%E5%90%8E%E5%A2%9E%E5%BC%BA%0Ami2%20--%3E%3E%20-mi1%20%3A%20%E7%BB%93%E6%9E%9C%0Aend%0Ami1%20-%3E%3E%20mi1%20%3A%20%E5%90%8E%E5%A2%9E%E5%BC%BA%0Ami1%20--%3E%3E%20-mi%20%3A%20%E7%BB%93%E6%9E%9C%0Ami%20--%3E%3E%20-ih%20%3A%20%0Aend%0Aih%20--%3E%3E%20-Proxy%20%3A%20%0A"})]),fallback:i(()=>[a(" Loading... ")]),_:1})),D,(n(),e(t,null,{default:i(()=>[h(l,{id:"mermaid-2328",class:"mermaid",graph:"classDiagram%0A%0AFormatter%20--%7C%3E%20Printer%0AFormatter%20--%7C%3E%20Parser%0A%0Aclass%20Converters%20%7B%0A%20%20%20Set~GenericConverter~%0A%7D%0Aclass%20Converter%0A%0Aclass%20ConversionService%0Aclass%20FormattingConversionService%0A%0AConversionService%20%3C%7C--%20FormattingConversionService%0AFormattingConversionService%20o--%20Converters%0A%0APrinter%20--%3E%20Adapter1%0AAdapter1%20--%3E%20Converters%0AParser%20--%3E%20Adapter2%0AAdapter2%20--%3E%20Converters%0AConverter%20--%3E%20Adapter3%0AAdapter3%20--%3E%20Converters%0A%0A%3C%3Cinterface%3E%3E%20Formatter%0A%3C%3Cinterface%3E%3E%20Printer%0A%3C%3Cinterface%3E%3E%20Parser%0A%3C%3Cinterface%3E%3E%20Converter%0A%3C%3Cinterface%3E%3E%20ConversionService%0A"})]),fallback:i(()=>[a(" Loading... ")]),_:1})),f,P,(n(),e(t,null,{default:i(()=>[h(l,{id:"mermaid-2364",class:"mermaid",graph:"classDiagram%0A%0APropertyEditorRegistry%20o--%20%22%E5%A4%9A%22%20PropertyEditor%0A%0A%3C%3Cinterface%3E%3E%20PropertyEditorRegistry%0A%3C%3Cinterface%3E%3E%20PropertyEditor%0A"})]),fallback:i(()=>[a(" Loading... ")]),_:1})),x,S,(n(),e(t,null,{default:i(()=>[h(l,{id:"mermaid-2385",class:"mermaid",graph:"classDiagram%0ATypeConverter%20%3C%7C--%20SimpleTypeConverter%0ATypeConverter%20%3C%7C--%20BeanWrapperImpl%0ATypeConverter%20%3C%7C--%20DirectFieldAccessor%0ATypeConverter%20%3C%7C--%20ServletRequestDataBinder%0A%0ASimpleTypeConverter%20--%3E%20TypeConverterDelegate%0ABeanWrapperImpl%20--%3E%20TypeConverterDelegate%0ADirectFieldAccessor%20--%3E%20TypeConverterDelegate%0AServletRequestDataBinder%20--%3E%20TypeConverterDelegate%0A%0ATypeConverterDelegate%20--%3E%20ConversionService%0ATypeConverterDelegate%20--%3E%20PropertyEditorRegistry%0A%0A%3C%3Cinterface%3E%3E%20TypeConverter%0A%3C%3Cinterface%3E%3E%20ConversionService%0A%3C%3Cinterface%3E%3E%20PropertyEditorRegistry%0A"})]),fallback:i(()=>[a(" Loading... ")]),_:1})),_,(n(),e(t,null,{default:i(()=>[h(l,{id:"mermaid-2573",class:"mermaid",graph:"sequenceDiagram%0Aparticipant%20adapter%20as%20HandlerAdapter%0Aparticipant%20bf%20as%20WebDataBinderFactory%0Aparticipant%20mf%20as%20ModelFactory%0Aparticipant%20ihm%20as%20ServletInvocableHandlerMethod%0Aparticipant%20ar%20as%20ArgumentResolvers%20%0Aparticipant%20rh%20as%20ReturnValueHandlers%0Aparticipant%20container%20as%20ModelAndViewContainer%0Arect%20rgb(200%2C%20150%2C%20255)%0Aadapter%20-%3E%3E%20%2Bbf%3A%20%E5%87%86%E5%A4%87%20%40InitBinder%0Abf%20--%3E%3E%20-adapter%3A%20%0Aend%0Aadapter%20-%3E%3E%20%2Bmf%3A%20%E5%87%86%E5%A4%87%20%40ModelAttribute%0Amf%20-%3E%3E%20%2Bcontainer%3A%20%E6%B7%BB%E5%8A%A0Model%E6%95%B0%E6%8D%AE%0Acontainer%20--%3E%3E%20-mf%3A%20%0Amf%20--%3E%3E%20-adapter%3A%20%0A%0Aadapter%20-%3E%3E%20%2Bihm%3A%20invokeAndHandle%0Aihm%20-%3E%3E%20%2Bar%3A%20%E8%8E%B7%E5%8F%96%20args%0Aar%20-%3E%3E%20ar%3A%20%E6%9C%89%E7%9A%84%E8%A7%A3%E6%9E%90%E5%99%A8%E6%B6%89%E5%8F%8A%20RequestBodyAdvice%0Aar%20-%3E%3E%20container%3A%20%E6%9C%89%E7%9A%84%E8%A7%A3%E6%9E%90%E5%99%A8%E6%B6%89%E5%8F%8A%E6%95%B0%E6%8D%AE%E7%BB%91%E5%AE%9A%E7%94%9F%E6%88%90Model%E6%95%B0%E6%8D%AE%0Aar%20--%3E%3E%20-ihm%3A%20args%0Aihm%20-%3E%3E%20ihm%3A%20method.invoke(bean%2Cargs)%20%E5%BE%97%E5%88%B0%20returnValue%0Aihm%20-%3E%3E%20%2Brh%3A%20%E5%A4%84%E7%90%86%20returnValue%0Arh%20-%3E%3E%20rh%3A%20%E6%9C%89%E7%9A%84%E5%A4%84%E7%90%86%E5%99%A8%E6%B6%89%E5%8F%8A%20ResponseBodyAdvice%0Arh%20-%3E%3E%20%2Bcontainer%3A%20%E6%B7%BB%E5%8A%A0Model%E6%95%B0%E6%8D%AE%2C%E5%A4%84%E7%90%86%E8%A7%86%E5%9B%BE%E5%90%8D%2C%E6%98%AF%E5%90%A6%E6%B8%B2%E6%9F%93%E7%AD%89%0Acontainer%20--%3E%3E%20-rh%3A%20%0Arh%20--%3E%3E%20-ihm%3A%20%0Aihm%20--%3E%3E%20-adapter%3A%20%0Aadapter%20-%3E%3E%20%2Bcontainer%3A%20%E8%8E%B7%E5%8F%96%20ModelAndView%0Acontainer%20--%3E%3E%20-adapter%3A%20%0A"})]),fallback:i(()=>[a(" Loading... ")]),_:1})),M,(n(),e(t,null,{default:i(()=>[h(l,{id:"mermaid-2622",class:"mermaid",graph:"classDiagram%0Aclass%20ServletInvocableHandlerMethod%20%7B%0A%09%2BinvokeAndHandle(ServletWebRequest%2CModelAndViewContainer)%0A%7D%0AHandlerMethod%20%3C%7C--%20ServletInvocableHandlerMethod%0AHandlerMethod%20o--%20bean%0AHandlerMethod%20o--%20method%0AServletInvocableHandlerMethod%20o--%20WebDataBinderFactory%0AServletInvocableHandlerMethod%20o--%20ParameterNameDiscoverer%0AServletInvocableHandlerMethod%20o--%20HandlerMethodArgumentResolverComposite%0AServletInvocableHandlerMethod%20o--%20HandlerMethodReturnValueHandlerComposite%0A"})]),fallback:i(()=>[a(" Loading... ")]),_:1})),w,(n(),e(t,null,{default:i(()=>[h(l,{id:"mermaid-2666",class:"mermaid",graph:"sequenceDiagram%0Aparticipant%20adapter%20as%20RequestMappingHandlerAdapter%0Aparticipant%20bf%20as%20WebDataBinderFactory%0Aparticipant%20mf%20as%20ModelFactory%0Aparticipant%20container%20as%20ModelAndViewContainer%0Aadapter%20-%3E%3E%20%2Bbf%3A%20%E5%87%86%E5%A4%87%20%40InitBinder%0Abf%20--%3E%3E%20-adapter%3A%20%0Aadapter%20-%3E%3E%20%2Bmf%3A%20%E5%87%86%E5%A4%87%20%40ModelAttribute%0Amf%20-%3E%3E%20%2Bcontainer%3A%20%E6%B7%BB%E5%8A%A0Model%E6%95%B0%E6%8D%AE%0Acontainer%20--%3E%3E%20-mf%3A%20%0Amf%20--%3E%3E%20-adapter%3A%20%0A"})]),fallback:i(()=>[a(" Loading... ")]),_:1})),H,(n(),e(t,null,{default:i(()=>[h(l,{id:"mermaid-2670",class:"mermaid",graph:"sequenceDiagram%0Aparticipant%20adapter%20as%20RequestMappingHandlerAdapter%0Aparticipant%20ihm%20as%20ServletInvocableHandlerMethod%0Aparticipant%20ar%20as%20ArgumentResolvers%0Aparticipant%20rh%20as%20ReturnValueHandlers%0Aparticipant%20container%20as%20ModelAndViewContainer%0A%0Aadapter%20-%3E%3E%20%2Bihm%3A%20invokeAndHandle%0Aihm%20-%3E%3E%20%2Bar%3A%20%E8%8E%B7%E5%8F%96%20args%0Aar%20-%3E%3E%20ar%3A%20%E6%9C%89%E7%9A%84%E8%A7%A3%E6%9E%90%E5%99%A8%E6%B6%89%E5%8F%8A%20RequestBodyAdvice%0Aar%20-%3E%3E%20container%3A%20%E6%9C%89%E7%9A%84%E8%A7%A3%E6%9E%90%E5%99%A8%E6%B6%89%E5%8F%8A%E6%95%B0%E6%8D%AE%E7%BB%91%E5%AE%9A%E7%94%9F%E6%88%90%E6%A8%A1%E5%9E%8B%E6%95%B0%E6%8D%AE%0Acontainer%20--%3E%3E%20ar%3A%20%0Aar%20--%3E%3E%20-ihm%3A%20args%0Aihm%20-%3E%3E%20ihm%3A%20method.invoke(bean%2Cargs)%20%E5%BE%97%E5%88%B0%20returnValue%0Aihm%20-%3E%3E%20%2Brh%3A%20%E5%A4%84%E7%90%86%20returnValue%0Arh%20-%3E%3E%20rh%3A%20%E6%9C%89%E7%9A%84%E5%A4%84%E7%90%86%E5%99%A8%E6%B6%89%E5%8F%8A%20ResponseBodyAdvice%0Arh%20-%3E%3E%20%2Bcontainer%3A%20%E6%B7%BB%E5%8A%A0Model%E6%95%B0%E6%8D%AE%2C%E5%A4%84%E7%90%86%E8%A7%86%E5%9B%BE%E5%90%8D%2C%E6%98%AF%E5%90%A6%E6%B8%B2%E6%9F%93%E7%AD%89%0Acontainer%20--%3E%3E%20-rh%3A%20%0Arh%20--%3E%3E%20-ihm%3A%20%0Aihm%20--%3E%3E%20-adapter%3A%20%0Aadapter%20-%3E%3E%20%2Bcontainer%3A%20%E8%8E%B7%E5%8F%96%20ModelAndView%0Acontainer%20--%3E%3E%20-adapter%3A%20%0A"})]),fallback:i(()=>[a(" Loading... ")]),_:1})),R,(n(),e(t,null,{default:i(()=>[h(l,{id:"mermaid-2686",class:"mermaid",graph:"sequenceDiagram%0Aparticipant%20adapter%20as%20HandlerAdapter%0Aparticipant%20bf%20as%20WebDataBinderFactory%0Aparticipant%20mf%20as%20ModelFactory%0Aparticipant%20ihm%20as%20ServletInvocableHandlerMethod%0Aparticipant%20ar%20as%20ArgumentResolvers%20%0Aparticipant%20rh%20as%20ReturnValueHandlers%0Aparticipant%20container%20as%20ModelAndViewContainer%0A%0Aadapter%20-%3E%3E%20%2Bbf%3A%20%E5%87%86%E5%A4%87%20%40InitBinder%0Abf%20--%3E%3E%20-adapter%3A%20%0Arect%20rgb(200%2C%20150%2C%20255)%0Aadapter%20-%3E%3E%20%2Bmf%3A%20%E5%87%86%E5%A4%87%20%40ModelAttribute%0Amf%20-%3E%3E%20%2Bcontainer%3A%20%E6%B7%BB%E5%8A%A0Model%E6%95%B0%E6%8D%AE%0Acontainer%20--%3E%3E%20-mf%3A%20%0Amf%20--%3E%3E%20-adapter%3A%20%0Aend%0Aadapter%20-%3E%3E%20%2Bihm%3A%20invokeAndHandle%0Aihm%20-%3E%3E%20%2Bar%3A%20%E8%8E%B7%E5%8F%96%20args%0Aar%20-%3E%3E%20ar%3A%20%E6%9C%89%E7%9A%84%E8%A7%A3%E6%9E%90%E5%99%A8%E6%B6%89%E5%8F%8A%20RequestBodyAdvice%0Aar%20-%3E%3E%20container%3A%20%E6%9C%89%E7%9A%84%E8%A7%A3%E6%9E%90%E5%99%A8%E6%B6%89%E5%8F%8A%E6%95%B0%E6%8D%AE%E7%BB%91%E5%AE%9A%E7%94%9F%E6%88%90Model%E6%95%B0%E6%8D%AE%0Aar%20--%3E%3E%20-ihm%3A%20args%0Aihm%20-%3E%3E%20ihm%3A%20method.invoke(bean%2Cargs)%20%E5%BE%97%E5%88%B0%20returnValue%0Aihm%20-%3E%3E%20%2Brh%3A%20%E5%A4%84%E7%90%86%20returnValue%0Arh%20-%3E%3E%20rh%3A%20%E6%9C%89%E7%9A%84%E5%A4%84%E7%90%86%E5%99%A8%E6%B6%89%E5%8F%8A%20ResponseBodyAdvice%0Arh%20-%3E%3E%20%2Bcontainer%3A%20%E6%B7%BB%E5%8A%A0Model%E6%95%B0%E6%8D%AE%2C%E5%A4%84%E7%90%86%E8%A7%86%E5%9B%BE%E5%90%8D%2C%E6%98%AF%E5%90%A6%E6%B8%B2%E6%9F%93%E7%AD%89%0Acontainer%20--%3E%3E%20-rh%3A%20%0Arh%20--%3E%3E%20-ihm%3A%20%0Aihm%20--%3E%3E%20-adapter%3A%20%0Aadapter%20-%3E%3E%20%2Bcontainer%3A%20%E8%8E%B7%E5%8F%96%20ModelAndView%0Acontainer%20--%3E%3E%20-adapter%3A%20%0A"})]),fallback:i(()=>[a(" Loading... ")]),_:1})),T,(n(),e(t,null,{default:i(()=>[h(l,{id:"mermaid-2882",class:"mermaid",graph:"sequenceDiagram%0Aparticipant%20adapter%20as%20HandlerAdapter%0Aparticipant%20bf%20as%20WebDataBinderFactory%0Aparticipant%20mf%20as%20ModelFactory%0Aparticipant%20ihm%20as%20ServletInvocableHandlerMethod%0Aparticipant%20ar%20as%20ArgumentResolvers%20%0Aparticipant%20rh%20as%20ReturnValueHandlers%0Aparticipant%20container%20as%20ModelAndViewContainer%0A%0Aadapter%20-%3E%3E%20%2Bbf%3A%20%E5%87%86%E5%A4%87%20%40InitBinder%0Abf%20--%3E%3E%20-adapter%3A%20%0Aadapter%20-%3E%3E%20%2Bmf%3A%20%E5%87%86%E5%A4%87%20%40ModelAttribute%0Amf%20-%3E%3E%20%2Bcontainer%3A%20%E6%B7%BB%E5%8A%A0Model%E6%95%B0%E6%8D%AE%0Acontainer%20--%3E%3E%20-mf%3A%20%0Amf%20--%3E%3E%20-adapter%3A%20%0Aadapter%20-%3E%3E%20%2Bihm%3A%20invokeAndHandle%0Aihm%20-%3E%3E%20%2Bar%3A%20%E8%8E%B7%E5%8F%96%20args%0Aar%20-%3E%3E%20ar%3A%20%E6%9C%89%E7%9A%84%E8%A7%A3%E6%9E%90%E5%99%A8%E6%B6%89%E5%8F%8A%20RequestBodyAdvice%0Aar%20-%3E%3E%20container%3A%20%E6%9C%89%E7%9A%84%E8%A7%A3%E6%9E%90%E5%99%A8%E6%B6%89%E5%8F%8A%E6%95%B0%E6%8D%AE%E7%BB%91%E5%AE%9A%E7%94%9F%E6%88%90Model%E6%95%B0%E6%8D%AE%0Aar%20--%3E%3E%20-ihm%3A%20args%0Aihm%20-%3E%3E%20ihm%3A%20method.invoke(bean%2Cargs)%20%E5%BE%97%E5%88%B0%20returnValue%0Aihm%20-%3E%3E%20%2Brh%3A%20%E5%A4%84%E7%90%86%20returnValue%0Arect%20rgb(200%2C%20150%2C%20255)%0Arh%20-%3E%3E%20rh%3A%20%E6%9C%89%E7%9A%84%E5%A4%84%E7%90%86%E5%99%A8%E6%B6%89%E5%8F%8A%20ResponseBodyAdvice%0Aend%0Arh%20-%3E%3E%20%2Bcontainer%3A%20%E6%B7%BB%E5%8A%A0Model%E6%95%B0%E6%8D%AE%2C%E5%A4%84%E7%90%86%E8%A7%86%E5%9B%BE%E5%90%8D%2C%E6%98%AF%E5%90%A6%E6%B8%B2%E6%9F%93%E7%AD%89%0Acontainer%20--%3E%3E%20-rh%3A%20%0Arh%20--%3E%3E%20-ihm%3A%20%0Aihm%20--%3E%3E%20-adapter%3A%20%0Aadapter%20-%3E%3E%20%2Bcontainer%3A%20%E8%8E%B7%E5%8F%96%20ModelAndView%0Acontainer%20--%3E%3E%20-adapter%3A%20%0A"})]),fallback:i(()=>[a(" Loading... ")]),_:1})),I,(n(),e(t,null,{default:i(()=>[h(l,{id:"mermaid-3341",class:"mermaid",graph:"sequenceDiagram%0Aparticipant%20ds%20as%20%E5%89%8D%E7%AB%AF%E6%8E%A7%E5%88%B6%E5%99%A8%0Aparticipant%20hm%20as%20%E5%A4%84%E7%90%86%E6%98%A0%E5%B0%84%E5%99%A8%0Aparticipant%20hd%20as%20%E5%A4%84%E7%90%86%E9%80%82%E9%85%8D%E5%99%A8%0Aparticipant%20h%20as%20%E5%A4%84%E7%90%86%E5%99%A8%0Aparticipant%20vr%20as%20%E8%A7%86%E5%9B%BE%E8%A7%A3%E6%9E%90%E5%99%A8%20%0Aparticipant%20v%20as%20%E8%A7%86%E5%9B%BE%0A%0Ads%20-%3E%3E%20%2Bhm%3A%20%20%E8%AF%B7%E6%B1%82HandlerMapper%E8%8E%B7%E5%8F%96Handler%0Ahm%20-%3E%3E%20hm%3A%20%20%20%E6%A0%B9%E6%8D%AE%E9%85%8D%E7%BD%AE%E6%88%96%E6%B3%A8%E8%A7%A3%E6%89%BE%E5%88%B0%E6%9C%80%E7%BB%88%E8%A6%81%E6%89%A7%E8%A1%8C%E7%9A%84Handler%0Ahm%20--%3E%3E%20-ds%3A%20%E8%BF%94%E5%9B%9EHandler%0Ads%20-%3E%3E%20%2Bhd%3A%20%20%E8%AF%B7%E6%B1%82HandlerAdapter%E6%89%A7%E8%A1%8CHandler%0Ahd%20-%3E%3E%20%2Bh%3A%20%20%20%E6%89%A7%E8%A1%8CHandler%0Ah%20-%3E%3E%20h%3A%09%20%20%20%E6%A0%B9%E6%8D%AEHandler%E8%A7%84%E5%88%99%E6%89%A7%E8%A1%8C%E4%B8%8D%E5%90%8C%E7%B1%BB%E5%9E%8B%E7%9A%84Handler%09%20%0Ah%20--%3E%3E%20-hd%3A%20%20Handler%E6%89%A7%E8%A1%8C%E5%AE%8C%E6%AF%95%E8%BF%94%E5%9B%9E%E4%B8%80%E4%B8%AAModelAndView%0Ahd%20--%3E%3E%20-ds%3A%20%E8%BF%94%E5%9B%9EModelAndView%0Ads%20-%3E%3E%20%2Bvr%3A%20%20%E8%AF%B7%E6%B1%82%E8%BF%9B%E8%A1%8C%E8%A7%86%E5%9B%BE%E8%A7%A3%E6%9E%90%0Avr%20-%3E%3E%20vr%3A%20%20%20%E5%B0%86%E9%80%BB%E8%BE%91%E8%A7%86%E5%9B%BE%E8%A7%A3%E6%9E%90%E6%88%90%E7%9C%9F%E6%AD%A3%E7%9A%84%E8%A7%86%E5%9B%BE%E5%9B%BD%E9%99%85%E5%8C%96%E5%A4%84%E7%90%86%0Avr%20--%3E%3E%20-ds%3A%20%E8%BF%94%E5%9B%9EView%20%0Ads%20-%3E%3E%20v%3A%20%20%20%20%E6%B8%B2%E6%9F%93%E8%A7%86%E5%9B%BE%E5%B0%86model%E6%95%B0%E6%8D%AE%E8%BD%AC%E6%8D%A2%E4%B8%BAresponse%E5%93%8D%E5%BA%94%0A"})]),fallback:i(()=>[a(" Loading... ")]),_:1})),j])}const G=r(g,[["render",V]]);export{$ as __pageData,G as default};
