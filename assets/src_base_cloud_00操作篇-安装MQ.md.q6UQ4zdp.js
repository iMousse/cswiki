import{_ as h,E as t,c as k,J as r,w as o,m as n,a as d,V as c,o as l,b as g,e as F}from"./chunks/framework.syB9hai_.js";const y="/cswiki/assets/image-20240227044057474.cJbnlC2Z.png",m="/cswiki/assets/image-20240227023511146.cr1sVqdB.png",u="/cswiki/assets/image-20240227023526408.hwIhfgn1.png",E="/cswiki/assets/image-20240227023544837.y2lp7Rym.png",b="/cswiki/assets/image-20240227023601039.0ueH_DL3.png",C="/cswiki/assets/image-20240227023623071.qhR13FHX.png",q="/cswiki/assets/image-20240227023641995.LlMauU2_.png",B="/cswiki/assets/image-20240227023654553.bsnoHZuc.png",v="/cswiki/assets/image-20210713104511055.O_hc3gcR.png",_="/cswiki/assets/image-20210717212345165.DJiR2Yzj.png",f="/cswiki/assets/image-20210717222833196.QaBsogTc.png",A="/cswiki/assets/image-20210717223057902.EjEqLsuc.png",x="/cswiki/assets/image-20210717223421750.YIqXtp10.png",D="/cswiki/assets/image-20210717223320238.FRfFJGM4.png",w="/cswiki/assets/image-20210717223603628.SRU_oZt8.png",M="/cswiki/assets/image-20210717223800203.RVUch4m4.png",P="/cswiki/assets/image-20210717231751411.oDzJdv2L.png",R="/cswiki/assets/image-20210717231829505.Jk1bP4W1.png",Q="/cswiki/assets/image-20210717231958996.IBIqGiXt.png",z="/cswiki/assets/image-20210717232108584.ZUnPgK_M.png",T="/cswiki/assets/image-20210717232257420._vNadzpF.png",S="/cswiki/assets/image-20210717232322646.bCJLg2Hk.png",I="/cswiki/assets/image-20210717234329640.1ioXKszT.png",U="/cswiki/assets/image-20210717234426209.UCxzKASI.png",L="/cswiki/assets/image-20210718001909492.-U8WjyAb.png",V="/cswiki/assets/image-20210718002118357.bV-b1EUd.png",$="/cswiki/assets/image-20210718002253226.6rvg0z15.png",Z="/cswiki/assets/image-20210718002342603.zyK3pm0B.png",N="/cswiki/assets/image-20210718002422365.Hz6QO3-X.png",is=JSON.parse('{"title":"RabbitMQ部署指南","description":"","frontmatter":{},"headers":[],"relativePath":"src/base/cloud/00操作篇-安装MQ.md","filePath":"src/base/cloud/00操作篇-安装MQ.md","lastUpdated":1730648753000}'),O={name:"src/base/cloud/00操作篇-安装MQ.md"},G=n("h1",{id:"rabbitmq部署指南",tabindex:"-1"},[d("RabbitMQ部署指南 "),n("a",{class:"header-anchor",href:"#rabbitmq部署指南","aria-label":'Permalink to "RabbitMQ部署指南"'},"​")],-1),W=c('<nav class="table-of-contents"><ul><li><a href="#rabbitmq部署指南">RabbitMQ部署指南</a><ul><li><a href="#单机部署">单机部署</a><ul><li><a href="#下载镜像">下载镜像</a></li><li><a href="#安装mq">安装MQ</a></li><li><a href="#添加用户">添加用户</a></li><li><a href="#配置虚拟主机">配置虚拟主机</a></li></ul></li><li><a href="#安装插件">安装插件</a><ul><li><a href="#下载插件">下载插件</a></li><li><a href="#上传插件">上传插件</a></li><li><a href="#安装插件-1">安装插件</a></li></ul></li><li><a href="#集群部署">集群部署</a><ul><li><a href="#集群分类">集群分类</a></li><li><a href="#获取cookie">获取cookie</a></li><li><a href="#准备集群配置">准备集群配置</a></li><li><a href="#启动集群">启动集群</a></li><li><a href="#测试">测试</a><ul><li><a href="#数据共享测试">数据共享测试</a></li><li><a href="#可用性测试">可用性测试</a></li></ul></li></ul></li><li><a href="#镜像模式">镜像模式</a><ul><li><a href="#镜像模式的特征">镜像模式的特征</a></li><li><a href="#镜像模式的配置">镜像模式的配置</a><ul><li><a href="#exactly模式">exactly模式</a></li><li><a href="#all模式">all模式</a></li><li><a href="#nodes模式">nodes模式</a></li></ul></li><li><a href="#测试-1">测试</a><ul><li><a href="#测试数据共享">测试数据共享</a></li><li><a href="#测试高可用">测试高可用</a></li></ul></li></ul></li><li><a href="#仲裁队列">仲裁队列</a><ul><li><a href="#添加仲裁队列">添加仲裁队列</a></li><li><a href="#测试-2">测试</a></li><li><a href="#集群扩容">集群扩容</a><ul><li><a href="#加入集群">加入集群</a></li><li><a href="#增加仲裁队列副本">增加仲裁队列副本</a></li></ul></li></ul></li></ul></li></ul></nav><h2 id="单机部署" tabindex="-1">单机部署 <a class="header-anchor" href="#单机部署" aria-label="Permalink to &quot;单机部署&quot;">​</a></h2><p>我们在 <code>Centos7</code> 虚拟机中使用 <code>Docker</code> 来安装。</p><p><a href="https://hub.docker.com/_/rabbitmq" target="_blank" rel="noreferrer">Rabbitmq Tags | Docker Hub</a></p><p>查看支持的版本号</p><p><img src="'+y+`" alt="image-20240227044057474" loading="lazy"></p><br><h3 id="下载镜像" tabindex="-1">下载镜像 <a class="header-anchor" href="#下载镜像" aria-label="Permalink to &quot;下载镜像&quot;">​</a></h3><p>方式一：在线拉取</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pull rabbitmq:3.8-management</span></span></code></pre></div><br><p>方式二：从本地加载</p><p>上传到虚拟机中后，使用命令加载镜像即可：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> load -i mq.tar</span></span></code></pre></div><br><p>删除错误的镜像</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[root@centos7 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">~</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]# docker stop mq</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mq</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[root@centos7 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">~</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]# docker rm mq</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mq</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[root@centos7 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">~</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]# docker images </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">REPOSITORY</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">       TAG              IMAGE ID       CREATED         SIZE</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mysql</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">            latest           e68e2614955c   </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> weeks ago     </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">638</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">MB</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">amd64/rabbitmq</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">   3.8</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">-management   </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">818</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">bf18535d7   </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">20</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> months ago   </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">253</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">MB</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kibana</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">           7.13</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.1           bae9450c8714   </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> years ago     </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.27</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">GB</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">elasticsearch</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    7.13</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.1           e02c1a04d454   </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> years ago     </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">898</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">MB</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">logstash</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">         7.13</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.1           f865dc0edb36   </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> years ago     </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.11</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">GB</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[root@centos7 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">~</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]# docker rmi 818bf18535d7</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Untagged:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> amd64/rabbitmq:3.8-management</span></span></code></pre></div><br><h3 id="安装mq" tabindex="-1">安装MQ <a class="header-anchor" href="#安装mq" aria-label="Permalink to &quot;安装MQ&quot;">​</a></h3><p>执行下面的命令来运行MQ容器：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[root@centos7 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">~</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]# docker run -d \\</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> --name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mq </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --restart=always</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --hostname</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mq1 </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -e</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> RABBITMQ_DEFAULT_USER=cloud </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -e</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> RABBITMQ_DEFAULT_PASS=abc123 </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 15672</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">:15672 </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5672</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">:5672 </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rabbitmq:3.8-management</span></span></code></pre></div><br><p>将镜像中的数据复制出来</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[root@centos7 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">~</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]# docker cp mq:/opt/rabbitmq/plugins /usr/local/src/mq/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Successfully</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> copied </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">16.1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">MB to /usr/local/src/mq/</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[root@centos7 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">~</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]# docker cp mq:/var/lib/rabbitmq  /usr/local/src/mq/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Successfully</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> copied </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">357</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">MB to /usr/local/src/mq/</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[root@centos7 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">~</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]# mv /usr/local/src/mq/rabbitmq/ /usr/local/src/mq/data</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[root@centos7 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">~</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]# docker cp mq:/etc/rabbitmq/ /usr/local/src/mq/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Successfully</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> copied </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4.1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">kB to /usr/local/src/mq/</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[root@centos7 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">~</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]# mv /usr/local/src/mq/rabbitmq/ /usr/local/src/mq/conf/</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[root@centos7 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">~</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]# chmod -R 777 /usr/local/src/mq/</span></span></code></pre></div><br><p>重新启动</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[root@centos7 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">~</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]# docker stop mq</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mq</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[root@centos7 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">~</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]# docker rm mq</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mq</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[root@centos7 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">~</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]# docker run -d \\</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> --name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mq </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --restart=always</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --hostname</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mq1 </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -e</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> RABBITMQ_DEFAULT_USER=cloud </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -e</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> RABBITMQ_DEFAULT_PASS=abc123 </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -v</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;/usr/local/src/mq/plugins:/plugins&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -v</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;/usr/local/src/mq/data:/var/lib/rabbitmq&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -v</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;/usr/local/src/mq/conf:/etc/rabbitmq&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 15672</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">:15672 </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5672</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">:5672 </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rabbitmq:3.8-management</span></span></code></pre></div><br><h3 id="添加用户" tabindex="-1">添加用户 <a class="header-anchor" href="#添加用户" aria-label="Permalink to &quot;添加用户&quot;">​</a></h3><p>添加用户</p><p><img src="`+m+'" alt="image-20240227023511146" loading="lazy"></p><p>添加成功</p><p><img src="'+u+'" alt="image-20240227023526408" loading="lazy"></p><h3 id="配置虚拟主机" tabindex="-1">配置虚拟主机 <a class="header-anchor" href="#配置虚拟主机" aria-label="Permalink to &quot;配置虚拟主机&quot;">​</a></h3><p>添加虚拟机</p><p><img src="'+E+'" alt="image-20240227023544837" loading="lazy"></p><p>添加成功</p><p><img src="'+b+'" alt="image-20240227023601039" loading="lazy"></p><p>进入用户设置权限</p><p><img src="'+C+'" alt="image-20240227023623071" loading="lazy"></p><p>设置权限</p><p><img src="'+q+'" alt="image-20240227023641995" loading="lazy"></p><p>设置成功，实现多租户，对消息和队列进行隔离</p><p><img src="'+B+'" alt="image-20240227023654553" loading="lazy"></p><h2 id="安装插件" tabindex="-1">安装插件 <a class="header-anchor" href="#安装插件" aria-label="Permalink to &quot;安装插件&quot;">​</a></h2><p>官方的安装指南地址为：<a href="https://blog.rabbitmq.com/posts/2015/04/scheduling-messages-with-rabbitmq" target="_blank" rel="noreferrer">https://blog.rabbitmq.com/posts/2015/04/scheduling-messages-with-rabbitmq</a></p><p>上述文档是基于Linux原生安装RabbitMQ，然后安装插件。</p><br><p>因为我们之前是基于Docker安装RabbitMQ，所以下面我们会讲解基于Docker来安装RabbitMQ插件。</p><br><h3 id="下载插件" tabindex="-1">下载插件 <a class="header-anchor" href="#下载插件" aria-label="Permalink to &quot;下载插件&quot;">​</a></h3><p>RabbitMQ有一个官方的插件社区地址为：<a href="https://www.rabbitmq.com/community-plugins.html" target="_blank" rel="noreferrer">https://www.rabbitmq.com/community-plugins.html</a></p><p>其中包含各种各样的插件，包括我们要使用的DelayExchange插件：</p><p><img src="'+v+`" alt="image-20210713104511055" loading="lazy"></p><br><p>大家可以去对应的GitHub页面下载3.8.9版本的插件，地址为：<a href="https://github.com/rabbitmq/rabbitmq-delayed-message-exchange/releases/tag/3.8.9" target="_blank" rel="noreferrer">https://github.com/rabbitmq/rabbitmq-delayed-message-exchange/releases/tag/3.8.9</a></p><p>这个对应RabbitMQ的3.8.5以上版本，下载 <code>rabbitmq_delayed_message_exchange-3.8.9-0199d11c.ez</code></p><br><h3 id="上传插件" tabindex="-1">上传插件 <a class="header-anchor" href="#上传插件" aria-label="Permalink to &quot;上传插件&quot;">​</a></h3><p><strong>数据卷</strong></p><p>因为我们是基于Docker安装，所以需要先查看RabbitMQ的插件目录对应的数据卷。如果不是基于Docker的同学，请参考第一章部分，重新创建Docker容器。</p><p>我们之前设定的RabbitMQ的数据卷名称为<code>mq-plugins</code>，所以我们使用下面命令查看数据卷：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[root@centos7 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">~</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]# docker volume inspect mq-plugins</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;CreatedAt&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;2024-02-27T04:43:00+08:00&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;Driver&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;local&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;Labels&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: null,</span></span>
<span class="line highlighted"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;Mountpoint&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/var/lib/docker/volumes/mq-plugins/_data&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;Name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;mq-plugins&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;Options&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: null,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;Scope&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;local&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span></code></pre></div><p>可以得到下面结果，将插件 <code>rabbitmq_delayed_message_exchange-3.8.9-0199d11c.ez</code> 上传到这个目录即可：</p><br><p><strong>目录挂载</strong></p><p>我们直接将插件 <code>rabbitmq_delayed_message_exchange-3.8.9-0199d11c.ez</code> 上传到 <code>/usr/local/src/mq/plugins</code></p><br><h3 id="安装插件-1" tabindex="-1">安装插件 <a class="header-anchor" href="#安装插件-1" aria-label="Permalink to &quot;安装插件&quot;">​</a></h3><p>最后就是安装了，需要进入MQ容器内部来执行安装。我的容器名为<code>mq</code>，所以执行下面命令：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> exec -it mq /bin/bash</span></span></code></pre></div><p>执行时，请将其中的 <code>-it</code> 后面的 <code>mq</code> 替换为你自己的容器名.</p><p>进入容器内部后，执行下面命令开启插件：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">root@mq1:/#</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rabbitmq-plugins enable rabbitmq_delayed_message_exchange</span></span></code></pre></div><p>结果如下：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Enabling</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> plugins on node rabbit@mq1:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">rabbitmq_delayed_message_exchange</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">The</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> following plugins have been configured:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  rabbitmq_delayed_message_exchange</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  rabbitmq_management</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  rabbitmq_management_agent</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  rabbitmq_prometheus</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  rabbitmq_web_dispatch</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Applying</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> plugin configuration to rabbit@mq1...</span></span>
<span class="line highlighted"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">The</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> following plugins have been enabled:</span></span>
<span class="line highlighted"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  rabbitmq_delayed_message_exchange</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">started</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> plugins.</span></span></code></pre></div><br><h2 id="集群部署" tabindex="-1">集群部署 <a class="header-anchor" href="#集群部署" aria-label="Permalink to &quot;集群部署&quot;">​</a></h2><p>接下来，我们看看如何安装RabbitMQ的集群。</p><h3 id="集群分类" tabindex="-1">集群分类 <a class="header-anchor" href="#集群分类" aria-label="Permalink to &quot;集群分类&quot;">​</a></h3><p>在RabbitMQ的官方文档中，讲述了两种集群的配置方式：</p><ul><li>普通模式：普通模式集群不进行数据同步，每个MQ都有自己的队列、数据信息（其它元数据信息如交换机等会同步）。例如我们有2个MQ：mq1，和mq2，如果你的消息在mq1，而你连接到了mq2，那么mq2会去mq1拉取消息，然后返回给你。如果mq1宕机，消息就会丢失。</li><li>镜像模式：与普通模式不同，队列会在各个mq的镜像节点之间同步，因此你连接到任何一个镜像节点，均可获取到消息。而且如果一个节点宕机，并不会导致数据丢失。不过，这种方式增加了数据同步的带宽消耗。</li></ul><p>我们先来看普通模式集群，我们的计划部署3节点的mq集群：</p><table><thead><tr><th>主机名</th><th>控制台端口</th><th>amqp通信端口</th></tr></thead><tbody><tr><td>mq1</td><td>8081 ---&gt; 15672</td><td>8071 ---&gt; 5672</td></tr><tr><td>mq2</td><td>8082 ---&gt; 15672</td><td>8072 ---&gt; 5672</td></tr><tr><td>mq3</td><td>8083 ---&gt; 15672</td><td>8073 ---&gt; 5672</td></tr></tbody></table><p>集群中的节点标示默认都是：<code>rabbit@[hostname]</code>，因此以上三个节点的名称分别为：</p><ul><li>rabbit@mq1</li><li>rabbit@mq2</li><li>rabbit@mq3</li></ul><h3 id="获取cookie" tabindex="-1">获取cookie <a class="header-anchor" href="#获取cookie" aria-label="Permalink to &quot;获取cookie&quot;">​</a></h3><p>RabbitMQ底层依赖于Erlang，而Erlang虚拟机就是一个面向分布式的语言，默认就支持集群模式。集群模式中的每个RabbitMQ 节点使用 cookie 来确定它们是否被允许相互通信。</p><p>要使两个节点能够通信，它们必须具有相同的共享秘密，称为<strong>Erlang cookie</strong>。cookie 只是一串最多 255 个字符的字母数字字符。</p><p>每个集群节点必须具有<strong>相同的 cookie</strong>。实例之间也需要它来相互通信。</p><p>我们先在之前启动的mq容器中获取一个cookie值，作为集群的cookie。执行下面的命令：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> exec -it mq cat /var/lib/rabbitmq/.erlang.cookie</span></span></code></pre></div><p>可以看到cookie值如下：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">FXZMCVGLBIXZCDEMMVZQ</span></span></code></pre></div><p>接下来，停止并删除当前的mq容器，我们重新搭建集群。</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rm -f mq</span></span></code></pre></div><p><img src="`+_+`" alt="image-20210717212345165" loading="lazy"></p><h3 id="准备集群配置" tabindex="-1">准备集群配置 <a class="header-anchor" href="#准备集群配置" aria-label="Permalink to &quot;准备集群配置&quot;">​</a></h3><p>在/tmp目录新建一个配置文件 rabbitmq.conf：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /tmp</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 创建文件</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">touch</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rabbitmq.conf</span></span></code></pre></div><p>文件内容如下：</p><div class="language-nginx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">nginx</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">loopback_users.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">guest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> = false</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">listeners.tcp.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> = 5672</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">cluster_formation.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">peer_discovery_backend</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> = rabbit_peer_discovery_classic_config</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">cluster_formation.classic_config.nodes.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> = rabbit@mq1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">cluster_formation.classic_config.nodes.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> = rabbit@mq2</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">cluster_formation.classic_config.nodes.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> = rabbit@mq3</span></span></code></pre></div><p>再创建一个文件，记录cookie</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /tmp</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 创建cookie文件</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">touch</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .erlang.cookie</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 写入cookie</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;FXZMCVGLBIXZCDEMMVZQ&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .erlang.cookie</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 修改cookie文件的权限</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">chmod</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 600</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .erlang.cookie</span></span></code></pre></div><p>准备三个目录,mq1、mq2、mq3：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /tmp</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 创建目录</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mkdir</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mq1 mq2 mq3</span></span></code></pre></div><p>然后拷贝rabbitmq.conf、cookie文件到mq1、mq2、mq3：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 进入/tmp</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /tmp</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 拷贝</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cp</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rabbitmq.conf mq1</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cp</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rabbitmq.conf mq2</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cp</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rabbitmq.conf mq3</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cp</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .erlang.cookie mq1</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cp</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .erlang.cookie mq2</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cp</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .erlang.cookie mq3</span></span></code></pre></div><h3 id="启动集群" tabindex="-1">启动集群 <a class="header-anchor" href="#启动集群" aria-label="Permalink to &quot;启动集群&quot;">​</a></h3><p>创建一个网络：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> network create mq-net</span></span></code></pre></div><p>docker volume create</p><p>运行命令</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run -d --net mq-net </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-v \${PWD}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/mq1/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-v \${PWD}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/.erlang.cookie:/var/lib/rabbitmq/.erlang.cookie </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-e </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">RABBITMQ_DEFAULT_USER=itcast </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-e </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">RABBITMQ_DEFAULT_PASS=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">123321</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">--name </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">mq1 </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">--hostname </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">mq1 </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-p </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8071</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">:5672 </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-p </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8081</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">:15672 </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">rabbitmq:3.8-management</span></span></code></pre></div><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run -d --net mq-net </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-v \${PWD}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/mq2/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-v \${PWD}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/.erlang.cookie:/var/lib/rabbitmq/.erlang.cookie </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-e </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">RABBITMQ_DEFAULT_USER=itcast </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-e </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">RABBITMQ_DEFAULT_PASS=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">123321</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">--name </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">mq2 </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">--hostname </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">mq2 </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-p </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8072</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">:5672 </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-p </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8082</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">:15672 </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">rabbitmq:3.8-management</span></span></code></pre></div><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run -d --net mq-net </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-v \${PWD}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/mq3/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-v \${PWD}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/.erlang.cookie:/var/lib/rabbitmq/.erlang.cookie </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-e </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">RABBITMQ_DEFAULT_USER=itcast </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-e </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">RABBITMQ_DEFAULT_PASS=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">123321</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">--name </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">mq3 </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">--hostname </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">mq3 </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-p </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8073</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">:5672 </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-p </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8083</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">:15672 </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">rabbitmq:3.8-management</span></span></code></pre></div><h3 id="测试" tabindex="-1">测试 <a class="header-anchor" href="#测试" aria-label="Permalink to &quot;测试&quot;">​</a></h3><p>在mq1这个节点上添加一个队列：</p><p><img src="`+f+'" alt="image-20210717222833196" loading="lazy"></p><p>如图，在mq2和mq3两个控制台也都能看到：</p><p><img src="'+A+'" alt="image-20210717223057902" loading="lazy"></p><h4 id="数据共享测试" tabindex="-1">数据共享测试 <a class="header-anchor" href="#数据共享测试" aria-label="Permalink to &quot;数据共享测试&quot;">​</a></h4><p>点击这个队列，进入管理页面：</p><p><img src="'+x+'" alt="image-20210717223421750" loading="lazy"></p><p>然后利用控制台发送一条消息到这个队列：</p><p><img src="'+D+'" alt="image-20210717223320238" loading="lazy"></p><p>结果在mq2、mq3上都能看到这条消息：</p><p><img src="'+w+'" alt="image-20210717223603628" loading="lazy"></p><h4 id="可用性测试" tabindex="-1">可用性测试 <a class="header-anchor" href="#可用性测试" aria-label="Permalink to &quot;可用性测试&quot;">​</a></h4><p>我们让其中一台节点mq1宕机：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> stop mq1</span></span></code></pre></div><p>然后登录mq2或mq3的控制台，发现simple.queue也不可用了：</p><p><img src="'+M+'" alt="image-20210717223800203" loading="lazy"></p><p>说明数据并没有拷贝到mq2和mq3。</p><h2 id="镜像模式" tabindex="-1">镜像模式 <a class="header-anchor" href="#镜像模式" aria-label="Permalink to &quot;镜像模式&quot;">​</a></h2><p>在刚刚的案例中，一旦创建队列的主机宕机，队列就会不可用。不具备高可用能力。如果要解决这个问题，必须使用官方提供的镜像集群方案。</p><p>官方文档地址：<a href="https://www.rabbitmq.com/ha.html" target="_blank" rel="noreferrer">https://www.rabbitmq.com/ha.html</a></p><h3 id="镜像模式的特征" tabindex="-1">镜像模式的特征 <a class="header-anchor" href="#镜像模式的特征" aria-label="Permalink to &quot;镜像模式的特征&quot;">​</a></h3><p>默认情况下，队列只保存在创建该队列的节点上。而镜像模式下，创建队列的节点被称为该队列的<strong>主节点</strong>，队列还会拷贝到集群中的其它节点，也叫做该队列的<strong>镜像</strong>节点。</p><p>但是，不同队列可以在集群中的任意节点上创建，因此不同队列的主节点可以不同。甚至，<strong>一个队列的主节点可能是另一个队列的镜像节点</strong>。</p><p>用户发送给队列的一切请求，例如发送消息、消息回执默认都会在主节点完成，如果是从节点接收到请求，也会路由到主节点去完成。<strong>镜像节点仅仅起到备份数据作用</strong>。</p><p>当主节点接收到消费者的ACK时，所有镜像都会删除节点中的数据。</p><p>总结如下：</p><ul><li>镜像队列结构是一主多从（从就是镜像）</li><li>所有操作都是主节点完成，然后同步给镜像节点</li><li>主宕机后，镜像节点会替代成新的主（如果在主从同步完成前，主就已经宕机，可能出现数据丢失）</li><li>不具备负载均衡功能，因为所有操作都会有主节点完成（但是不同队列，其主节点可以不同，可以利用这个提高吞吐量）</li></ul><h3 id="镜像模式的配置" tabindex="-1">镜像模式的配置 <a class="header-anchor" href="#镜像模式的配置" aria-label="Permalink to &quot;镜像模式的配置&quot;">​</a></h3><p>镜像模式的配置有3种模式：</p><table><thead><tr><th style="text-align:left;">ha-mode</th><th style="text-align:left;">ha-params</th><th style="text-align:left;">效果</th></tr></thead><tbody><tr><td style="text-align:left;">准确模式exactly</td><td style="text-align:left;">队列的副本量count</td><td style="text-align:left;">集群中队列副本（主服务器和镜像服务器之和）的数量。count如果为1意味着单个副本：即队列主节点。count值为2表示2个副本：1个队列主和1个队列镜像。换句话说：count = 镜像数量 + 1。如果群集中的节点数少于count，则该队列将镜像到所有节点。如果有集群总数大于count+1，并且包含镜像的节点出现故障，则将在另一个节点上创建一个新的镜像。</td></tr><tr><td style="text-align:left;">all</td><td style="text-align:left;">(none)</td><td style="text-align:left;">队列在群集中的所有节点之间进行镜像。队列将镜像到任何新加入的节点。镜像到所有节点将对所有群集节点施加额外的压力，包括网络I / O，磁盘I / O和磁盘空间使用情况。推荐使用exactly，设置副本数为（N / 2 +1）。</td></tr><tr><td style="text-align:left;">nodes</td><td style="text-align:left;"><em>node names</em></td><td style="text-align:left;">指定队列创建到哪些节点，如果指定的节点全部不存在，则会出现异常。如果指定的节点在集群中存在，但是暂时不可用，会创建节点到当前客户端连接到的节点。</td></tr></tbody></table><p>这里我们以rabbitmqctl命令作为案例来讲解配置语法。</p><p>语法示例：</p><h4 id="exactly模式" tabindex="-1">exactly模式 <a class="header-anchor" href="#exactly模式" aria-label="Permalink to &quot;exactly模式&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>rabbitmqctl set_policy ha-two &quot;^two\\.&quot; &#39;{&quot;ha-mode&quot;:&quot;exactly&quot;,&quot;ha-params&quot;:2,&quot;ha-sync-mode&quot;:&quot;automatic&quot;}&#39;</span></span></code></pre></div><ul><li><code>rabbitmqctl set_policy</code>：固定写法</li><li><code>ha-two</code>：策略名称，自定义</li><li><code>&quot;^two\\.&quot;</code>：匹配队列的正则表达式，符合命名规则的队列才生效，这里是任何以<code>two.</code>开头的队列名称</li><li><code>&#39;{&quot;ha-mode&quot;:&quot;exactly&quot;,&quot;ha-params&quot;:2,&quot;ha-sync-mode&quot;:&quot;automatic&quot;}&#39;</code>: 策略内容 <ul><li><code>&quot;ha-mode&quot;:&quot;exactly&quot;</code>：策略模式，此处是exactly模式，指定副本数量</li><li><code>&quot;ha-params&quot;:2</code>：策略参数，这里是2，就是副本数量为2，1主1镜像</li><li><code>&quot;ha-sync-mode&quot;:&quot;automatic&quot;</code>：同步策略，默认是manual，即新加入的镜像节点不会同步旧的消息。如果设置为automatic，则新加入的镜像节点会把主节点中所有消息都同步，会带来额外的网络开销</li></ul></li></ul><h4 id="all模式" tabindex="-1">all模式 <a class="header-anchor" href="#all模式" aria-label="Permalink to &quot;all模式&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>rabbitmqctl set_policy ha-all &quot;^all\\.&quot; &#39;{&quot;ha-mode&quot;:&quot;all&quot;}&#39;</span></span></code></pre></div><ul><li><code>ha-all</code>：策略名称，自定义</li><li><code>&quot;^all\\.&quot;</code>：匹配所有以<code>all.</code>开头的队列名</li><li><code>&#39;{&quot;ha-mode&quot;:&quot;all&quot;}&#39;</code>：策略内容 <ul><li><code>&quot;ha-mode&quot;:&quot;all&quot;</code>：策略模式，此处是all模式，即所有节点都会称为镜像节点</li></ul></li></ul><h4 id="nodes模式" tabindex="-1">nodes模式 <a class="header-anchor" href="#nodes模式" aria-label="Permalink to &quot;nodes模式&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>rabbitmqctl set_policy ha-nodes &quot;^nodes\\.&quot; &#39;{&quot;ha-mode&quot;:&quot;nodes&quot;,&quot;ha-params&quot;:[&quot;rabbit@nodeA&quot;, &quot;rabbit@nodeB&quot;]}&#39;</span></span></code></pre></div><ul><li><code>rabbitmqctl set_policy</code>：固定写法</li><li><code>ha-nodes</code>：策略名称，自定义</li><li><code>&quot;^nodes\\.&quot;</code>：匹配队列的正则表达式，符合命名规则的队列才生效，这里是任何以<code>nodes.</code>开头的队列名称</li><li><code>&#39;{&quot;ha-mode&quot;:&quot;nodes&quot;,&quot;ha-params&quot;:[&quot;rabbit@nodeA&quot;, &quot;rabbit@nodeB&quot;]}&#39;</code>: 策略内容 <ul><li><code>&quot;ha-mode&quot;:&quot;nodes&quot;</code>：策略模式，此处是nodes模式</li><li><code>&quot;ha-params&quot;:[&quot;rabbit@mq1&quot;, &quot;rabbit@mq2&quot;]</code>：策略参数，这里指定副本所在节点名称</li></ul></li></ul><h3 id="测试-1" tabindex="-1">测试 <a class="header-anchor" href="#测试-1" aria-label="Permalink to &quot;测试&quot;">​</a></h3><p>我们使用exactly模式的镜像，因为集群节点数量为3，因此镜像数量就设置为2.</p><p>运行下面的命令：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> exec -it mq1 rabbitmqctl set_policy ha-two &quot;^two\\.&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;{&quot;ha-mode&quot;:&quot;exactly&quot;,&quot;ha-params&quot;:2,&quot;ha-sync-mode&quot;:&quot;automatic&quot;}&#39;</span></span></code></pre></div><p>下面，我们创建一个新的队列：</p><p><img src="'+P+'" alt="image-20210717231751411" loading="lazy"></p><p>在任意一个mq控制台查看队列：</p><p><img src="'+R+'" alt="image-20210717231829505" loading="lazy"></p><h4 id="测试数据共享" tabindex="-1">测试数据共享 <a class="header-anchor" href="#测试数据共享" aria-label="Permalink to &quot;测试数据共享&quot;">​</a></h4><p>给two.queue发送一条消息：</p><p><img src="'+Q+'" alt="image-20210717231958996" loading="lazy"></p><p>然后在mq1、mq2、mq3的任意控制台查看消息：</p><p><img src="'+z+'" alt="image-20210717232108584" loading="lazy"></p><h4 id="测试高可用" tabindex="-1">测试高可用 <a class="header-anchor" href="#测试高可用" aria-label="Permalink to &quot;测试高可用&quot;">​</a></h4><p>现在，我们让two.queue的主节点mq1宕机：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> stop mq1</span></span></code></pre></div><p>查看集群状态：</p><p><img src="'+T+'" alt="image-20210717232257420" loading="lazy"></p><p>查看队列状态：</p><p><img src="'+S+'" alt="image-20210717232322646" loading="lazy"></p><p>发现依然是健康的！并且其主节点切换到了rabbit@mq2上</p><h2 id="仲裁队列" tabindex="-1">仲裁队列 <a class="header-anchor" href="#仲裁队列" aria-label="Permalink to &quot;仲裁队列&quot;">​</a></h2><p>从RabbitMQ 3.8版本开始，引入了新的仲裁队列，他具备与镜像队里类似的功能，但使用更加方便。</p><h3 id="添加仲裁队列" tabindex="-1">添加仲裁队列 <a class="header-anchor" href="#添加仲裁队列" aria-label="Permalink to &quot;添加仲裁队列&quot;">​</a></h3><p>在任意控制台添加一个队列，一定要选择队列类型为Quorum类型。</p><p><img src="'+I+'" alt="image-20210717234329640" loading="lazy"></p><p>在任意控制台查看队列：</p><p><img src="'+U+`" alt="image-20210717234426209" loading="lazy"></p><p>可以看到，仲裁队列的 + 2字样。代表这个队列有2个镜像节点。</p><p>因为仲裁队列默认的镜像数为5。如果你的集群有7个节点，那么镜像数肯定是5；而我们集群只有3个节点，因此镜像数量就是3.</p><h3 id="测试-2" tabindex="-1">测试 <a class="header-anchor" href="#测试-2" aria-label="Permalink to &quot;测试&quot;">​</a></h3><p>可以参考对镜像集群的测试，效果是一样的。</p><h3 id="集群扩容" tabindex="-1">集群扩容 <a class="header-anchor" href="#集群扩容" aria-label="Permalink to &quot;集群扩容&quot;">​</a></h3><h4 id="加入集群" tabindex="-1">加入集群 <a class="header-anchor" href="#加入集群" aria-label="Permalink to &quot;加入集群&quot;">​</a></h4><p>1）启动一个新的MQ容器：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run -d --net mq-net </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-v \${PWD}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/.erlang.cookie:/var/lib/rabbitmq/.erlang.cookie </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-e </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">RABBITMQ_DEFAULT_USER=itcast </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-e </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">RABBITMQ_DEFAULT_PASS=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">123321</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">--name </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">mq4 </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">--hostname </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">mq5 </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-p </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8074</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">:15672 </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-p </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8084</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">:15672 </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">rabbitmq:3.8-management</span></span></code></pre></div><p>2）进入容器控制台：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> exec -it mq4 bash</span></span></code></pre></div><p>3）停止mq进程</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">rabbitmqctl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> stop_app</span></span></code></pre></div><p>4）重置RabbitMQ中的数据：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">rabbitmqctl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> reset</span></span></code></pre></div><p>5）加入mq1：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">rabbitmqctl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> join_cluster rabbit@mq1</span></span></code></pre></div><p>6）再次启动mq进程</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">rabbitmqctl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> start_app</span></span></code></pre></div><p><img src="`+L+'" alt="image-20210718001909492" loading="lazy"></p><h4 id="增加仲裁队列副本" tabindex="-1">增加仲裁队列副本 <a class="header-anchor" href="#增加仲裁队列副本" aria-label="Permalink to &quot;增加仲裁队列副本&quot;">​</a></h4><p>我们先查看下quorum.queue这个队列目前的副本情况，进入mq1容器：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> exec -it mq1 bash</span></span></code></pre></div><p>执行命令：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">rabbitmq-queues</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> quorum_status &quot;quorum.queue&quot;</span></span></code></pre></div><p>结果：</p><p><img src="'+V+'" alt="image-20210718002118357" loading="lazy"></p><p>现在，我们让mq4也加入进来：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">rabbitmq-queues</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add_member &quot;quorum.queue&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;rabbit@mq4&quot;</span></span></code></pre></div><p>结果：</p><p><img src="'+$+'" alt="image-20210718002253226" loading="lazy"></p><p>再次查看：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">rabbitmq-queues</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> quorum_status &quot;quorum.queue&quot;</span></span></code></pre></div><p><img src="'+Z+'" alt="image-20210718002342603" loading="lazy"></p><p>查看控制台，发现quorum.queue的镜像数量也从原来的 +2 变成了 +3：</p><p><img src="'+N+'" alt="image-20210718002422365" loading="lazy"></p>',221);function X(s,J,H,K,j,Y){const e=t("ArticleMetadata"),p=t("ClientOnly");return l(),k("div",null,[G,r(p,null,{default:o(()=>{var i,a;return[(((i=s.$frontmatter)==null?void 0:i.aside)??!0)&&(((a=s.$frontmatter)==null?void 0:a.showArticleMetadata)??!0)?(l(),g(e,{key:0,article:s.$frontmatter},null,8,["article"])):F("",!0)]}),_:1}),W])}const as=h(O,[["render",X]]);export{is as __pageData,as as default};
