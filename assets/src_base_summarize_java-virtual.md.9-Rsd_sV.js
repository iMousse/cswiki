import{_ as k,E as n,c as e,J as r,w as g,m as l,a as o,V as d,o as p,b as c,e as E}from"./chunks/framework.syB9hai_.js";const f=JSON.parse('{"title":"JVM知识总结","description":"","frontmatter":{},"headers":[],"relativePath":"src/base/summarize/java-virtual.md","filePath":"src/base/summarize/java-virtual.md","lastUpdated":1734365562000}'),y={name:"src/base/summarize/java-virtual.md"},u=l("h1",{id:"jvm知识总结",tabindex:"-1"},[o("JVM知识总结 "),l("a",{class:"header-anchor",href:"#jvm知识总结","aria-label":'Permalink to "JVM知识总结"'},"​")],-1),m=d(`<p><a href="./">返回首页</a></p><p>JVM基础</p><ul><li>JVM由那些部分组成</li><li>详细说一下JVM运行时数据区</li><li>什么是程序计数器</li><li>你能给我详细介绍一下Java堆吗</li><li>什么是虚拟机栈</li><li>详细说一下堆栈的区别</li><li>能不能介绍一下运行时常亮池</li></ul><p>类加载器</p><ul><li>什么是类加载器，类加载器有哪些</li><li>什么是双亲委派机制，JVM为什么采取双亲委派机制</li><li>说一下类加载器的执行过程</li></ul><p>垃圾回收</p><ul><li>GC 是什么？为什么要 GC？对象什么时候可以被回收？</li><li>JVM 垃圾回收算法有哪些</li><li>说一下 JVM 由哪些垃圾回收器</li><li>细聊一下 G1 垃圾回收器</li><li>强引用、软引用、弱引用、虚引用的区别</li></ul><p>JVM实践</p><ul><li>JVM 调优的参数在哪里可以设置</li><li>JVM 调优的参数都有哪些</li><li>说一下 JVM 调优的工具</li><li>Java 内存泄漏的排查思路</li><li>CPU 飙升排查方案与思路</li></ul><p><a href="./../../base/jvm/">JVM入门到精通</a></p><h2 id="jvm基础" tabindex="-1">JVM基础 <a class="header-anchor" href="#jvm基础" aria-label="Permalink to &quot;JVM基础&quot;">​</a></h2><h3 id="jvm的组成" tabindex="-1">JVM的组成 <a class="header-anchor" href="#jvm的组成" aria-label="Permalink to &quot;JVM的组成&quot;">​</a></h3><p><strong>JVM是什么</strong>：Java Virtual Machine Java程序的运行环境，他的职责是运行 Java 字节码文件。</p><p>Java 源代码执行流程如下：</p><ul><li>使用 Java编译器（javac命令）将源代码编译成Java字节码文件。</li><li>使用 Java虚拟机加载并运行Java字节码文件，此时会启动一个新的进程。</li></ul><p><img src="https://mugrain.oss-cn-hangzhou.aliyuncs.com/cswiki/image-20240208141354541.png" alt="image-20240208141354541" loading="lazy"></p><p><strong>作用</strong></p><p>为了支持Java中Write Once，Run Anywhere；编写一次，到处运行的跨平台特性。</p><p><img src="https://mugrain.oss-cn-hangzhou.aliyuncs.com/cswiki/image-20240209100236505.png" alt="image-20240209100236505" loading="lazy"></p><p>对于C/C++这类语言来说，需要将源代码编译成对应平台（不同的操作系统+CPU架构)的机器码，才能让计算机运行。不满足一次编译，到处运行的跨平台特性。</p><p><img src="https://mugrain.oss-cn-hangzhou.aliyuncs.com/cswiki/image-20240209100307818.png" alt="image-20240209100307818" loading="lazy"></p><p>但是Java语言不同，Java语言将源代码编译成字节码文件之后，就可以交由不同平台下已经安装好的Java虚拟机。Java虚拟机会将字节码指令实时解释成机器码。这样就满足了一次编译（编译成字节码），到处运行的跨平台特性。</p><p><img src="https://mugrain.oss-cn-hangzhou.aliyuncs.com/cswiki/image-20240209100326137.png" alt="image-20240209100326137" loading="lazy"></p><br><p><strong>实现功能</strong></p><ul><li>解释和运行：对字节码文件中的指令，实时的解释成机器码，让计算机执行</li><li>内存管理：自动为对象、方法等分配内存，自动的垃圾回收机制，回收不再使用的对象。</li><li>即时编译：对热点代码进行优化，提升执行效率。</li></ul><br><p>JVM由哪些部分组成，运行流程是什么？</p><p><img src="https://mugrain.oss-cn-hangzhou.aliyuncs.com/cswiki/image-20230506094411247.png" alt="image-20230506094411247" loading="lazy"></p><br><p><strong>组成部分</strong></p><ul><li>ClassLoader（类加载器）</li><li>Runtime Data Area（运行时数据区，内存分区）</li><li>Execution Engine（执行引擎）</li><li>Native Method Library（本地库接口）</li></ul><br><p><strong>运行流程</strong></p><ul><li>通过编译器将源代码文件编译成字节码文件。</li><li>类加载器通过类加载子系统把字节码加载到内存中。</li><li>运行时数据区管理 JVM 使用到的内存，而字节码文件只是JVM的一套指令集规范，并不能直接交给底层系统去执行，而是由执行引擎运行。</li><li>执行引擎通过解释器将字节码翻译为底层系统指令，再交由CPU执行去执行，此时需要调用其他语言的本地库接口来实现整个程序的功能。即时编译器优化代码执行性能，垃圾回收器将不在使用的对象进行回收。</li></ul><br><div class="warning custom-block"><p class="custom-block-title">💡 思考：给我介绍一下 JVM？</p><ul><li>定义：JVM 本质是一个运行在计算机上的程序，主要功能是运行 Java 的字节码文件。</li><li>特性：可以实现 Java 代码一次编译，到处运行。对于 C/C++ 来说会将源代码编译成 CPU 能识别机器码来运算，不同系统会重新编译连接。而 Java 语言通过 Java 编译器将源文件编译成字节码文件之后，通过不同平台的 JVM 将字节码文件实时解释成机器码文件。</li><li>功能 <ul><li>解释和运行，通过执行引擎的解释器将字节码实时解释成CPU能够识别的机器码来运行。</li><li>内存管理，通过运行时数据区自动的为对象、方法分配内存空间，通过执行引擎的垃圾回收器自动实现垃圾回收</li><li>即时编译，通过执行引擎的编译器将热点代码进行优化，直接转变为机器码文件放在方法区中存储，提高执行效率。</li></ul></li></ul><br><p>💡 <strong>思考：为什么说 Java 是半编译半解释型语言？</strong></p><p>因为Java既能进行通过执行引擎的解释器将字节码文件实时编译成机器码文件，交由不同系统的CPU来执行，也可以通过执行引擎的编译器将热点代码进行优化，直接转变为机器码文件。</p><br><p>💡 <strong>思考：JVM由哪些部分组成，如何运行</strong>，</p><p>JVM主要由四大部分组成，类加载器，运行时数据区，执行引擎，本地库接口。</p><ul><li>Java 源文件是通过编译器将源代码文件编译成字节码文件。</li><li>类加载器通过类加载子系统把字节码加载到内存中。</li><li><strong>运行时数据区</strong>将加载到内存中的字节码自动分配内存。</li><li><strong>执行引擎</strong>则将字节码翻译为机器码，在交由CPU去执行。如果调用了C语言，此时就需要调用本地库接口来实现整个程序的功能。</li></ul><br><p>💡 <strong>思考：详细说一下JVM运行时数据区</strong></p><p><img src="https://mugrain.oss-cn-hangzhou.aliyuncs.com/cswiki/image-20240130210407535.png" alt="image-20240130210407535" loading="lazy"></p><p>运行时数据区可以分为线程共享区和线程私有区。</p><ul><li>线程共享区有堆和方法区。 <ul><li>堆主要是数据存储的地方，存储对象和数组，是垃圾回收器管理的主要部分。</li><li>方法区存放的是类的信息，常量、方法、字段、静态变量、即时编译器优化后的代码。</li></ul></li><li>线程私有区有虚拟机栈，本地方法栈，程序计数器。 <ul><li>虚拟机栈是数据运行的地方，栈里存储的是栈帧，栈帧里面存储的是局部变量表、操作数栈、动态链接、方法出口等信息。</li><li>本地方法栈的功能和栈的功能相同，区别是本地方法栈是 Java 调用非 Java 代码的接口。</li><li>程序计数器存放的是当前线程所执行字节码的行数。JVM 工作就是通过改变程序计数器的值来选取下一个需要执行的字节码指令。</li></ul></li></ul></div><br><h3 id="程序计数器" tabindex="-1">程序计数器 <a class="header-anchor" href="#程序计数器" aria-label="Permalink to &quot;程序计数器&quot;">​</a></h3><p>程序计数器：线程私有的，内部保存的字节码的行号。用于记录正在执行的字节码指令的地址。</p><blockquote><p>javap -verbose xx.class 打印堆栈大小，局部变量的数量和方法的参数。</p></blockquote><p><img src="https://mugrain.oss-cn-hangzhou.aliyuncs.com/cswiki/image-20230506094602329.png" alt="image-20230506094602329" loading="lazy"></p><br><p>​ Java虚拟机对于多线程是通过线程轮流切换并且分配线程执行时间。在任何的一个时间点上，一个处理器只会处理执行一个线程，如果当前被执行的这个线程它所分配的执行时间用完了【挂起】。处理器会切换到另外的一个线程上来进行执行。并且这个线程的执行时间用完了，接着处理器就会又来执行被挂起的这个线程。</p><p>​ 那么现在有一个问题就是，当前处理器如何能够知道，对于这个被挂起的线程，它上一次执行到了哪里？那么这时就需要从程序计数器中来回去到当前的这个线程他上一次执行的行号，然后接着继续向下执行。</p><p>​ 程序计数器是JVM规范中唯一一个没有规定出现OOM的区域，所以这个空间也不会进行GC。</p><br><div class="warning custom-block"><p class="custom-block-title">💡 思考：介绍一下程序计数器的作用？</p><p>Java虚拟机对于多线程是通过线程轮流切换并且分配线程执行时间。在任何的一个时间点上，一个处理器只会处理执行一个线程，如果当前被执行的这个线程它所分配的执行时间用完了【挂起】。处理器会切换到另外的一个线程上来进行执行。并且这个线程的执行时间用完了，接着处理器就会又来执行被挂起的这个线程。这时候程序计数器就起到了关键作用，程序计数器在来回切换的线程中记录他上一次执行的行号，然后接着继续向下执行。</p></div><br><h3 id="java堆" tabindex="-1">Java堆 <a class="header-anchor" href="#java堆" aria-label="Permalink to &quot;Java堆&quot;">​</a></h3><p>线程共享的区域：主要用来保存对象实例，数组等，当堆中没有内存空间可分配给实例，也无法再扩展时，则抛出OutOfMemoryError异常。</p><p><img src="https://mugrain.oss-cn-hangzhou.aliyuncs.com/cswiki/image-20230506094803545.png" alt="image-20230506094803545" loading="lazy"></p><ul><li>年轻代被划分为三部分，Eden区和两个大小严格相同的Survivor区，根据JVM的策略，在经过几次垃圾收集后，任然存活于Survivor的对象将被移动到老年代区间。</li><li>老年代主要保存生命周期长的对象，一般是一些老的对象</li><li>元空间保存的类信息、静态变量、常量、编译后的代码</li></ul><br><p>为了避免方法区出现OOM，所以在java8中将堆上的方法区【永久代】给移动到了本地内存上，重新开辟了一块空间，叫做<strong>元空间</strong>。那么现在就可以避免掉OOM的出现了。</p><p><img src="https://mugrain.oss-cn-hangzhou.aliyuncs.com/cswiki/image-20230506094938843.png" alt="image-20230506094938843" loading="lazy"></p><br><p><strong>元空间(MetaSpace)介绍</strong></p><p>​ 在 HotSpot JVM 中，永久代（ ≈ 方法区）中用于存放类和方法的元数据以及常量池，比如Class 和 Method。每当一个类初次被加载的时候，它的元数据都会放到永久代中。</p><p>​ 永久代是有大小限制的，因此如果加载的类太多，很有可能导致永久代内存溢出，即<code>OutOfMemoryError</code>，为此不得不对虚拟机做调优。</p><p>​ 那么，Java 8 中 PermGen 为什么被移出 HotSpot JVM 了？</p><p>官网给出了解释：<a href="http://openjdk.java.net/jeps/122" target="_blank" rel="noreferrer">http://openjdk.java.net/jeps/122</a></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>This is part of the JRockit and Hotspot convergence effort. JRockit customers do not need to configure the permanent generation (since JRockit does not have a permanent generation) and are accustomed to not configuring the permanent generation.</span></span>
<span class="line"><span></span></span>
<span class="line"><span>移除永久代是为融合HotSpot JVM与 JRockit VM而做出的努力，因为JRockit没有永久代，不需要配置永久代。</span></span></code></pre></div><p>1）由于 <code>PermGen</code> 内存经常会溢出，引发<code>OutOfMemoryError</code>，因此 JVM 的开发者希望这一块内存可以更灵活地被管理，不要再经常出现这样的 OOM。</p><p>2）移除 <code>PermGen</code> 可以促进 <code>HotSpot JVM</code> 与 <code>JRockit VM </code>的融合，因为 JRockit 没有永久代。</p><p>​ 准确来说，Perm 区中的字符串常量池被移到了堆内存中是在 Java7 之后，Java 8 时，PermGen 被元空间代替，其他内容比如<strong>类元信息、字段、静态属性、方法、常量</strong>等都移动到元空间区。比如 <code>java/lang/Object</code> 类元信息、静态属性 <code>System.out</code>、整型常量等。</p><p>​ 元空间的本质和永久代类似，都是对 JVM 规范中方法区的实现。不过元空间与永久代之间最大的区别在于：元空间并不在虚拟机中，而是使用本地内存。因此，默认情况下，元空间的大小仅受本地内存限制。</p><br><div class="warning custom-block"><p class="custom-block-title">💡 思考：你能给我详细的介绍Java堆吗?</p><p>Java堆是线程共享的区域，主要存储对象和数组，内存不足则会报 <code>OutOfMemoryError</code> 异常。</p><p>主要由年轻代和老年代构成。年轻代有伊甸园区，From区和To区，存放一些年轻的对象；老年代存放的是一些大对象或者年老的对象。</p><p><code>JDK7</code> 中原本有一个永久代，存放的是类元信息、字段、静态属性、方法、常量、即时编译器优化的代码。但是因为永久代大小有限制，当类信息太多则会造成内存溢出，所以在 <code>JDK8</code> 中将永久代移除，把数据存储到了本地内存的元空间中，将字符串常量放到了堆中。</p></div><br><h3 id="虚拟机栈" tabindex="-1">虚拟机栈 <a class="header-anchor" href="#虚拟机栈" aria-label="Permalink to &quot;虚拟机栈&quot;">​</a></h3><p>Java Virtual machine Stacks (java 虚拟机栈)</p><ul><li>每个线程运行时所需要的内存，称为虚拟机栈，先进后出</li><li>每个栈由多个栈帧（frame）组成，对应着每次方法调用时所占用的内存</li><li>每个线程只能有一个活动栈帧，对应着当前正在执行的那个方法</li></ul><img src="https://mugrain.oss-cn-hangzhou.aliyuncs.com/cswiki/image-20230506095140595.png" alt="image-20230506095140595" style="zoom:50%;"><ol><li><p>垃圾回收是否涉及栈内存？</p><p>垃圾回收主要指就是堆内存，不涉及栈内存。当栈帧弹栈以后，内存就会释放</p></li><li><p>栈内存分配越大越好吗？</p><p>未必，默认的栈内存通常为1024k</p><p>栈帧过大会导致线程数变少，例如，机器总内存为512m，目前能活动的线程数则为512个，如果把栈内存改为2048k，那么能活动的栈帧就会减半</p></li><li><p>方法内的局部变量是否线程安全？</p><ul><li>如果方法内局部变量没有逃离方法的作用范围，它是线程安全的</li><li>如果是局部变量引用了对象，并逃离方法的作用范围，需要考虑线程安全</li><li>比如以下代码：</li></ul><p><img src="https://mugrain.oss-cn-hangzhou.aliyuncs.com/cswiki/image-20230506095306061.png" alt="image-20230506095306061" loading="lazy"></p></li><li><p>栈内存溢出情况</p><ul><li><p>栈帧过多导致栈内存溢出，典型问题：递归调用</p><p><img src="https://mugrain.oss-cn-hangzhou.aliyuncs.com/cswiki/image-20230506095401637.png" alt="image-20230506095401637" loading="lazy"></p></li><li><p>栈帧过大导致栈内存溢出</p></li></ul></li><li><p>堆栈的区别是什么？</p><ul><li>栈内存一般会用来存储局部变量和方法调用，但堆内存是用来存储Java对象和数组的。堆回GC垃圾回收，栈调用完成后自动回收</li><li>栈内存是线程私有的，而堆内存是线程共有的。</li><li>两者异常错误不同，如果栈内存或堆内存不足都会抛出异常 <ul><li>栈空间不足：java.lang.StackOverFlowError</li><li>堆空间不足：java.lang.OutOfMemoryError</li></ul></li></ul></li></ol><br><div class="warning custom-block"><p class="custom-block-title">💡 思考：什么是虚拟机栈</p><ul><li>每个线程运行时所需要的内存，称为虚拟机栈，遵循后进先出原则。</li><li>每个栈由多个栈帧组成，对应着每次方法调用时所占用的内存。</li><li>并且每个线程的活动栈帧只有一个，对应着当前正在执行的方法。</li></ul><p>💡 <strong>思考：方法内的局部变量是否线程安全？</strong></p><ul><li>如果方法内局部变量没有逃离方法的作用范围，它是线程安全的</li><li>如果是局部变量引用了对象，并逃离方法的作用范围，需要考虑线程安全</li></ul><p>💡 <strong>思考：垃圾回收是否涉及栈内存？</strong></p><ul><li>垃圾回收主要指就是堆内存，不涉及栈内存。因为当栈调用完栈以后都会弹出，内存就会释放</li></ul><p>💡 <strong>思考：栈内存分配越大越好吗？</strong></p><ul><li>栈帧过大会导致线程数变少，例如，机器总内存为512m，目前能活动的线程数则为512个，如果把栈内存改为2048k，那么能活动的栈帧就会减半</li></ul><p>💡 <strong>思考：什么情况下会导致栈内存溢出？</strong></p><ul><li>有两种情况，一种是递归调用导致的栈帧过多，一种是栈帧过大导致的栈内存溢出。</li></ul><p>💡 <strong>思考：能说一下堆栈的区别是什么吗？</strong></p><ul><li>最本质的区别堆是存储单位，存储Java对象和数组；栈是运行单位，在运行时调用局部变量和方法变量。</li><li>内存时线程私有的，堆是线程共有的。</li><li>当两者内存不足都会抛出异常，但是异常不同。栈空间不足抛出 <code>StackOverFlowError</code>，堆空间不足抛出<code>OutOfMemoryError</code>。</li></ul></div><br><h3 id="方法区" tabindex="-1">方法区 <a class="header-anchor" href="#方法区" aria-label="Permalink to &quot;方法区&quot;">​</a></h3><p>概述</p><ul><li>方法区(Method Area)是各个线程共享的内存区域</li><li>主要存储类的信息、运行时常量池</li><li>虚拟机启动的时候创建，关闭虚拟机时释放</li><li>如果方法区域中的内存无法满足分配请求，则会抛出OutOfMemoryError: Metaspace</li></ul><p><img src="https://mugrain.oss-cn-hangzhou.aliyuncs.com/cswiki/image-20230506095504213.png" alt="image-20230506095504213" loading="lazy"></p><br><p><strong>常量池</strong></p><p>可以看作是一张表，虚拟机指令根据这张常量表找到要执行的类名、方法名、参数类型、字面量等信息</p><p>查看字节码结构（类的基本信息、常量池、方法定义）<code>javap -v xx.class</code></p><p>比如下面是一个Application类的main方法执行，源码如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Application</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;hello world&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>找到类对应的class文件存放目录，执行命令：<code>javap -v Application.class</code> 查看字节码结构</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">D</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">\\code\\jvm</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">demo\\target\\classes\\com\\heima\\jvm</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">javap </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">v Application.class</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Classfile </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">D</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">code</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">jvm</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">demo</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">target</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">classes</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">com</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">heima</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">jvm</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Application.class</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  Last modified </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2023</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">05</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">07</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; size </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">564</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> bytes    </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//最后修改的时间</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  MD5 checksum c1b64ed6491b9a16c2baab5061c64f88   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//签名</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  Compiled from </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Application.java&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   //从哪个源码编译</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> com</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.heima.jvm.Application   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//包名，类名</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  minor version: 0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  major version: 52     </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//jdk版本</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  flags: ACC_PUBLIC, ACC_SUPER  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//修饰符</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Constant pool:   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//常量池</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   #1 = Methodref          #6.#20         </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   #2 = Fieldref           #21.#22        </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// java/lang/System.out:Ljava/io/PrintStream;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   #3 = String             #23            </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// hello world</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   #4 = Methodref          #24.#25        </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// java/io/PrintStream.println:(Ljava/lang/String;)V</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   #5 = Class              #26            </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// com/heima/jvm/Application</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   #6 = Class              #27            </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// java/lang/Object</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   #7 = Utf8               &lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   #8 = Utf8               ()V</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   #9 = Utf8               Code</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  #10 = Utf8               LineNumberTable</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  #11 = Utf8               LocalVariableTable</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  #12 = Utf8               this</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  #13 = Utf8               Lcom/heima/jvm/Application;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  #14 = Utf8               main</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  #15 = Utf8               ([Ljava/lang/String;)V</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  #16 = Utf8               args</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  #17 = Utf8               [Ljava/lang/String;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  #18 = Utf8               SourceFile</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  #19 = Utf8               Application.java</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  #20 = NameAndType        #7:#8          </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &quot;&lt;init&gt;&quot;:()V</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  #21 = Class              #28            </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// java/lang/System</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  #22 = NameAndType        #29:#30        </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// out:Ljava/io/PrintStream;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  #23 = Utf8               hello world</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  #24 = Class              #31            </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// java/io/PrintStream</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  #25 = NameAndType        #32:#33        </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// println:(Ljava/lang/String;)V</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  #26 = Utf8               com/heima/jvm/Application</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  #27 = Utf8               java/lang/Object</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  #28 = Utf8               java/lang/System</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  #29 = Utf8               out</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  #30 = Utf8               Ljava/io/PrintStream;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  #31 = Utf8               java/io/PrintStream</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  #32 = Utf8               println</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  #33 = Utf8               (Ljava/lang/String;)V</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> com.heima.jvm.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Application</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//构造方法</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    descriptor: ()V</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    flags: ACC_PUBLIC</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Code:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      stack=1, locals=1, args_size=1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         0: aload_0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         1: invokespecial #1                  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         4: return</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      LineNumberTable:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        line 3: 0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      LocalVariableTable:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        Start  Length  Slot  Name   Signature</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            0       5     0  this   Lcom/heima/jvm/Application;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(java.lang.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[]);  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//main方法</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    descriptor: ([Ljava/lang/String;)V</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    flags</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ACC_PUBLIC, ACC_STATIC</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Code</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      stack</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, locals</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, args_size</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">         0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> getstatic     #</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                  // Field java/lang/System.out:Ljava/io/PrintStream;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">         3</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ldc           #</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                  // String hello world</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">         5</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> invokevirtual #</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                  // Method java/io/PrintStream.println:(Ljava/lang/String;)V</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">         8</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> return</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      LineNumberTable</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        line </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">7</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        line </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 8</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      LocalVariableTable</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        Start  Length  Slot  Name   Signature</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">       9</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">     0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  args   [Ljava</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">lang</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">String;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">SourceFile</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Application.java&quot;</span></span></code></pre></div><p>下图，左侧是main方法的指令信息，右侧constant pool 是常量池</p><p>main方法按照指令执行的时候，需要到常量池中查表翻译找到具体的类和方法地址去执行</p><p><img src="https://mugrain.oss-cn-hangzhou.aliyuncs.com/cswiki/image-20230506095634842.png" alt="image-20230506095634842" loading="lazy"></p><br><p><strong>运行时常量池</strong></p><p>常量池是 *.class 文件中的，当该类被加载，它的常量池信息就会放入运行时常量池，并把里面的符号地址变为真实地址</p><p><img src="https://mugrain.oss-cn-hangzhou.aliyuncs.com/cswiki/image-20230506100142724.png" alt="image-20230506100142724" loading="lazy"></p><br><div class="warning custom-block"><p class="custom-block-title">💡 思考：能不能介绍一下方法区</p><ul><li>方法区是各个线程共享的内存区域，存储于本地内存。</li><li>主要存储类元信息、静态属性、字段、方法、运行时常量、即时编译器优化的代码。虚拟机启动时创建，关闭虚拟机时释放。</li><li><code>JDK7</code> 有个永久代的概念，将大量动态生成类放在永久代，很容易导致 <code>OOM</code>，在 <code>JDK8 </code> 中就将方法区的实现放在了本地内存的元空间中，这样方法区就不受 JVM 控制，就不会进行GC，提升了性能。</li><li>如果方法区域无法存放，则会抛出 <code>OutOfMemory：Metaspace</code></li></ul><p>💡 <strong>思考：介绍一下运行时常量池</strong></p><p>常量池可以看作是一张表，虚拟机指令根据这张常量表找到要执行的类名、方法名、参数类型、字面量等信息。而运行时常量是类被加载以后，里面的符号引用变为真实地址。</p></div><br><h3 id="直接内存" tabindex="-1">直接内存 <a class="header-anchor" href="#直接内存" aria-label="Permalink to &quot;直接内存&quot;">​</a></h3><p>不受 JVM 内存回收管理，是虚拟机的系统内存，常见于 NIO 操作时，用于数据缓冲区，分配回收成本较高，但读写性能高，不受 JVM 内存回收管理。</p><p>举例：需求，在本地电脑中的一个较大的文件（超过100m）从一个磁盘挪到另外一个磁盘</p><p><img src="https://mugrain.oss-cn-hangzhou.aliyuncs.com/cswiki/image-20230506100501905.png" alt="image-20230506100501905" loading="lazy"></p><p>代码如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * 演示 ByteBuffer 作用</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Demo1_9</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> final</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> String FROM </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;E:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">编程资料</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">第三方教学视频</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">youtube</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Getting Started with Spring Boot-sbPSjI4tt10.mp4&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> final</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> String TO </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;E:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">a.mp4&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> final</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> _1Mb </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1024</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1024</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        io</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// io 用时：1535.586957 1766.963399 1359.240226</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        directBuffer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// directBuffer 用时：479.295165 702.291454 562.56592</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> directBuffer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        long</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> start </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> System.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nanoTime</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (FileChannel from </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> FileInputStream</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(FROM).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getChannel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">             FileChannel to </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> FileOutputStream</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(TO).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getChannel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        ) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            ByteBuffer bb </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ByteBuffer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">allocateDirect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(_1Mb);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> len </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> from.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">read</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(bb);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (len </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                    break</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                bb.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">flip</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                to.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">write</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(bb);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                bb.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">clear</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (IOException </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            e.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">printStackTrace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        long</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> end </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> System.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nanoTime</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;directBuffer 用时：&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (end </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> start) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1000_000.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        long</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> start </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> System.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nanoTime</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (FileInputStream from </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> FileInputStream</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(FROM);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">             FileOutputStream to </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> FileOutputStream</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(TO);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        ) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            byte</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] buf </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> byte</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[_1Mb];</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> len </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> from.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">read</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(buf);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (len </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                    break</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                to.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">write</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(buf, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, len);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (IOException </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            e.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">printStackTrace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        long</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> end </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> System.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nanoTime</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;io 用时：&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (end </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> start) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1000_000.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>可以发现，使用传统的IO的时间要比NIO操作的时间长了很多了，也就说NIO的读性能更好。</p><p>这个是跟我们的JVM的直接内存是有一定关系，如下图，是传统阻塞IO的数据传输流程</p><p><img src="https://mugrain.oss-cn-hangzhou.aliyuncs.com/cswiki/image-20230506100548455.png" alt="image-20230506100548455" loading="lazy"></p><br><p>下图是NIO传输数据的流程，在这个里面主要使用到了一个直接内存，不需要在堆中开辟空间进行数据的拷贝，jvm可以直接操作直接内存，从而使数据读写传输更快。</p><p><img src="https://mugrain.oss-cn-hangzhou.aliyuncs.com/cswiki/image-20230506100621146.png" alt="image-20230506100621146" loading="lazy"></p><br><div class="warning custom-block"><p class="custom-block-title">💡 思考：你听过直接内存吗？</p><ul><li>直接内存不是虚拟机运行时数据区的一部分，直接内存是在 Java 堆外地、直接向系统申请的内存区域。</li><li>直接内存使用 NIO，通过存在堆中的 DirectByteBuffer 操作 Native 内存，所以读写性能高。</li><li>直接内存不受 JVM 管理，但是系统内存是有限的，物理内存不足时会报 OOM。</li></ul></div><h2 id="类加载器" tabindex="-1">类加载器 <a class="header-anchor" href="#类加载器" aria-label="Permalink to &quot;类加载器&quot;">​</a></h2><p>JVM只会运行二进制文件，而类加载器（ClassLoader）的主要作用就是将<strong>字节码文件加载到JVM中</strong>，从而让Java程序能够启动起来。现有的类加载器基本上都是java.lang.ClassLoader的子类，该类的只要职责就是用于将指定的类找到或生成对应的字节码文件，同时类加载器还会负责加载程序所需要的资源</p><br><h3 id="类加载器种类" tabindex="-1">类加载器种类 <a class="header-anchor" href="#类加载器种类" aria-label="Permalink to &quot;类加载器种类&quot;">​</a></h3><p>类加载器根据各自加载范围的不同，划分为四种类加载器：</p><ul><li><p><strong>启动类加载器(BootStrap ClassLoader)：</strong></p><p>该类并不继承ClassLoader类，其是由C++编写实现。用于加载<strong>JAVA_HOME/jre/lib</strong>目录下的类库。</p></li><li><p><strong>扩展类加载器(ExtClassLoader)：</strong></p><p>该类是ClassLoader的子类，主要加载<strong>JAVA_HOME/jre/lib/ext</strong>目录中的类库。</p></li><li><p><strong>应用类加载器(AppClassLoader)：</strong></p><p>该类是ClassLoader的子类，主要用于加载<strong>classPath</strong>下的类，也就是加载开发者自己编写的Java类。</p></li><li><p><strong>自定义类加载器：</strong></p><p>开发者自定义类继承ClassLoader，实现自定义类加载规则。</p></li></ul><p>上述三种类加载器的层次结构如下如下：</p><p><img src="https://mugrain.oss-cn-hangzhou.aliyuncs.com/cswiki/image-20230506100746624.png" alt="image-20230506100746624" loading="lazy"></p><p>类加载器的体系并不是“继承”体系，而是<strong>委派体系</strong>，类加载器首先会到自己的parent中查找类或者资源，如果找不到才会到自己本地查找。类加载器的委托行为动机是为了避免相同的类被加载多次。</p><br><div class="warning custom-block"><p class="custom-block-title">💡 思考：什么是类加载器，类加载器有哪些?</p><p>JVM只会运行二进制文件，类加载器可以将字节码加载到JVM中，让Java程序能够启动起来。</p><p>常见的类加载器有四个</p><ul><li>引导类加载器，是最顶级的加载器，由C++编写实现，主要用于加载 <code>JAVA_HOME/jre/lib</code> 目录下的库类</li><li>拓展类加载器，是引导类加载器的子类，由Java编写实现，主要用于记载<code>JAVA_HOME/jre/lib/ext</code>目录中的库类。</li><li>应用类加载器，是拓展类加载器的字类，由Java编写实现，主要用于加载<code>Classpath</code>下的类，也就是自己编写的 Java 类。</li><li>自定义类加载器，开发者自定义类继承 <code>ClassLoader</code> ，实现自定义类加载规则。</li></ul></div><br><h3 id="双亲委派模型" tabindex="-1">双亲委派模型 <a class="header-anchor" href="#双亲委派模型" aria-label="Permalink to &quot;双亲委派模型&quot;">​</a></h3><p>如果一个类加载器在接到加载类的请求时，它首先不会自己尝试去加载这个类，而是把这个请求任务委托给父类加载器去完成，依次递归，如果父类加载器可以完成类加载任务，就返回成功；只有父类加载器无法完成此加载任务时，才由下一级去加载。</p><p><img src="https://mugrain.oss-cn-hangzhou.aliyuncs.com/cswiki/image-20230506100920042.png" alt="image-20230506100920042" loading="lazy"></p><br><p><strong>JVM为什么采用双亲委派机制</strong></p><ul><li><p>通过双亲委派机制可以避免某一个类被重复加载，当父类已经加载后则无需重复加载，保证唯一性。</p></li><li><p>为了安全，保证类库API不会被修改</p></li></ul><p>在工程中新建java.lang包，接着在该包下新建String类，并定义main函数</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;demo info&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>​ 此时执行main函数，会出现异常，在类 java.lang.String 中找不到 main 方法</p><p><img src="https://mugrain.oss-cn-hangzhou.aliyuncs.com/cswiki/image-20220903144547378.png" alt="image-20220903144547378" loading="lazy"></p><p>​ 出现该信息是因为由双亲委派的机制，java.lang.String的在启动类加载器(Bootstrap classLoader)得到加载，因为在核心jre库中有其相同名字的类文件，但该类中并没有main方法。这样就能防止恶意篡改核心API库。</p><br><div class="warning custom-block"><p class="custom-block-title">💡思考：什么是双亲委派模型？</p><p>如果一个类加载器收到了类加载的请求，它首先不会自己尝试加载这个类，而是把这请求委派给父类加载器去完成，每一个层次的类加载器都是如此，因此所有的加载请求最终都应该传说到顶层的启动类加载器中，只有当父类加载器返回自己无法完成这个加载请求（它的搜索返回中没有找到所需的类）时，子类加载器才会尝试自己去加载。</p><br><p>💡 <strong>思考：JVM为什么采用双亲委派机制？</strong></p><ul><li>通过双亲委派机制可以避免某一个类被重复加载，当父类已经加载后则无需重复加载，保证唯一性。</li><li>为了安全，保证类库都由父类加载器加载，API不会被修改</li></ul></div><br><h3 id="类加载的执行过程" tabindex="-1">类加载的执行过程 <a class="header-anchor" href="#类加载的执行过程" aria-label="Permalink to &quot;类加载的执行过程&quot;">​</a></h3><p>类从加载到虚拟机中开始，直到卸载为止，它的整个生命周期包括了：加载、验证、准备、解析、初始化、使用和卸载这7个阶段。其中，验证、准备和解析这三个部分统称为连接（linking）。</p><p><img src="https://mugrain.oss-cn-hangzhou.aliyuncs.com/cswiki/image-20230506101032605.png" alt="image-20230506101032605" loading="lazy"></p><p><strong>类加载过程详解</strong></p><br><p><strong>1.加载</strong></p><p><img src="https://mugrain.oss-cn-hangzhou.aliyuncs.com/cswiki/image-20230506101115674.png" alt="image-20230506101115674" loading="lazy"></p><ul><li>通过类的全名，获取类的二进制数据流。</li><li>解析类的二进制数据流为方法区内的数据结构（Java类模型）</li><li>创建java.lang.Class类的实例，表示该类型。作为方法区这个类的各种数据的访问入口</li></ul><p><img src="https://mugrain.oss-cn-hangzhou.aliyuncs.com/cswiki/image-20230506101213373.png" alt="image-20230506101213373" loading="lazy"></p><br><p><strong>2.验证</strong></p><p><img src="https://mugrain.oss-cn-hangzhou.aliyuncs.com/cswiki/image-20230506101420202.png" alt="image-20230506101420202" loading="lazy"></p><p><strong>验证类是否符合JVM规范，安全性检查</strong></p><ul><li><p>文件格式验证</p><ul><li>是否符合Class文件的规范</li></ul></li><li><p>元数据验证</p><ul><li>这个类是否有父类（除了Object这个类之外，其余的类都应该有父类）。</li><li>这个类是否继承（extends）了被final修饰过的类（被final修饰过的类表示类不能被继承）。</li><li>类中的字段、方法是否与父类产生矛盾。（被final修饰过的方法或字段是不能覆盖的）</li></ul></li><li><p>字节码验证</p><ul><li>主要的目的是通过对数据流和控制流的分析，确定程序语义是合法的、符合逻辑的。</li></ul></li><li><p>符号引用验证</p><ul><li>符号引用以一组符号来描述所引用的目标，符号可以是任何形式的字面量</li></ul></li></ul><blockquote><p>比如：int i = 3；字面量：3 ；符号引用：i</p></blockquote><br><p><strong>3.准备</strong></p><p><img src="https://mugrain.oss-cn-hangzhou.aliyuncs.com/cswiki/image-20230506101445898.png" alt="image-20230506101445898" loading="lazy"></p><p><strong>为类变量分配内存并设置类变量初始值</strong></p><ul><li><p>static变量，分配空间在准备阶段完成（设置默认值），赋值在初始化阶段完成</p></li><li><p>static变量是final的基本类型，以及字符串常量，值已确定，赋值在准备阶段完成</p></li><li><p>static变量是final的引用类型，那么赋值也会在初始化阶段完成</p></li></ul><p><img src="https://mugrain.oss-cn-hangzhou.aliyuncs.com/cswiki/image-20230506101824622.png" alt="image-20230506101824622" loading="lazy"></p><br><p><strong>4.解析</strong></p><p><img src="https://mugrain.oss-cn-hangzhou.aliyuncs.com/cswiki/image-20230506101504632.png" alt="image-20230506101504632" loading="lazy"></p><p><strong>把类中的符号引用转换为直接引用</strong></p><p>比如：方法中调用了其他方法，方法名可以理解为符号引用，而直接引用就是使用指针直接指向方法。</p><p><img src="https://mugrain.oss-cn-hangzhou.aliyuncs.com/cswiki/image-20230506102311951.png" alt="image-20230506102311951" loading="lazy"></p><br><p><strong>5.初始化</strong></p><p><img src="https://mugrain.oss-cn-hangzhou.aliyuncs.com/cswiki/image-20230506101625087.png" alt="image-20230506101625087" loading="lazy"></p><p><strong>对类的静态变量，静态代码块执行初始化操作</strong></p><ul><li><p>如果初始化一个类的时候，其父类尚未初始化，则优先初始化其父类。</p></li><li><p>如果同时包含多个静态变量和静态代码块，则按照自上而下的顺序依次执行。</p></li></ul><br><p><strong>6.使用</strong></p><p><img src="https://mugrain.oss-cn-hangzhou.aliyuncs.com/cswiki/image-20230506101641837.png" alt="image-20230506101641837" loading="lazy"></p><p>JVM 开始从入口方法开始执行用户的程序代码</p><ul><li><p>调用静态类成员信息（比如：静态字段、静态方法）</p></li><li><p>使用new关键字为其创建对象实例</p></li></ul><br><p><strong>7.卸载</strong></p><p>当用户程序代码执行完毕后，JVM 便开始销毁创建的 Class 对象，最后负责运行的 JVM 也退出内存</p><br><div class="warning custom-block"><p class="custom-block-title">💡 思考：说一下类装载的执行过程</p><p>类从加载到虚拟机中开始，直到卸载为止，它的整个生命周期包括了：加载、验证、准备、解析、初始化、使用和卸载这7个阶段。其中，验证、准备和解析这三个部分统称为连接（linking）</p><ul><li>加载：查找和导入class文件</li><li>验证：保证加载类的准确性</li><li>准备：为类变量分配内存并设置类变量初始值</li><li>解析：把类中的符号引用转换为直接引用</li><li>初始化：对类的静态变量，静态代码块执行初始化操作</li><li>使用：JVM 开始从入口方法开始执行用户的程序代码</li><li>卸载：当用户程序代码执行完毕后，JVM 便开始销毁创建的 Class 对象，最后负责运行的 JVM 也退出内存。</li></ul></div><h2 id="垃圾收回" tabindex="-1">垃圾收回 <a class="header-anchor" href="#垃圾收回" aria-label="Permalink to &quot;垃圾收回&quot;">​</a></h2><h3 id="垃圾回收概述" tabindex="-1">垃圾回收概述 <a class="header-anchor" href="#垃圾回收概述" aria-label="Permalink to &quot;垃圾回收概述&quot;">​</a></h3><blockquote><p>提问：GC是什么？为什么要GC</p></blockquote><p>为了让程序员更专注于代码的实现，而不用过多的考虑内存释放的问题，所以，在Java语言中，有了自动的垃圾回收机制，也就是我们熟悉的GC(Garbage Collection)。</p><p>有了垃圾回收机制后，程序员只需要关心内存的申请即可，内存的释放由系统自动识别完成。</p><p>在进行垃圾回收时，不同的对象引用类型，GC会采用不同的回收时机</p><br><p>换句话说，自动的垃圾回收的算法就会变得非常重要了，如果因为算法的不合理，导致内存资源一直没有释放，同样也可能会导致内存溢出的。</p><p>当然，除了Java语言，C#、Python等语言也都有自动的垃圾回收机制。</p><br><div class="warning custom-block"><p class="custom-block-title">💡 思考：为什么需要Java垃圾回收机制？</p><p>让程序员更加专注于代码的实现，而不用过多考虑内存释放问题，因为垃圾回收机制可以帮助我们自动进行垃圾回收。</p></div><blockquote><p>提问：对象什么时候可以被垃圾器回收</p></blockquote><p><img src="https://mugrain.oss-cn-hangzhou.aliyuncs.com/cswiki/image-20230506104954777.png" alt="image-20230506104954777" loading="lazy"></p><p>简单一句就是：如果一个或多个对象没有任何的引用指向它了，那么这个对象现在就是垃圾，如果定位了垃圾，则有可能会被垃圾回收器回收。</p><p>如果要定位什么是垃圾，有两种方式来确定，第一个是引用计数法，第二个是可达性分析算法</p><br><p><strong>引用计数法</strong></p><p>一个对象被引用了一次，在当前的对象头上递增一次引用次数，如果这个对象的引用次数为0，代表这个对象可回收</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">String demo </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;123&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p><img src="https://mugrain.oss-cn-hangzhou.aliyuncs.com/cswiki/image-20230506111102825.png" alt="image-20230506111102825" loading="lazy"></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">String demo </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p><img src="https://mugrain.oss-cn-hangzhou.aliyuncs.com/cswiki/image-20230506111136231.png" alt="image-20230506111136231" loading="lazy"></p><p>当对象间出现了循环引用的话，则引用计数法就会失效</p><p><img src="https://mugrain.oss-cn-hangzhou.aliyuncs.com/cswiki/image-20230506111255401.png" alt="image-20230506111255401" loading="lazy"></p><p>先执行右侧代码的前4行代码</p><p><img src="https://mugrain.oss-cn-hangzhou.aliyuncs.com/cswiki/image-20230506111327590.png" alt="image-20230506111327590" loading="lazy"></p><p>目前上方的引用关系和计数都是没问题的，但是，如果代码继续往下执行，如下图</p><p><img src="https://mugrain.oss-cn-hangzhou.aliyuncs.com/cswiki/image-20230506111512450.png" alt="image-20230506111512450" loading="lazy"></p><p>虽然a和b都为null，但是由于a和b存在循环引用，这样a和b永远都不会被回收。</p><p>优点：</p><ul><li>实时性较高，无需等到内存不够的时候，才开始回收，运行时根据对象的计数器是否为0，就可以直接回收。</li><li>在垃圾回收过程中，应用无需挂起。如果申请内存时，内存不足，则立刻报OOM错误。</li><li>区域性，更新对象的计数器时，只是影响到该对象，不会扫描全部对象。</li></ul><p>缺点：</p><ul><li>每次对象被引用时，都需要去更新计数器，有一点时间开销。</li><li><strong>浪费CPU资源</strong>，即使内存够用，仍然在运行时进行计数器的统计。</li><li><strong>无法解决循环引用问题，会引发内存泄露</strong>。（最大的缺点）</li></ul><br><p><strong>可达性分析算法</strong></p><p>现在的虚拟机采用的都是通过可达性分析算法来确定哪些内容是垃圾。</p><p>会存在一个根节点【GC Roots】，引出它下面指向的下一个节点，再以下一个节点节点开始找出它下面的节点，依次往下类推。直到所有的节点全部遍历完毕。</p><blockquote><p>根对象是那些肯定不能当做垃圾回收的对象，比如：<mark>局部变量，静态方法，静态变量，类信息</mark></p><p>核心是：判断某对象是否与根对象有直接或间接的引用，如果没有被引用，则可以当做垃圾回收</p></blockquote><p><img src="https://mugrain.oss-cn-hangzhou.aliyuncs.com/cswiki/image-20240205141533159.png" alt="image-20240205141533159" loading="lazy"></p><p>​ Object5,Object6,Object7这三个节点是可回收的，但是<strong>并不会马上的被回收！！</strong> 对象中存在一个方法【finalize】。当对象被标记为可回收后，当发生GC时，首先<strong>会判断这个对象是否执行了finalize方法</strong>，如果这个方法还没有被执行的话，那么就会先来执行这个方法，接着在这个方法执行中，可以设置当前这个对象与GC ROOTS产生关联，那么这个方法执行完成之后，GC会再次判断对象是否可达，如果仍然不可达，则会进行回收，如果可达了，则不会进行回收。</p><p>​ finalize方法对于每一个对象来说，只会执行一次。如果第一次执行这个方法的时候，设置了当前对象与RC ROOTS关联，那么这一次不会进行回收。 那么等到这个对象第二次被标记为可回收时，那么该对象的finalize方法就不会再次执行了。</p><br><p><strong>GC ROOTS：</strong></p><ul><li>虚拟机栈（栈帧中的本地变量表）中引用的对象</li></ul><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * demo是栈帧中的本地变量，当 demo = null 时，</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * 由于此时 demo 充当了 GC Root 的作用，</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * demo与原来指向的实例 new Demo() 断开了连接，对象被回收。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Demo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    	Demo demo </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Demo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    	demo </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li>方法区中类静态属性引用的对象</li></ul><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * 当栈帧中的本地变量 b = null 时，</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * 由于 b 原来指向的对象与 GC Root (变量 b) 断开了连接，</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * 所以 b 原来指向的对象会被回收，而由于我们给 a 赋值了变量的引用，</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * a在此时是类静态属性引用，充当了 GC Root 的作用，它指向的对象依然存活!</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Demo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Demo a;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        Demo b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Demo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        b.a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Demo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li>方法区中常量引用的对象</li></ul><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * 常量 a 指向的对象并不会因为 demo 指向的对象被回收而回收</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Demo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> final</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Demo a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Demo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        Demo demo </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Demo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        demo </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li>本地方法栈中 JNI（即一般说的 Native 方法）引用的对象</li></ul><br><div class="warning custom-block"><p class="custom-block-title">💡 思考：什么时候可以被垃圾器回收？</p><p>首先我们需要对垃圾进行定义，垃圾就是对象没有任何的引用指向了，则需要被垃圾回收器进行回收。</p><p>然后是对垃圾进行定位，有两种定位垃圾的算法，分别是引用器计数法和可达性分析算法。因为引用器计数算法无法解决循环依赖问题，所以Java使用的是可达性分析算法。</p></div><h3 id="垃圾回收概念" tabindex="-1">垃圾回收概念 <a class="header-anchor" href="#垃圾回收概念" aria-label="Permalink to &quot;垃圾回收概念&quot;">​</a></h3><p><strong>强引用</strong></p><p>只有所有 GC Roots 对象都不通过【强引用】引用该对象，该对象才能被垃圾回收</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">User user </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> User</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div><p><img src="https://mugrain.oss-cn-hangzhou.aliyuncs.com/cswiki/image-20230506155341703.png" alt="image-20230506155341703" loading="lazy"></p><br><p><strong>软引用</strong></p><p>仅有软引用引用该对象时，在垃圾回收后，内存仍不足时会再次出发垃圾回收</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">User user </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> User</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">SoftReference softReference </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SoftReference</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(user);</span></span></code></pre></div><p><img src="https://mugrain.oss-cn-hangzhou.aliyuncs.com/cswiki/image-20230506155416293.png" alt="image-20230506155416293" loading="lazy"></p><br><p><strong>弱引用</strong></p><p>仅有弱引用引用该对象时，在垃圾回收时，无论内存是否充足，都会回收弱引用对象</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">User user </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> User</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">WeakReference weakReference </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> WeakReference</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(user);</span></span></code></pre></div><p><img src="https://mugrain.oss-cn-hangzhou.aliyuncs.com/cswiki/image-20230506155501557.png" alt="image-20230506155501557" loading="lazy"></p><blockquote><p>延伸话题：ThreadLocal内存泄漏问题</p></blockquote><p>ThreadLocal用的就是弱引用，看以下源码：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Entry</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> WeakReference</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;ThreadLocal&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&gt; {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Object value;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    Entry</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ThreadLocal&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">k</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, Object </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">v</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">         super</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(k);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> v; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//强引用，不会被回收</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><code>Entry</code>的key是当前ThreadLocal，value值是我们要设置的数据。</p><p><code>WeakReference</code>表示的是弱引用，当JVM进行GC时，一旦发现了只具有弱引用的对象，不管当前内存空间是否足够，都会回收它的内存。但是<code>value</code>是强引用，它不会被回收掉。</p><blockquote><p>ThreadLocal使用建议：使用完毕后注意调用清理方法。</p></blockquote><br><p><strong>虚引用</strong></p><p>必须配合引用队列使用，被引用对象回收时，会将虚引用入队，由 Reference Handler 线程调用虚引用相关方法释放直接内存</p><p><img src="https://mugrain.oss-cn-hangzhou.aliyuncs.com/cswiki/image-20230506155518510.png" alt="image-20230506155518510" loading="lazy"></p><p><img src="https://mugrain.oss-cn-hangzhou.aliyuncs.com/cswiki/image-20230506155552693.png" alt="image-20230506155552693" loading="lazy"></p><blockquote><p><strong>面试官</strong>：强引用、软引用、弱引用、虚引用的区别？</p><p><strong>候选人:</strong></p><p>嗯嗯~</p><p>强引用最为普通的引用方式，表示一个对象处于<strong>有用且必须</strong>的状态，如果一个对象具有强引用，则GC并不会回收它。即便堆中内存不足了，宁可出现OOM，也不会对其进行回收</p><p>软引用表示一个对象处于<strong>有用且非必须</strong>状态，如果一个对象处于软引用，在内存空间足够的情况下，GC机制并不会回收它，而在内存空间不足时，则会在OOM异常出现之间对其进行回收。但值得注意的是，因为GC线程优先级较低，软引用并不会立即被回收。</p><p>弱引用表示一个对象处于<strong>可能有用且非必须</strong>的状态。在GC线程扫描内存区域时，一旦发现弱引用，就会回收到弱引用相关联的对象。对于弱引用的回收，无关内存区域是否足够，一旦发现则会被回收。同样的，因为GC线程优先级较低，所以弱引用也并不是会被立刻回收。</p><p>虚引用表示一个对象处于<strong>无用</strong>的状态。在任何时候都有可能被垃圾回收。虚引用的使用必须和引用队列Reference Queue联合使用。</p></blockquote><h3 id="垃圾回收算法" tabindex="-1">垃圾回收算法 <a class="header-anchor" href="#垃圾回收算法" aria-label="Permalink to &quot;垃圾回收算法&quot;">​</a></h3><p><strong>标记清除算法</strong></p><p>标记清除算法，是将垃圾回收分为2个阶段，分别是<strong>标记和清除</strong>。</p><p>1.根据可达性分析算法得出的垃圾进行标记</p><p>2.对这些标记为可回收的内容进行垃圾回收</p><p><img src="https://mugrain.oss-cn-hangzhou.aliyuncs.com/cswiki/image-20230506112047190.png" alt="image-20230506112047190" loading="lazy"></p><p>可以看到，标记清除算法解决了引用计数算法中的循环引用的问题，没有从root节点引用的对象都会被回收。</p><p>同样，标记清除算法也是有缺点的：</p><ul><li>效率较低，<strong>标记和清除两个动作都需要遍历所有的对象</strong>，并且在GC时，<strong>需要停止应用程序</strong>，对于交互性要求比较高的应用而言这个体验是非常差的。</li><li>（<strong>重要</strong>）通过标记清除算法清理出来的内存，碎片化较为严重，因为被回收的对象可能存在于内存的各个角落，所以清理出来的内存是不连贯的。</li></ul><br><p><strong>复制算法</strong></p><p>​ 复制算法的核心就是，<strong>将原有的内存空间一分为二，每次只用其中的一块</strong>，在垃圾回收时，将正在使用的对象复制到另一个内存空间中，然后将该内存空间清空，交换两个内存的角色，完成垃圾的回收。</p><p>​ 如果内存中的垃圾对象较多，需要复制的对象就较少，这种情况下适合使用该方式并且效率比较高，反之，则不适合。</p><p><img src="https://mugrain.oss-cn-hangzhou.aliyuncs.com/cswiki/image-20230506111919008.png" alt="image-20230506111919008" loading="lazy"></p><ul><li><p>将内存区域分成两部分，每次操作其中一个。</p></li><li><p>当进行垃圾回收时，将正在使用的内存区域中的存活对象移动到未使用的内存区域。当移动完对这部分内存区域一次性清除。</p></li><li><p>周而复始。</p></li></ul><p>优点：</p><ul><li>在垃圾对象多的情况下，效率较高</li><li>清理后，内存无碎片</li></ul><p>缺点：</p><ul><li>分配的2块内存空间，在同一个时刻，只能使用一半，内存使用率较低</li></ul><br><p><strong>标记整理算法</strong></p><p>​ 标记压缩算法是在标记清除算法的基础之上，做了优化改进的算法。和标记清除算法一样，也是从根节点开始，对对象的引用进行标记，在清理阶段，并不是简单的直接清理可回收对象，而是将存活对象都向内存另一端移动，然后清理边界以外的垃圾，从而解决了碎片化的问题。</p><p><img src="https://mugrain.oss-cn-hangzhou.aliyuncs.com/cswiki/image-20230506111957793.png" alt="image-20230506111957793" loading="lazy"></p><ul><li><p>标记垃圾。</p></li><li><p>需要清除向右边走，不需要清除的向左边走。</p></li><li><p>清除边界以外的垃圾。</p></li></ul><p>优缺点同标记清除算法，解决了标记清除算法的碎片化的问题，同时，标记压缩算法多了一步，对象移动内存位置的步骤，其效率也有有一定的影响。</p><p>与复制算法对比：复制算法标记完就复制，但标记整理算法得等把所有存活对象都标记完毕，再进行整理。</p><br><div class="warning custom-block"><p class="custom-block-title">💡思考：JVM垃圾回收算法有哪些</p><ul><li>标记清除算法：垃圾回收分为两个阶段，分别为标记和清除，效率高，但是有磁盘碎片，内存不连续</li><li>标记整理算法：垃圾回收分为三个阶段，分别为标记，清除和整理，会将存活对象移动到内存的另一端，无碎片。但是因为对象需要移动，所以效率比较低。</li><li>复制算法：将原有的内存空间一分为二，每次只使用其中的一块，正在使用的对象复制到宁一个内存空间中，然后将该内存清空，交换两个内存的角色完成垃圾的回收；虽然没碎片，但是会有内存浪费，效率高低标记整理算法但是高于标记清除算法。</li></ul></div><br><h3 id="分代收集算法" tabindex="-1">分代收集算法 <a class="header-anchor" href="#分代收集算法" aria-label="Permalink to &quot;分代收集算法&quot;">​</a></h3><p>在java8时，堆被分为了两份：<strong>新生代和老年代【1：2】</strong>，在java7时，还存在一个永久代。</p><p><img src="https://mugrain.oss-cn-hangzhou.aliyuncs.com/cswiki/image-20230506131229649.png" alt="image-20230506131229649" loading="lazy"></p><p>对于新生代，内部又被分为了三个区域。Eden区，S0区，S1区【8：1：1】</p><p>当对新生代产生GC：MinorGC【Young GC】</p><p>当对老年代代产生GC：Major GC</p><p>当对新生代和老年代产生FullGC： 新生代 + 老年代完整垃圾回收，暂停时间长，<strong>应尽力避免</strong></p><br><p><strong>工作机制</strong></p><p><img src="https://mugrain.oss-cn-hangzhou.aliyuncs.com/cswiki/image-20230506131308654.png" alt="image-20230506131308654" loading="lazy"></p><ul><li>新创建的对象，都会先分配到eden区</li></ul><p><img src="https://mugrain.oss-cn-hangzhou.aliyuncs.com/cswiki/image-20230506131415418.png" alt="image-20230506131415418" loading="lazy"></p><ul><li><p>当伊甸园内存不足，标记伊甸园与 from（现阶段没有）的存活对象</p></li><li><p>将存活对象采用复制算法复制到 to 中，复制完毕后，伊甸园和 from 内存都得到释放</p></li></ul><p><img src="https://mugrain.oss-cn-hangzhou.aliyuncs.com/cswiki/image-20230506131442503.png" alt="image-20230506131442503" loading="lazy"></p><ul><li>经过一段时间后伊甸园的内存又出现不足，标记eden区域to区存活的对象，将存活的对象复制到from区</li></ul><p><img src="https://mugrain.oss-cn-hangzhou.aliyuncs.com/cswiki/image-20230506131544447.png" alt="image-20230506131544447" loading="lazy"></p><p><img src="https://mugrain.oss-cn-hangzhou.aliyuncs.com/cswiki/image-20230506131607645.png" alt="image-20230506131607645" loading="lazy"></p><ul><li>当幸存区对象熬过几次回收（最多15次），晋升到老年代（幸存区内存不足或大对象会导致提前晋升）</li></ul><p><strong>MinorGC、 Mixed GC 、 FullGC的区别是什么</strong></p><p><img src="https://mugrain.oss-cn-hangzhou.aliyuncs.com/cswiki/image-20230506131640893.png" alt="image-20230506131640893" loading="lazy"></p><ul><li><p>MinorGC【young GC】发生在新生代的垃圾回收，暂停时间短（STW）</p></li><li><p>Mixed GC 新生代 + 老年代部分区域的垃圾回收，G1 收集器特有</p></li><li><p>FullGC： 新生代 + 老年代完整垃圾回收，暂停时间长（STW），应尽力避免</p></li></ul><br><div class="warning custom-block"><p class="custom-block-title">💡思考：JVM中的分代回收的流程是怎么样的？</p><p>JDK8版本时，堆被分为了两个部分，一个是新生代，一个是老年代，默认空间占用比例是1:2</p><p>新生代内部又被分为三个区域。伊甸园区，FROM区和TO区。默认空间占比为8:1:1</p><p>具体的工作流程是这样的：</p><ul><li>新创建的对象先放到伊甸园区，当伊甸园区和 FROM 区满时会触发 YoungGC，将存活对象采用复制算法复制到 TO区 并年龄加一，复制完成后伊甸园区和FROM区都会释放内存，并把TO 区改为FROM 区。</li><li>当经过一段时间内存又不足时触发 YoungGC，重复上面的步骤，当TO 区存活的对象超过15岁后则晋升为老年代。如果幸存区内存不足或大对象会提前晋升为老年代。</li><li>当老年代满了以后会触发FullGC，同时收集年轻代和老年代，这时是只存在FullGC的线程执行，其他线程都会被挂起。我们需要在程序中尽量避免FullGC出现。</li></ul><br><p>💡<strong>思考：新生代、老年代、永久代的区别</strong></p><ul><li>新生代存放的是新创建对象的数据。</li><li>老年代存放的是存活时间长的数据和占用空间大的数据。</li><li>永久代存放的是类元信息、静态属性、字段、方法、常量。在JDK8版本中永久代已经被元空间取代，元空间相较于永久代，使用的是本地内存实现，而不在虚拟机中，所以元空间的大小只受本地空间的限制。</li></ul><br><p>💡<strong>思考：MinorGC、MajorGC、FullGC的区别</strong></p><p><img src="https://mugrain.oss-cn-hangzhou.aliyuncs.com/cswiki/image-20240206205538397.png" alt="image-20240206205538397" loading="lazy"></p><p>针对 <code>HotSpot VM</code> 的实现，它里面的 GC 其实准确分类只有两大种：</p><ul><li><code>Partial GC</code>：并不收集整个 GC 堆的模式 <ul><li><code>Young GC</code>：只收集 <code>young gen</code>的 GC</li><li><code>Old GC</code>：只收集 <code>old gen</code> 的 GC。只有 <code>CMS</code> 的 <code>concurrent collection</code> 是这个模式</li><li><code>Mixed GC</code>：收集整个<code>young gen</code>以及部分 <code>old gen</code> 的GC。只有G1有这个模式</li></ul></li><li><code>Full GC</code>：收集整个堆，包括 <code>young gen</code>、<code>old gen</code>、<code>perm gen</code>（如果存在的话）等所有部分的模式。</li></ul><p><code>Major GC</code> 通常是跟 <code>Full GC</code> 是等价的，收集整个GC堆。但因为 <code>HotSpot VM</code>发展了这么多年，外界对各种名词的解读已经完全混乱了，当有人说 Major GC 的时候一定要问清楚他想要指的是上面的 Full GC 还是 Old GC。</p></div><br><h3 id="垃圾回收器" tabindex="-1">垃圾回收器 <a class="header-anchor" href="#垃圾回收器" aria-label="Permalink to &quot;垃圾回收器&quot;">​</a></h3><blockquote><p>思考：有哪些垃圾回收器？如何评估垃圾回收器的性能？垃圾回收器如何选择？</p></blockquote><p>按照<mark>内存区间</mark>分类：</p><p><img src="https://mugrain.oss-cn-hangzhou.aliyuncs.com/cswiki/fd16701d3e150d5e58d52b7306473a42.png" alt="image-20200713093757644" loading="lazy"></p><ul><li>新生代收集器：<code>Serial GC</code>、<code>Parallel Scavenge GC</code>、<code>ParNew GC</code></li><li>老年代收集器：<code>Serial Old GC</code>、<code>Parallel Old GC</code>、<code>CMS GC</code></li><li>整堆收集器：<code>G1 GC</code></li></ul><br><p>按照<mark>工作模式</mark>分类：</p><p><img src="https://mugrain.oss-cn-hangzhou.aliyuncs.com/cswiki/90c3bcdc22cd0b49e10d702c608c4fc6.png" alt="image-20200713093551365" loading="lazy"></p><ul><li>串行回收器：<code>Serial GC</code>、<code>Serial Old GC</code></li><li>并行回收器：<code>ParNew GC</code>、<code>Parallel Scavenge GC</code>、<code>Parallel old GC</code></li><li>并发回收器：<code>CMS GC</code>、<code>G1 GC</code></li></ul><br><h4 id="评估gc性能指标" tabindex="-1">评估GC性能指标 <a class="header-anchor" href="#评估gc性能指标" aria-label="Permalink to &quot;评估GC性能指标&quot;">​</a></h4><blockquote><p>提问：影响GC性能的主要原因是什么？</p></blockquote><ul><li><mark>吞吐量</mark>：运行用户代码的时间占总运行时间的比例（总运行时间 = 程序的运行时间 + 内存回收的时间）</li><li><mark>垃圾收集开销</mark>：吞吐量的补数，垃圾收集所用时间与总运行时间的比例。</li><li><mark>暂停时间</mark>：执行垃圾收集时，程序的工作线程被暂停的时间。</li><li><mark>收集频率</mark>：相对于应用程序的执行，收集操作发生的频率。</li><li><mark>内存占用</mark>：Java 堆区所占的内存大小。</li><li><mark>快速</mark>：一个对象从诞生到被回收所经历的时间。</li></ul><br><p><strong>吞吐量</strong></p><p>吞吐量就是 CPU 用于运行用户代码的时间与 CPU 总消耗时间的比值，即吞吐量 = 运行用户代码时间 /（运行用户代码时间+垃圾收集时间）。比如：虚拟机总共运行了 100 分钟，其中垃圾收集花掉 1 分钟，那吞吐量就是 99%。</p><p>这种情况下，应用程序能容忍较高的暂停时间，因此，高吞吐量的应用程序有更长的时间基准，快速响应是不必考虑的</p><p>吞吐量优先，意味着在单位时间内，STW 的时间最短：0.2 + 0.2 = 0.4</p><p><img src="https://mugrain.oss-cn-hangzhou.aliyuncs.com/cswiki/a05d48c1926a03c3acdebf74d10bf522.png" alt="image-20200713084726176" loading="lazy"></p><br><p><strong>暂停时间</strong></p><p>”暂停时间”是指一个时间段内应用程序线程暂停，让 GC 线程执行的状态。</p><p>例如，GC 期间 100 毫秒的暂停时间意味着在这 100 毫秒期间内没有应用程序线程是活动的。</p><p>暂停时间优先，意味着尽可能让单次 STW 的时间最短：0.1 + 0.1 + 0.1 + 0.1 + 0.1 = 0.5</p><p><img src="https://mugrain.oss-cn-hangzhou.aliyuncs.com/cswiki/de90092e21cbff31926f7cc7dceebf25.png" alt="image-20200713085306400" loading="lazy"></p><br><p><strong>吞吐量 vs 暂停时间</strong></p><p>高吞吐量较好因为这会让应用程序的最终用户感觉只有应用程序线程在做“生产性”工作。直觉上，吞吐量越高程序运行越快。</p><p>低暂停时间（低延迟）较好因为从最终用户的角度来看不管是 GC 还是其他原因导致一个应用被挂起始终是不好的。这取决于应用程序的类型，<mark>有时候甚至短暂的 200 毫秒暂停都可能打断终端用户体验</mark>。因此，具有低的较大暂停时间是非常重要的，特别是对于一个<mark>交互式应用程序</mark>。</p><p>不幸的是”高吞吐量”和”低暂停时间”是一对相互竞争的目标（矛盾）。</p><ul><li>因为如果选择以吞吐量优先，那么<mark>必然需要降低内存回收的执行频率</mark>，但是这样会导致 GC 需要更长的暂停时间来执行内存回收。</li><li>相反的，如果选择以低延迟优先为原则，那么为了降低每次执行内存回收时的暂停时间，也<mark>只能频繁地执行内存回收</mark>，但这又引起了年轻代内存的缩减和导致程序吞吐量的下降。</li></ul><p>在设计（或使用）GC 算法时，我们必须确定我们的目标：一个 GC 算法只可能针对两个目标之一（即只专注于较大吞吐量或最小暂停时间），或尝试找到一个二者的折衷。</p><p>现在标准：<mark>在最大吞吐量优先的情况下，降低停顿时间</mark></p><br><h4 id="串行垃圾收集器" tabindex="-1">串行垃圾收集器 <a class="header-anchor" href="#串行垃圾收集器" aria-label="Permalink to &quot;串行垃圾收集器&quot;">​</a></h4><p>Serial和Serial Old串行垃圾收集器，是指使用单线程进行垃圾回收，堆内存较小，适合个人电脑，<strong>JDK8 在 Client 模式下默认使用此垃圾回收器</strong></p><ul><li>Serial 作用于新生代，采用复制算法</li><li>Serial Old 作用于老年代，采用标记-整理算法</li></ul><p>垃圾回收时，只有一个线程在工作，并且 Java应用中的所有线程都要暂停（STW），等待垃圾回收的完成。</p><p><img src="https://mugrain.oss-cn-hangzhou.aliyuncs.com/cswiki/image-20240206193524726.png" alt="image-20240206193524726" loading="lazy"></p><p><strong>参数配置</strong></p><ul><li><code>-XX:+UseSerialGC</code>：Serial 回收器 年轻代使用Serial GC， 老年代使用Serial Old GC。</li><li><code>-XX:+UseParNewGC</code>：ParNew 回收器 年轻代使用ParNew GC，不影响老年代。</li></ul><br><h4 id="并行垃圾收集器-吞吐量优先" tabindex="-1">并行垃圾收集器：吞吐量优先 <a class="header-anchor" href="#并行垃圾收集器-吞吐量优先" aria-label="Permalink to &quot;并行垃圾收集器：吞吐量优先&quot;">​</a></h4><p>Parallel Scavenge 和 Parallel Old 是一个并行垃圾回收器，<strong>JDK8 在 Server 模式下默认使用此垃圾回收器</strong></p><ul><li>Parallel Scavenge 作用于新生代，采用复制算法</li><li>Parallel Old 作用于老年代，采用标记-整理算法</li></ul><p>垃圾回收时，多个线程在工作，并且 Java应用中的所有线程都要暂停（STW），等待垃圾回收的完成。</p><p><img src="https://mugrain.oss-cn-hangzhou.aliyuncs.com/cswiki/image-20240206193657067.png" alt="image-20240206193657067" loading="lazy"></p><p><strong>参数配置</strong></p><ul><li><code>-XX:+UseParallelGC</code>：年轻代使用 Parallel Scavenge GC，互相激活，JDK8 默认参数。</li><li><code>-XX:+UseParallelOldGC</code>：老年代使用 Parallel Old GC，互相激活</li></ul><br><h4 id="并发垃圾收集器-响应时间优先" tabindex="-1">并发垃圾收集器：响应时间优先 <a class="header-anchor" href="#并发垃圾收集器-响应时间优先" aria-label="Permalink to &quot;并发垃圾收集器：响应时间优先&quot;">​</a></h4><p>CMS 全称 Concurrent Mark Sweep，是一款并发的，以获取最短回收停顿时间为目标的收集器，<mark>停顿时间短</mark>，用户体验就好。其最大特点是在进行垃圾回收时，应用仍然能正常运行。</p><ul><li>Parallel New 作用于新生代，采用复制算法</li><li>Concurrent Mark Sweep 作用于老年代，采用标记-清除算法</li></ul><p><img src="https://mugrain.oss-cn-hangzhou.aliyuncs.com/cswiki/image-20240206193649421.png" alt="image-20240206193649421" loading="lazy"></p><p><strong>参数配置</strong></p><ul><li><code>-XX:+UseConcMarkSweepGC</code> ：年轻代使用CMS GC。 <ul><li>开启该参数后会自动将 <code>-XX:＋UseParNewGC</code> 打开。即：ParNew（Young区）+ CMS（Old区）+ Serial Old的组合</li></ul></li></ul><br><p>CMS 整个过程分为四个阶段：初始标记阶段（Inital-Mark）、并发标记阶段（Concurrent-Mark）、重新标记阶段（Remark）、并发清除阶段（Concurrent-Sweep）</p><ul><li>初始标记：在这个阶段中，程序中所有的工作线程都将会因为“Stop-the-World”机制而出现短暂的暂停，这个阶段的主要任务<mark>仅仅只是标记出 GCRoots 能直接关联到的对象</mark>。一旦标记完成之后就会恢复之前被暂停的所有应用线程。由于直接关联对象比较小，所以这里的<mark>速度非常快</mark>。</li><li>并发标记：从 GC Roots 的<mark>直接关联对象开始遍历整个对象图的过程</mark>，这个过程耗时较长但是<mark>不需要停顿用户线程</mark>，可以与垃圾收集线程一起并发运行。</li><li>重新标记：由于在并发标记阶段中，程序的工作线程会和垃圾收集线程同时运行或者交叉运行，因此为了<mark>修正并发标记期间，因用户程序继续运作而导致标记产生变动的那一部分对象的标记记录</mark>，这个阶段的停顿时间通常会比初始标记阶段稍长一些，但也远比并发标记阶段的时间短。</li><li>并发清除：此阶段<mark>清理删除掉标记阶段判断的已经死亡的对象，释放内存空间</mark>。由于不需要移动存活对象，所以这个阶段也是可以与用户线程同时并发的</li></ul><p>尽管 CMS 收集器采用的是并发回收（非独占式），但是<mark>在其初始化标记和重新标记这两个阶段中仍然需要执行 STW 机制</mark>暂停程序中的工作线程，不过暂停时间并不会太长，因此可以说明目前所有的垃圾收集器都做不到完全不需要 STW，只是尽可能地缩短暂停时间。</p><p><mark>由于最耗费时间的并发标记与并发清除阶段都不需要暂停工作，所以整体的回收是低停顿的。</mark></p><p>另外，由于在垃圾收集阶段用户线程没有中断，<mark>所以在 CMS 回收过程中，还应该确保应用程序用户线程有足够的内存可用</mark>。因此，CMS 收集器不能像其他收集器那样等到老年代几乎完全被填满了再进行收集，而是<mark>当堆内存使用率达到某一阈值时，便开始进行回收</mark>，以确保应用程序在 CMS 工作过程中依然有足够的空间支持应用程序运行。要是 CMS 运行期间预留的内存无法满足程序需要，就会出现一次 <code>Concurrent Mode Failure</code> 失败，这时虚拟机将启动后备预案：临时启用 Serial Old 收集器来重新进行老年代的垃圾收集，这样停顿时间就很长了。</p><p>CMS 收集器的垃圾收集算法采用的是标记清除算法，这意味着每次执行完内存回收后，由于被执行内存回收的无用对象所占用的内存空间极有可能是不连续的一些内存块，不可避免地将会<mark>产生一些内存碎片</mark>。那么 CMS 在为新对象分配内存空间时，将无法使用指针碰撞（Bump the Pointer）技术，而只能够选择空闲列表（Free List）执行内存分配。</p><p><img src="https://mugrain.oss-cn-hangzhou.aliyuncs.com/cswiki/image-20240207000501328.png" alt="image-20240207000501328" loading="lazy"></p><p><strong>CMS 优点</strong></p><ul><li>并发收集，低延迟，响应时间快，用户感受不到服务停顿。</li></ul><p>CMS 缺点</p><ul><li><mark>会产生内存碎片</mark>，导致并发清除后，用户线程可用的空间不足。在无法分配大对象的情况下，不得不提前触发 FullGC。</li><li><mark>CMS 收集器对 CPU 资源非常敏感</mark>。在并发阶段，它虽然不会导致用户停顿，但是会因为占用了一部分线程而导致应用程序变慢，总吞吐量会降低。</li><li><mark>CMS 收集器无法处理浮动垃圾</mark>。可能出现 <code>Concurrent Mode Failure</code>失败而导致另一次 Full GC 的产生。在并发标记阶段由于程序的工作线程和垃圾收集线程是同时运行或者交叉运行的，那么<mark>在并发标记阶段如果产生新的垃圾对象，CMS 将无法对这些垃圾对象进行标记，最终会导致这些新产生的垃圾对象没有被及时回收</mark>，从而只能在下一次执行 GC 时释放这些之前未被回收的内存空间。</li></ul><br><p><strong>总结</strong></p><p>HotSpot 有这么多的垃圾回收器，那么如果有人问，Serial GC、Parallel GC、CMS 这三个 GC 有什么不同呢？</p><p>请记住以下口令：</p><ul><li>如果你想要最小化地使用内存和并行开销，请选 Serial GC；</li><li>如果你想要最大化应用程序的吞吐量，请选 Parallel GC；</li><li>如果你想要最小化 GC 的中断或停顿时间，请选 CMS GC。</li></ul><br><blockquote><p>思考：为什么需要 Serial Old GC 作为 CMS GC 的备用</p></blockquote><h4 id="并发垃圾收集器-g1垃圾优先" tabindex="-1">并发垃圾收集器：G1垃圾优先 <a class="header-anchor" href="#并发垃圾收集器-g1垃圾优先" aria-label="Permalink to &quot;并发垃圾收集器：G1垃圾优先&quot;">​</a></h4><blockquote><p>思考：既然我们已经有了前面几个强大的 GC，为什么还要发布区域化分区代 Garbage First（G1）？</p></blockquote><p>原因就在于应用程序所应对的<mark>业务越来越庞大、复杂，用户越来越多</mark>，没有 GC 就不能保证应用程序正常进行，而经常造成 STW 的 GC 又跟不上实际的需求，所以才会不断地尝试对 GC 进行优化。G1 垃圾回收器为了适应现在<mark>不断扩大的内存和不断增加的处理器数量</mark>，进一步降低暂停时间（pause time），同时兼顾良好的吞吐量。</p><p>官方给 G1 设定的目标是在延迟可控的情况下获得尽可能高的吞吐量，所以才担当起“全功能收集器”的重任与期望。</p><p><img src="https://mugrain.oss-cn-hangzhou.aliyuncs.com/cswiki/image-20240207001644425.png" alt="image-20240207001644425" loading="lazy"></p><ul><li><p>应用于新生代和老年代，<strong>在JDK9之后默认使用G1</strong></p></li><li><p>划分成多个区域，每个区域都可以充当 eden，survivor，old， humongous，其中 humongous 专为大对象准备</p></li><li><p>采用复制算法</p></li><li><p>响应时间与吞吐量兼顾</p></li><li><p>分成三个阶段：新生代回收、并发标记、混合收集</p></li><li><p>如果并发失败（即回收速度赶不上创建新对象速度），会触发 Full GC</p></li></ul><br><p>Young Collection(年轻代垃圾回收)</p><ul><li><p>初始时，所有区域都处于空闲状态</p><p><img src="https://mugrain.oss-cn-hangzhou.aliyuncs.com/cswiki/image-20230506154542687.png" alt="image-20230506154542687" loading="lazy"></p></li><li><p>创建了一些对象，挑出一些空闲区域作为伊甸园区存储这些对象</p><p><img src="https://mugrain.oss-cn-hangzhou.aliyuncs.com/cswiki/image-20230506154607558.png" alt="image-20230506154607558" loading="lazy"></p></li><li><p>当伊甸园需要垃圾回收时，挑出一个空闲区域作为幸存区，用复制算法复制存活对象，需要暂停用户线程</p><p><img src="https://mugrain.oss-cn-hangzhou.aliyuncs.com/cswiki/image-20230506154633118.png" alt="image-20230506154633118" loading="lazy"></p><p><img src="https://mugrain.oss-cn-hangzhou.aliyuncs.com/cswiki/image-20230506154705088.png" alt="image-20230506154705088" loading="lazy"></p></li><li><p>随着时间流逝，伊甸园的内存又有不足</p></li><li><p>将伊甸园以及之前幸存区中的存活对象，采用复制算法，复制到新的幸存区，其中较老对象晋升至老年代</p><p><img src="https://mugrain.oss-cn-hangzhou.aliyuncs.com/cswiki/image-20230506154759809.png" alt="image-20230506154759809" loading="lazy"></p><p><img src="https://mugrain.oss-cn-hangzhou.aliyuncs.com/cswiki/image-20230506154826981.png" alt="image-20230506154826981" loading="lazy"></p><p><img src="https://mugrain.oss-cn-hangzhou.aliyuncs.com/cswiki/image-20230506154859985.png" alt="image-20230506154859985" loading="lazy"></p></li></ul><br><p>Young Collection + Concurrent Mark (年轻代垃圾回收+并发标记)</p><p>当老年代占用内存超过阈值(默认是45%)后，触发并发标记，这时无需暂停用户线程</p><p><img src="https://mugrain.oss-cn-hangzhou.aliyuncs.com/cswiki/image-20230506155000503.png" alt="image-20230506155000503" loading="lazy"></p><ul><li><p>并发标记之后，会有重新标记阶段解决漏标问题，此时需要暂停用户线程。</p></li><li><p>这些都完成后就知道了老年代有哪些存活对象，随后进入混合收集阶段。此时不会对所有老年代区域进行回收，而是根据暂停时间目标优先回收价值高（存活对象少）的区域（这也是 Gabage First 名称的由来）。</p><p><img src="https://mugrain.oss-cn-hangzhou.aliyuncs.com/cswiki/image-20230506155047765.png" alt="image-20230506155047765" loading="lazy"></p></li></ul><br><p>Mixed Collection (混合垃圾回收)</p><p>复制完成，内存得到释放。进入下一轮的新生代回收、并发标记、混合收集</p><p><img src="https://mugrain.oss-cn-hangzhou.aliyuncs.com/cswiki/image-20230506155116267.png" alt="image-20230506155116267" loading="lazy"></p><p>其中H叫做巨型对象，如果对象非常大，会开辟一块连续的空间存储巨型对象</p><p><img src="https://mugrain.oss-cn-hangzhou.aliyuncs.com/cswiki/image-20230506155146370.png" alt="image-20230506155146370" loading="lazy"></p><br><div class="warning custom-block"><p class="custom-block-title">💡思考：详细聊一下G1垃圾回收器</p></div><h2 id="jvm实践" tabindex="-1">JVM实践 <a class="header-anchor" href="#jvm实践" aria-label="Permalink to &quot;JVM实践&quot;">​</a></h2><h3 id="jvm-调优的参数可以在哪里设置参数值" tabindex="-1">JVM 调优的参数可以在哪里设置参数值？ <a class="header-anchor" href="#jvm-调优的参数可以在哪里设置参数值" aria-label="Permalink to &quot;JVM 调优的参数可以在哪里设置参数值？&quot;">​</a></h3><h4 id="tomcat的设置vm参数" tabindex="-1">tomcat的设置vm参数 <a class="header-anchor" href="#tomcat的设置vm参数" aria-label="Permalink to &quot;tomcat的设置vm参数&quot;">​</a></h4><p>修改TOMCAT_HOME/bin/catalina.sh文件，如下图</p><p><code>JAVA_OPTS=&quot;-Xms512m -Xmx1024m&quot; </code></p><p><img src="https://mugrain.oss-cn-hangzhou.aliyuncs.com/cswiki/image-20220904151948778.png" alt="image-20220904151948778" loading="lazy"></p><h4 id="springboot项目jar文件启动" tabindex="-1">springboot项目jar文件启动 <a class="header-anchor" href="#springboot项目jar文件启动" aria-label="Permalink to &quot;springboot项目jar文件启动&quot;">​</a></h4><p>通常在linux系统下直接加参数启动springboot项目</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nohup</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> java -Xms512m -Xmx1024m -jar xxxx.jar --spring.profiles.active=prod </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&amp;</span></span></code></pre></div><blockquote><p>nohup : 用于在系统后台不挂断地运行命令，退出终端不会影响程序的运行</p><p>参数 <strong>&amp;</strong> ：让命令在后台执行，终端退出后命令仍旧执行。</p></blockquote><h3 id="用的-jvm-调优的参数都有哪些" tabindex="-1">用的 JVM 调优的参数都有哪些？ <a class="header-anchor" href="#用的-jvm-调优的参数都有哪些" aria-label="Permalink to &quot;用的 JVM 调优的参数都有哪些？&quot;">​</a></h3><blockquote><p>难易程度：☆☆☆</p><p>出现频率：☆☆☆☆</p></blockquote><p>​ 对于JVM调优，主要就是调整年轻代、年老大、元空间的内存空间大小及使用的垃圾回收器类型。</p><p><a href="https://www.oracle.com/java/technologies/javase/vmoptions-jsp.html" target="_blank" rel="noreferrer">https://www.oracle.com/java/technologies/javase/vmoptions-jsp.html</a></p><p>1）设置堆的初始大小和最大大小，为了防止垃圾收集器在初始大小、最大大小之间收缩堆而产生额外的时间，通常把最大、初始大小设置为相同的值。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>-Xms：设置堆的初始化大小</span></span>
<span class="line"><span></span></span>
<span class="line"><span>-Xmx：设置堆的最大大小</span></span></code></pre></div><p>2） 设置年轻代中Eden区和两个Survivor区的大小比例。该值如果不设置，则默认比例为8:1:1。Java官方通过增大Eden区的大小，来减少YGC发生的次数，但有时我们发现，虽然次数减少了，但Eden区满</p><p>的时候，由于占用的空间较大，导致释放缓慢，此时STW的时间较长，因此需要按照程序情况去调优。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>-XXSurvivorRatio=3，表示年轻代中的分配比率：survivor:eden = 2:3</span></span></code></pre></div><p>3）年轻代和老年代默认比例为1：2。可以通过调整二者空间大小比率来设置两者的大小。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>-XX:newSize   设置年轻代的初始大小</span></span>
<span class="line"><span>-XX:MaxNewSize   设置年轻代的最大大小，  初始大小和最大大小两个值通常相同</span></span></code></pre></div><p>4）线程堆栈的设置：<strong>每个线程默认会开启1M的堆栈</strong>，用于存放栈帧、调用参数、局部变量等，但一般256K就够用。通常减少每个线程的堆栈，可以产生更多的线程，但这实际上还受限于操作系统。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>-Xss   对每个线程stack大小的调整,-Xss128k</span></span></code></pre></div><p>5）一般来说，当survivor区不够大或者占用量达到50%，就会把一些对象放到老年区。通过设置合理的eden区，survivor区及使用率，可以将年轻对象保存在年轻代，从而避免full GC，使用-Xmn设置年轻代的大小</p><p>6）系统CPU持续飙高的话，首先先排查代码问题，如果代码没问题，则咨询运维或者云服务器供应商，通常服务器重启或者服务器迁移即可解决。</p><p>7）对于占用内存比较多的大对象，一般会选择在老年代分配内存。如果在年轻代给大对象分配内存，年轻代内存不够了，就要在eden区移动大量对象到老年代，然后这些移动的对象可能很快消亡，因此导致full GC。通过设置参数：-XX:PetenureSizeThreshold=1000000，单位为B，标明对象大小超过1M时，在老年代(tenured)分配内存空间。</p><p>8）一般情况下，年轻对象放在eden区，当第一次GC后，如果对象还存活，放到survivor区，此后，每GC一次，年龄增加1，当对象的年龄达到阈值，就被放到tenured老年区。这个阈值可以同构-XX:MaxTenuringThreshold设置。如果想让对象留在年轻代，可以设置比较大的阈值。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>（1）-XX:+UseParallelGC:年轻代使用并行垃圾回收收集器。这是一个关注吞吐量的收集器，可以尽可能的减少垃圾回收时间。</span></span>
<span class="line"><span></span></span>
<span class="line"><span>（2）-XX:+UseParallelOldGC:设置老年代使用并行垃圾回收收集器。</span></span></code></pre></div><p>9）尝试使用大的内存分页：使用大的内存分页增加CPU的内存寻址能力，从而系统的性能。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>-XX:+LargePageSizeInBytes 设置内存页的大小</span></span></code></pre></div><p>10）使用非占用的垃圾收集器。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>-XX:+UseConcMarkSweepGC老年代使用CMS收集器降低停顿。</span></span></code></pre></div><h3 id="说一下-jvm-调优的工具" tabindex="-1">说一下 JVM 调优的工具？ <a class="header-anchor" href="#说一下-jvm-调优的工具" aria-label="Permalink to &quot;说一下 JVM 调优的工具？&quot;">​</a></h3><blockquote><p>难易程度：☆☆☆☆</p><p>出现频率：☆☆☆☆</p></blockquote><h4 id="_4-3-1-命令工具" tabindex="-1">4.3.1 命令工具 <a class="header-anchor" href="#_4-3-1-命令工具" aria-label="Permalink to &quot;4.3.1 命令工具&quot;">​</a></h4><h5 id="_4-3-1-1-jps-java-process-status" tabindex="-1">4.3.1.1 jps（Java Process Status） <a class="header-anchor" href="#_4-3-1-1-jps-java-process-status" aria-label="Permalink to &quot;4.3.1.1 jps（Java Process Status）&quot;">​</a></h5><p>输出JVM中运行的进程状态信息(现在一般使用jconsole)</p><p><img src="https://mugrain.oss-cn-hangzhou.aliyuncs.com/cswiki/image-20220904104739581.png" alt="image-20220904104739581" loading="lazy"></p><h5 id="_4-3-1-2-jstack" tabindex="-1">4.3.1.2 jstack <a class="header-anchor" href="#_4-3-1-2-jstack" aria-label="Permalink to &quot;4.3.1.2 jstack&quot;">​</a></h5><p>查看java进程内<strong>线程的堆栈</strong>信息。</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">jstack</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [option] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">pid</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre></div><p>java案例</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">package</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> com.heima.jvm;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Application</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">throws</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> InterruptedException {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            Thread.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sleep</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;哈哈哈&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>使用jstack查看进行堆栈运行信息</p><p><img src="https://mugrain.oss-cn-hangzhou.aliyuncs.com/cswiki/image-20220904111059602.png" alt="image-20220904111059602" loading="lazy"></p><h5 id="_4-3-1-3-jmap" tabindex="-1">4.3.1.3 jmap <a class="header-anchor" href="#_4-3-1-3-jmap" aria-label="Permalink to &quot;4.3.1.3 jmap&quot;">​</a></h5><p>用于生成堆转存快照</p><blockquote><p>jmap [options] pid 内存映像信息</p><p>jmap -heap pid 显示Java堆的信息</p><p>jmap -dump:format=b,file=heap.hprof pid</p><p>​ format=b表示以hprof二进制格式转储Java堆的内存 ​ file=<code>&lt;filename&gt;</code>用于指定快照dump文件的文件名。</p></blockquote><p>例：显示了某一个java运行的堆信息</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">C</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">\\Users\\yuhon</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">jmap </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">heap </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">53280</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Attaching to process ID </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">53280</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, please wait...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Debugger attached successfully.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Server compiler detected.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">JVM version is </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">25.321</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">b07</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">using thread</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">local object allocation.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Parallel GC with </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> thread</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(s)   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//并行的垃圾回收器</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Heap Configuration</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  //堆配置</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   MinHeapFreeRatio         </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   //空闲堆空间的最小百分比</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   MaxHeapFreeRatio         </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 100</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  //空闲堆空间的最大百分比</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   MaxHeapSize              </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 8524922880</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (8130.</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">0MB</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//堆空间允许的最大值</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   NewSize                  </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 178257920</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (170.</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">0MB</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//新生代堆空间的默认值</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   MaxNewSize               </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2841640960</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (2710.</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">0MB</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//新生代堆空间允许的最大值</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   OldSize                  </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 356515840</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (340.</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">0MB</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//老年代堆空间的默认值</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   NewRatio                 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> //新生代与老年代的堆空间比值，表示新生代：老年代=1：2</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   SurvivorRatio            </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 8</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> //两个Survivor区和Eden区的堆空间比值为8,表示S0:S1:Eden=1:1:8</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   MetaspaceSize            </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 21807104</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (20.</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">796875MB</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//元空间的默认值</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   CompressedClassSpaceSize </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1073741824</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (1024.</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">0MB</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//压缩类使用空间大小</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   MaxMetaspaceSize         </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 17592186044415</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MB </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//元空间允许的最大值</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   G1HeapRegionSize         </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (0.</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">0MB</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//在使用 G1 垃圾回收算法时，JVM 会将 Heap 空间分隔为若干个 Region，该参数用来指定每个 Region 空间的大小。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Heap Usage</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">PS Young Generation</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Eden Space</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> //Eden使用情况</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   capacity </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 134217728</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (128.</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">0MB</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   used     </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10737496</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (10.</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">240074157714844MB</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   free     </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 123480232</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (117.</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">75992584228516MB</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">   8.000057935714722</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> used</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">From Space</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> //Survivor-From 使用情况</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   capacity </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 22020096</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (21.</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">0MB</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   used     </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (0.</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">0MB</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   free     </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 22020096</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (21.</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">0MB</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">   0.0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> used</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">To Space</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> //Survivor-To 使用情况</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   capacity </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 22020096</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (21.</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">0MB</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   used     </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (0.</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">0MB</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   free     </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 22020096</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (21.</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">0MB</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">   0.0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> used</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">PS Old Generation  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//老年代 使用情况</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   capacity </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 356515840</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (340.</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">0MB</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   used     </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (0.</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">0MB</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   free     </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 356515840</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (340.</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">0MB</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">   0.0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> used</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3185</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> interned Strings occupying </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">261264</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> bytes.</span></span></code></pre></div><h5 id="_4-3-1-4-jhat" tabindex="-1">4.3.1.4 jhat <a class="header-anchor" href="#_4-3-1-4-jhat" aria-label="Permalink to &quot;4.3.1.4 jhat&quot;">​</a></h5><p>用于分析jmap生成的堆转存快照（一般不推荐使用，而是使用Ecplise Memory Analyzer）</p><h5 id="_4-3-1-5-jstat" tabindex="-1">4.3.1.5 jstat <a class="header-anchor" href="#_4-3-1-5-jstat" aria-label="Permalink to &quot;4.3.1.5 jstat&quot;">​</a></h5><p>是JVM统计监测工具。可以用来显示垃圾回收信息、类加载信息、新生代统计信息等。</p><p><strong>常见参数</strong>：</p><p>①总结垃圾回收统计</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">jstat</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -gcutil</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pid</span></span></code></pre></div><p><img src="https://mugrain.oss-cn-hangzhou.aliyuncs.com/cswiki/image-20220904114511854.png" alt="image-20220904114511854" loading="lazy"></p><table><thead><tr><th>字段</th><th>含义</th></tr></thead><tbody><tr><td><code>S0</code></td><td>幸存1区当前使用比例</td></tr><tr><td><code>S1</code></td><td>幸存2区当前使用比例</td></tr><tr><td><code>E</code></td><td>伊甸园区使用比例</td></tr><tr><td><code>O</code></td><td>老年代使用比例</td></tr><tr><td><code>M</code></td><td>元数据区使用比例</td></tr><tr><td><code>CCS</code></td><td>压缩使用比例</td></tr><tr><td><code>YGC</code></td><td>年轻代垃圾回收次数</td></tr><tr><td><code>YGCT</code></td><td>年轻代垃圾回收消耗时间</td></tr><tr><td><code>FGC</code></td><td>老年代垃圾回收次数</td></tr><tr><td><code>FGCT</code></td><td>老年代垃圾回收消耗时间</td></tr><tr><td><code>GCT</code></td><td>垃圾回收消耗总时间</td></tr></tbody></table><p>②垃圾回收统计</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">jstat</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -gc</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pid</span></span></code></pre></div><p><img src="https://mugrain.oss-cn-hangzhou.aliyuncs.com/cswiki/image-20220904115157363.png" alt="image-20220904115157363" loading="lazy"></p><h4 id="_4-3-2-可视化工具" tabindex="-1">4.3.2 可视化工具 <a class="header-anchor" href="#_4-3-2-可视化工具" aria-label="Permalink to &quot;4.3.2 可视化工具&quot;">​</a></h4><h5 id="_4-3-2-1-jconsole" tabindex="-1">4.3.2.1 jconsole <a class="header-anchor" href="#_4-3-2-1-jconsole" aria-label="Permalink to &quot;4.3.2.1 jconsole&quot;">​</a></h5><p>用于对jvm的内存，线程，类 的监控，是一个基于 jmx 的 GUI 性能监控工具</p><p>打开方式：java 安装目录 bin目录下 直接启动 jconsole.exe 就行</p><p><img src="https://mugrain.oss-cn-hangzhou.aliyuncs.com/cswiki/image-20220904115936095.png" alt="image-20220904115936095" loading="lazy"></p><p>可以内存、线程、类等信息</p><p><img src="https://mugrain.oss-cn-hangzhou.aliyuncs.com/cswiki/image-20220904120057211.png" alt="image-20220904120057211" loading="lazy"></p><h5 id="_4-3-2-2-visualvm-故障处理工具" tabindex="-1">4.3.2.2 VisualVM：故障处理工具 <a class="header-anchor" href="#_4-3-2-2-visualvm-故障处理工具" aria-label="Permalink to &quot;4.3.2.2 VisualVM：故障处理工具&quot;">​</a></h5><p>能够监控线程，内存情况，查看方法的CPU时间和内存中的对 象，已被GC的对象，反向查看分配的堆栈</p><p>打开方式：java 安装目录 bin目录下 直接启动 jvisualvm.exe就行</p><p><img src="https://mugrain.oss-cn-hangzhou.aliyuncs.com/cswiki/image-20220904120356174.png" alt="image-20220904120356174" loading="lazy"></p><p>监控程序运行情况</p><p><img src="https://mugrain.oss-cn-hangzhou.aliyuncs.com/cswiki/image-20220904132011289.png" alt="image-20220904132011289" loading="lazy"></p><p>查看运行中的dump</p><p><img src="https://mugrain.oss-cn-hangzhou.aliyuncs.com/cswiki/image-20220904132134095.png" alt="image-20220904132134095" loading="lazy"></p><p>查看堆中的信息</p><p><img src="https://mugrain.oss-cn-hangzhou.aliyuncs.com/cswiki/image-20220904132346495.png" alt="image-20220904132346495" loading="lazy"></p><p>总结</p><p><img src="https://mugrain.oss-cn-hangzhou.aliyuncs.com/cswiki/image-20240101131051073.png" alt="image-20240101131051073" loading="lazy"></p><h3 id="java-内存泄露的排查思路" tabindex="-1">Java 内存泄露的排查思路？ <a class="header-anchor" href="#java-内存泄露的排查思路" aria-label="Permalink to &quot;Java 内存泄露的排查思路？&quot;">​</a></h3><blockquote><p>难易程度：☆☆☆☆</p><p>出现频率：☆☆☆☆</p></blockquote><p>原因：</p><p>如果线程请求分配的栈容量超过java虚拟机栈允许的最大容量的时候，java虚拟机将抛出一个StackOverFlowError异常</p><p>如果java虚拟机栈可以动态拓展，并且扩展的动作已经尝试过，但是目前无法申请到足够的内存去完成拓展，或者在建立新线程的时候没有足够的内存去创建对应的虚拟机栈，那java虚拟机将会抛出一个OutOfMemoryError异常</p><p>如果一次加载的类太多，元空间内存不足，则会报OutOfMemoryError: Metaspace</p><p><img src="https://mugrain.oss-cn-hangzhou.aliyuncs.com/cswiki/image-20230506155704119.png" alt="image-20230506155704119" loading="lazy"></p><p>1、通过jmap指定打印他的内存快照 dump</p><blockquote><p>有的情况是内存溢出之后程序则会直接中断，而jmap只能打印在运行中的程序，所以建议通过参数的方式的生成dump文件，配置如下：</p><p>-XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/home/app/dumps/ 指定生成后文件的保存目录</p></blockquote><p>2、通过工具， VisualVM（Ecplise MAT）去分析 dump文件</p><p>VisualVM可以加载离线的dump文件，如下图</p><p>文件--&gt;装入---&gt;选择dump文件即可查看堆快照信息</p><blockquote><p>如果是linux系统中的程序，则需要把dump文件下载到本地（windows环境）下，打开VisualVM工具分析。VisualVM目前只支持在windows环境下运行可视化</p></blockquote><p><img src="https://mugrain.oss-cn-hangzhou.aliyuncs.com/cswiki/image-20220904132925812.png" alt="image-20220904132925812" loading="lazy"></p><p>3、通过查看堆信息的情况，可以大概定位内存溢出是哪行代码出了问题</p><p><img src="https://mugrain.oss-cn-hangzhou.aliyuncs.com/cswiki/image-20220904133722905.png" alt="image-20220904133722905" loading="lazy"></p><p>4、找到对应的代码，通过阅读上下文的情况，进行修复即可</p><h3 id="cpu飙高排查方案与思路" tabindex="-1">CPU飙高排查方案与思路？ <a class="header-anchor" href="#cpu飙高排查方案与思路" aria-label="Permalink to &quot;CPU飙高排查方案与思路？&quot;">​</a></h3><blockquote><p>难易程度：☆☆☆☆</p><p>出现频率：☆☆☆☆</p></blockquote><p>1.使用top命令查看占用cpu的情况</p><p><img src="https://mugrain.oss-cn-hangzhou.aliyuncs.com/cswiki/image-20220904161818255.png" alt="image-20220904161818255" loading="lazy"></p><p>2.通过top命令查看后，可以查看是哪一个进程占用cpu较高，上图所示的进程为：30978</p><p>3.查看当前线程中的进程信息</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ps</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> H -eo pid,tid,%cpu </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> grep</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 40940</span></span></code></pre></div><blockquote><p>pid 进行id</p><p>tid 进程中的线程id</p><p>% cpu使用率</p></blockquote><p><img src="https://mugrain.oss-cn-hangzhou.aliyuncs.com/cswiki/image-20220904162117022.png" alt="image-20220904162117022" loading="lazy"></p><p>4.通过上图分析，在进程30978中的线程30979占用cpu较高</p><blockquote><p>注意：上述的线程id是一个十进制，我们需要把这个线程id转换为16进制才行，因为通常在日志中展示的都是16进制的线程id名称</p><p>转换方式：</p><p>在linux中执行命令</p><p><code>printf &quot;%x\\n&quot; 30979</code></p><p><img src="https://mugrain.oss-cn-hangzhou.aliyuncs.com/cswiki/image-20220904162654928.png" alt="image-20220904162654928" loading="lazy"></p></blockquote><p>5.可以根据线程 id 找到有问题的线程，进一步定位到问题代码的源码行号</p><p>执行命令</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">jstack</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 30978</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   此处是进程id</span></span></code></pre></div><p><img src="https://mugrain.oss-cn-hangzhou.aliyuncs.com/cswiki/image-20220904162941977.png" alt="image-20220904162941977" loading="lazy"></p><blockquote><p><strong>面试官</strong>：JVM 调优的参数可以在哪里设置参数值？</p><p><strong>候选人:</strong></p><p>我们当时的项目是springboot项目，可以在项目启动的时候，java -jar中加入参数就行了</p><p><strong>面试官</strong>：用的 JVM 调优的参数都有哪些？</p><p><strong>候选人:</strong></p><p>嗯，这些参数是比较多的</p><p>我记得当时我们设置过堆的大小，像-Xms和-Xmx</p><p>还有就是可以设置年轻代中Eden区和两个Survivor区的大小比例</p><p>还有就是可以设置使用哪种垃圾回收器等等。具体的指令还真记不太清楚。</p><p><strong>面试官</strong>：嗯，好的，你们平时调试 JVM都用了哪些工具呢？</p><p><strong>候选人:</strong></p><p>嗯，我们一般都是使用jdk自带的一些工具，比如</p><p>jps 输出JVM中运行的进程状态信息</p><p>jstack查看java进程内<strong>线程的堆栈</strong>信息。</p><p>jmap 用于生成堆转存快照</p><p>jstat用于JVM统计监测工具</p><p>还有一些可视化工具，像jconsole和VisualVM等</p><p><strong>面试官</strong>：假如项目中产生了java内存泄露，你说一下你的排查思路？</p><p><strong>候选人:</strong></p><p>嗯，这个我在之前项目排查过</p><p>第一呢可以通过jmap指定打印他的内存快照 dump文件，不过有的情况打印不了，我们会设置vm参数让程序自动生成dump文件</p><p>第二，可以通过工具去分析 dump文件，jdk自带的VisualVM就可以分析</p><p>第三，通过查看堆信息的情况，可以大概定位内存溢出是哪行代码出了问题</p><p>第四，找到对应的代码，通过阅读上下文的情况，进行修复即可</p><p><strong>面试官</strong>：好的，那现在再来说一种情况，就是说服务器CPU持续飙高，你的排查方案与思路？</p><p><strong>候选人:</strong></p><p>嗯，我思考一下~~</p><p>可以这么做~~</p><p>第一可以使用使用top命令查看占用cpu的情况</p><p>第二通过top命令查看后，可以查看是哪一个进程占用cpu较高，记录这个进程id</p><p>第三可以通过ps 查看当前进程中的线程信息，看看哪个线程的cpu占用较高</p><p>第四可以jstack命令打印进行的id，找到这个线程，就可以进一步定位问题代码的行号</p></blockquote>`,525);function F(s,C,b,v,A,D){const t=n("ArticleMetadata"),h=n("ClientOnly");return p(),e("div",null,[u,r(h,null,{default:g(()=>{var i,a;return[(((i=s.$frontmatter)==null?void 0:i.aside)??!0)&&(((a=s.$frontmatter)==null?void 0:a.showArticleMetadata)??!0)?(p(),c(t,{key:0,article:s.$frontmatter},null,8,["article"])):E("",!0)]}),_:1}),m])}const j=k(y,[["render",F]]);export{f as __pageData,j as default};
