import{_ as c,E as s,c as u,J as p,w as a,b as e,a4 as E,m as h,a as k,V as r,o as l,e as y}from"./chunks/framework.syB9hai_.js";const I=JSON.parse('{"title":"数据库总结","description":"","frontmatter":{},"headers":[],"relativePath":"src/base/summarize/mysql.md","filePath":"src/base/summarize/mysql.md","lastUpdated":1730648753000}'),m={name:"src/base/summarize/mysql.md"},b=h("h1",{id:"数据库总结",tabindex:"-1"},[k("数据库总结 "),h("a",{class:"header-anchor",href:"#数据库总结","aria-label":'Permalink to "数据库总结"'},"​")],-1),F=r(`<p><a href="./">返回首页</a></p><ul><li>基础</li><li>架构 <ul><li>说一下MySQL体系结构</li><li>一条SQL是如何运行的</li><li>InnoDB 引擎与 MyISAM 引擎的区别</li><li>如何选择存储引擎</li></ul></li><li>索引 <ul><li>索引的底层数据结构了解过嘛 ?</li><li>B树和B+树的区别是什么呢？</li><li>什么是聚簇索引什么是非聚簇索引 ?</li><li>知道什么是回表查询嘛 ?</li><li>知道什么叫覆盖索引嘛 ?</li><li>什么情况下索引会失效 ?</li><li>索引创建原则有哪些？</li></ul></li><li>锁</li><li>InnoDB <ul><li>事务的特性是什么？可以详细说一下吗？</li><li>怎么解决这些问题呢？</li><li>MySQL的默认隔离级别是？</li><li>事务中的隔离性是如何保证的呢？(你解释一下MVCC)</li></ul></li><li>运维 <ul><li>主从同步原理</li><li>你们项目用过分库分表吗？</li><li>数据库如何优化？</li></ul></li></ul><p><a href="./../base/mysql/">MySQL入门到精通</a></p><h2 id="基础" tabindex="-1">基础 <a class="header-anchor" href="#基础" aria-label="Permalink to &quot;基础&quot;">​</a></h2><h2 id="架构" tabindex="-1">架构 <a class="header-anchor" href="#架构" aria-label="Permalink to &quot;架构&quot;">​</a></h2><h3 id="体系结构" tabindex="-1">体系结构 <a class="header-anchor" href="#体系结构" aria-label="Permalink to &quot;体系结构&quot;">​</a></h3><p>MySQL体系结构</p><p><img src="https://mugrain.oss-cn-hangzhou.aliyuncs.com/cswiki/image-20231218205626398.png" alt="image-20231218205626398" loading="lazy"></p><ol><li><p>连接层</p><p>最上层是一些客户端和链接服务，包含本地 sock 通信和大多数基于客户端/服务端工具实现的类似于 TCP/IP 的通信。主要完成一些类似于连接处理、授权认证、及相关的安全方案。在该层上引入了线程池的概念，为通过认证安全接入的客户端提供线程。同样在该层上可以实现基于 SSL 的安全链接。服务器也会为安全接入的每个客户端验证它所具有的操作权限。</p></li><li><p>服务层</p><p>第二层架构主要完成大多数的核心服务功能，如 SQL 接口，并完成缓存的查询，SQL的分析和优化，部分内置函数的执行。所有跨存储引擎的功能也在这一层实现，如过程、函数等。在该层，服务器会解析询并创建相应的内部解析树，并对其完成相应的优化如确定表的查询的顺序，是否利用索引等，最后生成相应的执行操作。如果是 Select 语句，服务器还会查询内部的缓存，如果缓存空间足够大，这样在解决大量读操作的环境中能够很好的提升系统的性能。</p></li><li><p>引擎层</p><p>存储引擎层，存储引擎真正的负责了MySQL中数据的存储和提取，服务器通过API和存储引擎进行通信。不同的存储引擎具有不同的功能，这样我们可以根据自己的需要，来选取合适的存储引擎。数据库中的索引是在存储引擎层实现的。</p></li><li><p>数据存储层</p><p>主要是将数据(如 : redolog、undolog、数据、索引、二进制日志、错误日志、查询日志、慢查询日志等)存储在文件系统之上，并完成与存储引擎的交互。</p></li></ol><br><div class="warning custom-block"><p class="custom-block-title">💡思考：说一下MySQL体系结构</p></div><br><h3 id="存储引擎" tabindex="-1">存储引擎 <a class="header-anchor" href="#存储引擎" aria-label="Permalink to &quot;存储引擎&quot;">​</a></h3><blockquote><p>思考：MySQL中有哪些常见的索引</p></blockquote><p>存储引擎就是存储数据、建立索引、更新/查询数据等技术的实现方式 。存储引擎是基于表的，而不是基于库的，所以存储引擎也可被称为表类型。</p><p><img src="https://mugrain.oss-cn-hangzhou.aliyuncs.com/cswiki/image-20231218205557460.png" alt="image-20231218205557460" loading="lazy"></p><br><p><strong>innodb</strong></p><p>介绍：</p><ul><li>InnoDB是一种兼顾高可靠性和高性能的通用存储引擎，在MySQL5.5之后作为MySQL默认存储引擎。</li></ul><p>特点：</p><ul><li>DML操作遵循ACID模型，支持事务。</li><li>行级锁，提高并发访问性能</li><li>支持外键约束，保证数据的完整性和正确性</li></ul><p>文件</p><ul><li>xxx.ibd：xxx代表的是表名，innoDB 引擎的每张表都会对应这样一个表空间文件，存储该表的表结构（frm、sdi）、数据和索引。</li><li>xxx.frm 存储表结构（MySQL8.0时，合并在表名.ibd中）</li></ul><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tb_sku.frm</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tb_sku.ibd</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">user_role.frm</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">user_role.ibd</span></span></code></pre></div><br><div class="warning custom-block"><p class="custom-block-title">💡思考：如何选择存储引擎？</p><ul><li>InnoDB：是 MySQL 的默认存储引擎，支持事务、外键。如果应用对事务的完整性有比较高的要求，在并发条件下要求数据的一致性，数据操作除了插入和查询之外，还包含很多的更新、删除操作，那么InnoDB存储引擎是比较合适的选择。</li><li>MyISAM：如果应用是以读操作和插入操作为主，只有很少的更新和删除操作，并且对事务的完整性、并发性要求不是很高，那么选择这个存储引擎是非常合适的。</li><li>Memory：将所有数据保存在内存中，访问速度快，通常用于临时表及缓存。 MEMORY的缺陷就是对表的大小有限制，太大的表无法缓存在内存中，而且无法保障数据的安全性。</li></ul><br><p>💡<strong>思考：InnoDB 引擎与 MyISAM 引擎的区别 ?</strong></p><ul><li><p>InnoDB引擎, 支持事务, 而MyISAM不支持。</p></li><li><p>InnoDB引擎, 支持行锁和表锁, 而MyISAM仅支持表锁, 不支持行锁。</p></li><li><p>InnoDB引擎, 支持外键, 而MyISAM是不支持的。</p></li></ul></div><h2 id="索引" tabindex="-1">索引 <a class="header-anchor" href="#索引" aria-label="Permalink to &quot;索引&quot;">​</a></h2><blockquote><p>面试官：什么是索引？了解过索引吗？</p></blockquote><p>索引（index）是帮助MySQL高效获取数据的数据结构(有序)。在数据之外，数据库系统还维护着满足特定查找算法的数据结构（B+树），这些数据结构以某种方式引用（指向）数据， 这样就可以在这些数据结构上实现高级查找算法，这种数据结构就是索引。</p><br><h3 id="数据结构" tabindex="-1">数据结构 <a class="header-anchor" href="#数据结构" aria-label="Permalink to &quot;数据结构&quot;">​</a></h3><blockquote><p>索引的底层数据结构了解过吗？</p></blockquote><p>MySQL默认使用的索引底层数据结构是B+树。再聊B+树之前，我们先聊聊二叉树和B树。</p><p><img src="https://mugrain.oss-cn-hangzhou.aliyuncs.com/cswiki/image-20231218211226599.png" alt="image-20231218211226599" loading="lazy"></p><br><p>B-Tree，B树是一种多叉路衡查找树，相对于二叉树，B树每个节点可以有多个分支，即多叉。以一颗最大度数（max-degree）为 5阶的 B-tree为例，那这个B树每个节点最多存储4个key。</p><p><img src="https://mugrain.oss-cn-hangzhou.aliyuncs.com/cswiki/image-20231218211301507.png" alt="image-20231218211301507" loading="lazy"></p><br><p>B+Tree 是在 B-Tree 基础上的一种优化，使其更适合实现外存储索引结构，InnoDB 存储引擎就是用B+Tree 实现其索引结构。</p><p><img src="https://mugrain.oss-cn-hangzhou.aliyuncs.com/cswiki/image-20231218211449931.png" alt="image-20231218211449931" loading="lazy"></p><br><p>B树与B+树对比:</p><ol><li>磁盘读写代价B+树更低；</li><li>查询效率B+树更加稳定；</li><li>B+树便于扫库和区间查询</li></ol><br><div class="warning custom-block"><p class="custom-block-title">💡思考：什么是索引？</p><ul><li>索引是帮助MySQL高效获取数据的数据结构</li><li>通过索引不需要进行全表扫描，提高数据检索的效率，降低数据IO成本</li><li>通过索引列对数据进行排序，降低数据排序的成本，降低CPU的消耗</li></ul><br><p>💡思考：索引的底层数据结构了解过嘛 ?</p><p>MySQL的默认的存储引擎 InnoDB 采用的 B+ 树的数据结构来存储索引，选择 B+ 树的主要的原因是：</p><ul><li>相对于二叉树，层级更少，搜索效率更高</li><li>相对于 B-Tree，B+Tree 磁盘读写效率更高，叶子节点存储数据，非叶子节点只存储指针。</li><li>相对于 Hash 索引，B+Tree 支持范围匹配及排序操作；</li></ul><br><p>💡思考：B-Tree 和 B+Tree 的区别是什么呢？</p><ul><li><p>在查询的时候，B+Tree 查找效率更加稳定。在 B-Tree 中，非叶子节点和叶子节点都会存放数据，而B+树的所有的数据都会出现在叶子节点，</p></li><li><p>在进行范围查询的时候，B+树效率更高，因为B+树都在叶子节点存储，并且叶子节点是一个双向链表。</p></li></ul></div><br><h3 id="索引分类" tabindex="-1">索引分类 <a class="header-anchor" href="#索引分类" aria-label="Permalink to &quot;索引分类&quot;">​</a></h3><p>在MySQL数据库，将索引的具体类型主要分为以下几类：主键索引、唯一索引、常规索引、全文索引。</p><table><thead><tr><th>分类</th><th>含义</th><th>特点</th><th>关键字</th></tr></thead><tbody><tr><td>主键索引</td><td>针对于表中主键创建的索引</td><td>默认自动创建 , 只能 有一个</td><td>PRIMARY</td></tr><tr><td>唯一索引</td><td>避免同一个表中某数据列中的值重复</td><td>可以有多个</td><td>UNIQUE</td></tr><tr><td>常规索引</td><td>快速定位特定数据</td><td>可以有多个</td><td></td></tr><tr><td>全文索引</td><td>全文索引查找的是文本中的关键词，而不是比 较索引中的值</td><td>可以有多个</td><td>FULLTEXT</td></tr></tbody></table><br><p>而在InnoDB存储引擎中，根据索引的存储形式，又可以分为以下两种：</p><table><thead><tr><th>分类</th><th>含义</th><th>特点</th></tr></thead><tbody><tr><td>聚集索引(ClusteredIndex)</td><td>将数据与索引一块存储，索引结构的叶子节点保存了行数据</td><td>必须有 ,而且只有一个</td></tr><tr><td>二级索引 (SecondaryIndex)</td><td>将数据与索引分开存储，索引结构的叶子节点保存了对应的主键</td><td>可以存在多个</td></tr></tbody></table><br><p>聚集索引选取规则:</p><ul><li>如果存在主键，主键索引就是聚集索引。</li><li>如果不存在主键，将使用第一个唯一索引作为聚集索引。</li><li>如果表没有主键，或没有合适的唯一索引，则InnoDB会自动生成一个rowid作为隐藏的聚集索引。</li></ul><br><p>聚簇索引和非聚簇索引</p><ul><li>聚集索引的叶子节点下挂的是这一行的数据</li><li>二级索引的叶子节点下挂的是该字段值对应的主键值</li></ul><p><img src="https://mugrain.oss-cn-hangzhou.aliyuncs.com/cswiki/image-20231219133044477.png" alt="image-20231219133044477" loading="lazy"></p><br><p>回表查询具体过程如下:</p><ol><li>由于是根据name字段进行查询，所以先根据name=&#39;Arm&#39;到name字段的二级索引中进行匹配查找。但是在二级索引中只能查找到 Arm 对应的主键值 10。</li><li>由于查询返回的数据是*，所以此时，还需要根据主键值10，到聚集索引中查找10对应的记录，最终找到10对应的行row。</li><li>最终拿到这一行的数据，直接返回即可。</li></ol><blockquote><p>回表查询：先到二级索引中查找数据，找到主键值，然后再到聚集索引中根据主键值，获取数据的方式</p></blockquote><p><img src="https://mugrain.oss-cn-hangzhou.aliyuncs.com/cswiki/image-20231219133125312.png" alt="image-20231219133125312" loading="lazy"></p><br><p>覆盖索引是指查询使用了索引，并且需要返回的列，在该索引中已经全部能够找到 。</p><p><img src="https://mugrain.oss-cn-hangzhou.aliyuncs.com/cswiki/image-20240204002649591.png" alt="image-20240204002649591" loading="lazy"></p><p>接下来，我们来分析一下，当我们执行如下的SQL语句时，具体的查找过程是什么样子的</p><p><img src="https://mugrain.oss-cn-hangzhou.aliyuncs.com/cswiki/image-20231219160928165.png" alt="image-20231219160928165" loading="lazy"></p><br><div class="warning custom-block"><p class="custom-block-title">💡思考：什么是聚簇索引什么是非聚簇索引 ?</p><ul><li>聚簇索引主要是指数据与索引放到一块，B+树的叶子节点保存了整行数据，有且只有一个，一般情况下主键在作为聚簇索引的</li><li>非聚簇索引值的是数据与索引分开存储，B+树的叶子节点保存对应的主键，可以有多个，一般我们自己定义的索引都是非聚簇索引</li></ul><br><p>💡 <strong>思考：知道什么是回表查询嘛 ?</strong></p><ul><li>通过二级索引找到对应的主键值，然后再通过主键值找到聚集索引中所对应的整行数据，这个过程就是回表</li></ul><br><p>💡<strong>思考：知道什么叫覆盖索引嘛 ?</strong></p><p>覆盖索引是指 select 查询语句使用了索引，并且返回的列能够在索引中全部找到</p><ul><li><p>如果我们使用 id 查询，它会直接走聚集索引查询，一次索引扫描，直接返回数据，性能高。</p></li><li><p>如果按照二级索引查询数据的时候，返回的列中没有创建索引，有可能会触发回表查询，尽量避免使用 select *，尽量在返回的列中都包含添加索引的字段</p></li></ul></div><br><h3 id="创建索引" tabindex="-1">创建索引 <a class="header-anchor" href="#创建索引" aria-label="Permalink to &quot;创建索引&quot;">​</a></h3><blockquote><p>面试官：索引创建的原则有哪些</p></blockquote><ul><li>先陈述自己工作中是怎么用的</li><li>主键索引，唯一索引，复合索引</li></ul><br><p>索引创建的原则有哪些</p><ol><li>针对于数据量较大，且查询比较频繁的表建立索引。</li><li>针对于常作为查询条件、排序、分组操作的字段建立索引。</li><li>尽量选择区分度高的列作为索引，尽量建立唯一索引，区分度越高，使用索引的效率越高。</li><li>如果是字符串类型的字段，字段的长度较长，可以针对于字段的特点，建立前缀索引。</li><li>尽量使用联合索引，减少单列索引，节省存储空间。查询时，联合索引很多时候可以走覆盖索引，避免回表，提高查询效率。</li><li>要控制索引的数量，索引并不是多多益善，索引越多，维护索引结构的代价也就越大，会影响增删改的效率。</li><li>如果索引列不能存储NULL值，请在创建表时使用NOT NULL约束它。当优化器知道每列是否包含NULL值时，它可以更好地确定哪个索引最有效地用于查询。</li></ol><br><h3 id="性能分析" tabindex="-1">性能分析 <a class="header-anchor" href="#性能分析" aria-label="Permalink to &quot;性能分析&quot;">​</a></h3><blockquote><p>思考：SQL语句执行很慢，如何分析？</p></blockquote><ul><li>聚合查询，多表查询，表数据量过大则通过SQL执行计划找到慢的原因。</li></ul><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 直接在select语句之前加上关键字  explain / desc </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">EXPLAIN </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 字段列表 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 表名 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">WHERE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 条件 ;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mysql</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  desc</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> select</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tb_user </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> \\G;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">***************************</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">. </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">row</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ***************************</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">           id: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  select_type: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SIMPLE</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        table</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: tb_user</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   partitions: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">NULL</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">         type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: const</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">possible_keys: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">PRIMARY</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">          key</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">PRIMARY</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      key_len: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          ref: const</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">         rows</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     filtered: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">00</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        Extra: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">NULL</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> row</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> in</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> warning (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">01</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sec)</span></span></code></pre></div><ul><li><code>type</code>：这条SQL的连接类型，性能由好到差为<code>null、system、const、eq_ref、ref、range、index、all</code><ul><li><code>system</code>:查询系统中的表</li><li><code>const</code>:根据主键查询</li><li><code>eq_ref</code>:主键索引查询或者唯一索引查询</li><li><code>ref</code>:索引查询</li><li><code>range</code>:范围查询</li><li><code>index</code>:索引树扫描</li><li><code>all</code>:全盘扫描</li></ul></li><li><code>possible_keys</code>:当前SQL可能会使用到的索引</li><li><code>key</code>:当前SQL实际命中的索引</li><li><code>key_len</code>:索引占用的大小 <ul><li>通过<code>key</code>和<code>key_len</code>查看是否可能会命中索引</li></ul></li><li><code>Extra</code>:额外的优化建议 <ul><li><code>Using where</code>：where条件，但是不能使用索引或者使用索引后仍需扫描全表或者索引树判断条件的情况，简单来说，有效的where条件就Using where。</li><li><code>Using Index</code>：查找使用了索引，需要的数据都在索引中能查到，不需要回表查询数据</li><li><code>Using filesort</code> : 通过表的索引或全表扫描，读取满足条件的数据行，然后在排序缓冲区sort buffer中完成排序操作，不是通过索引直接返回排序结果的排序都叫 FileSort 排序。</li><li><code>Using index condition</code>：查找使用了索引，但是需要回表查询。【索引条件下推】</li><li><code>Using temporary</code>：查找使用了临时表</li></ul></li></ul><br><div class="warning custom-block"><p class="custom-block-title">💡思考：SQL语句执行很慢，如何分析的方法</p><ul><li>通过 key 和 key_len 检查是否命中了索引（索引本身存在是否有失效的情况）</li><li>通过 type 字段查看 SQL 是否有进一步的优化空间，是否存在全索引扫描或全盘扫描</li><li>通过 extra 建议判断，是否出现了回表的情况，如果出现了，可以尝试添加索引或修改返回字段来修复</li></ul></div><br><h3 id="索引失效" tabindex="-1">索引失效 <a class="header-anchor" href="#索引失效" aria-label="Permalink to &quot;索引失效&quot;">​</a></h3><blockquote><p>面试官：什么情况下会索引失效？</p></blockquote><p>索引失效的情况有很多，可以说一些自己遇到过的，不要张口就得得得说一堆背诵好的面试题（适当的思考一下，回想一下，更真实）？</p><ul><li>违反最左前缀法则会造成索引失效。</li><li>联合索引中，出现范围查询(&gt;,&lt;)，范围查询后面的列索引失效。 在业务允许的情况下，尽可能的使用类似于 &gt;= 或 &lt;= 这类的范围查询，而避免使用 &gt; 或 &lt; 。</li><li>不要在索引列上进行运算操作，这会导致索引失效。</li><li>字符串不加单引号，造成索引失效。 <ul><li>由于在查询是没有对字符串加单引号， MySQL的查询优化器，会自动的进行类型转换，造成索引失效。</li></ul></li><li>or 连接的查询条件只有条件两边都有索引才生效。</li><li>避免使用 &lt;&gt; 或者 != 操作符。不等于操作符会导致查询引擎放弃查询索引，引起全表扫描 <ul><li>通过把不等于操作符改成 or，可以使用索引，避免全表扫描</li></ul></li><li>以%开头的Like模糊查询，索引失效。 <ul><li>如果仅仅是尾部模糊匹配，索引不会失效。如果是头部模糊匹配，索引失效。</li></ul></li><li>避免在where子句中对字段进行表达式操作和函数操作，会导致索引失效。</li></ul><br><h3 id="索引下推" tabindex="-1">索引下推 <a class="header-anchor" href="#索引下推" aria-label="Permalink to &quot;索引下推&quot;">​</a></h3><h2 id="锁" tabindex="-1">锁 <a class="header-anchor" href="#锁" aria-label="Permalink to &quot;锁&quot;">​</a></h2><blockquote><p>MySQL中有哪几种锁，列举一下？</p></blockquote>`,96),C=r(`<br><p>锁按照颗粒度划分有三种</p><ul><li>全局锁：锁定数据库中的所有表。</li><li>表级锁：每次操作锁住整张表。</li><li>行级锁：每次操作锁住对应的行数据。</li></ul><br><p>按照兼容性区分</p><ul><li>共享锁（S Lock），也叫读锁（read lock），相互不阻塞。</li><li>排他锁（X Lock），也叫写锁（write lock），排它锁是阻塞的，在一定时间内，只有一个请求能执行写入，并阻止其它锁读取正在写入的数据。</li></ul><br><p>按加锁机制区分</p><ul><li>悲观锁：悲观的认为数据随时有可能被改动。一个事务拿到悲观锁后，其他任何事物都不能对该数据进行修改，只能等待锁被释放才可以执行。 <ul><li>数据库中的表锁，行锁，共享锁，互斥锁均为悲观锁。</li></ul></li><li>乐观锁：乐观锁认为数据的变动不会太频繁。 <ul><li>在表中增加一个版本号，通常由开发者实现。</li></ul></li></ul><br><h3 id="全局锁" tabindex="-1">全局锁 <a class="header-anchor" href="#全局锁" aria-label="Permalink to &quot;全局锁&quot;">​</a></h3><p>全局锁就是对整个数据库实例加锁，加锁后整个实例就处于只读状态，后续的DML的写语句，DDL语句，已经更新操作的事务提交语句都将被阻塞。</p><p><strong>其典型的使用场景是做全库的逻辑备份</strong>，对所有的表进行锁定，从而获取一致性视图，保证数据的完整性。</p><br><p>数据库中加全局锁，是一个比较重的操作，存在以下问题：</p><ul><li>如果在主库上备份，那么在备份期间都不能执行更新，业务基本上就得停摆。</li><li>如果在从库上备份，那么在备份期间从库不能执行主库同步过来的二进制日志（binlog），会导致主从延迟。</li></ul><p>在InnoDB引擎中，我们可以在备份时加上参数 <code>--single-transaction</code> 参数来完成不加锁的一致性数据备份,通过快照读实现的。</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mysqldump </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">--single-transaction -uroot –p123456 itcast &gt; itcast.sql</span></span></code></pre></div><br><h3 id="表级锁" tabindex="-1">表级锁 <a class="header-anchor" href="#表级锁" aria-label="Permalink to &quot;表级锁&quot;">​</a></h3><blockquote><p>表级锁有哪些，实现哪些功能</p></blockquote><p>表级锁，每次操作锁住整张表。锁定粒度大，发生锁冲突的概率最高，并发度最低。应用在MyISAM、InnoDB、BDB等存储引擎中。</p><p>对于表级锁，主要分为以下三类：</p><ul><li>表锁</li><li>元数据锁</li><li>意向锁</li></ul><br><h4 id="表锁" tabindex="-1">表锁 <a class="header-anchor" href="#表锁" aria-label="Permalink to &quot;表锁&quot;">​</a></h4><p>每次操作锁住整张表。锁定粒度大，发生锁冲突的概率最高，并发度最低。应用在MyISAM、InnoDB存储引擎中。</p><p>表锁分为表共享锁和表互斥锁</p><br><p>表共享锁：<mark>只允许读，不允许写</mark></p><p><img src="https://mugrain.oss-cn-hangzhou.aliyuncs.com/cswiki/image-20231009163339081.png" alt="image-20231009163339081" loading="lazy"></p><p>左侧为客户端一，对指定表加了读锁，不会影响右侧客户端二的读，但是会阻塞右侧客户端的写。</p><br><p>表互斥锁：<mark>只允许一个客户端的读写</mark></p><p><img src="https://mugrain.oss-cn-hangzhou.aliyuncs.com/cswiki/image-20231009164035417.png" alt="image-20231009164035417" loading="lazy"></p><p>左侧为客户端一，对指定表加了写锁，会阻塞右侧客户端的读和写。</p><br><h4 id="元数据锁" tabindex="-1">元数据锁 <a class="header-anchor" href="#元数据锁" aria-label="Permalink to &quot;元数据锁&quot;">​</a></h4><p>meta data lock , 元数据锁，简写MDL。</p><p>MDL加锁过程是系统自动控制，无需显式使用，在访问一张表的时候会自动加上。MDL锁主要作用是维护表元数据的数据一致性，在表上有活动事务的时候，不可以对元数据进行写入操作。<strong>为了避免DML与DDL冲突</strong>，保证读写的正确性。</p><p>这里的元数据，大家可以简单理解为就是一张表的表结构。 也就是说，某一张表涉及到未提交的事务时，是不能够修改这张表的表结构的。</p><p>在MySQL5.5中引入了MDL，当对一张表进行增删改查的时候，加MDL读锁(共享)；当对表结构进行变更操作的时候，加MDL写锁(排他)。</p><br><h4 id="意向锁" tabindex="-1">意向锁 <a class="header-anchor" href="#意向锁" aria-label="Permalink to &quot;意向锁&quot;">​</a></h4><p>意向锁解决的是行锁和表锁的冲突问题。</p><p>为了避免 DML 在执行时，加的行锁与表锁的冲突，在 InnoDB 中引入了意向锁，使得表锁不用检查每行数据是否加锁，使用意向锁来减少表锁的检查。</p><br><p>假如没有意向锁，客户端一对表加了行锁后，客户端二如何给表加表锁呢，来通过示意图简单分析一下：首先客户端一，开启一个事务，然后执行DML操作，在执行DML语句时，会对涉及到的行加行锁。</p><p><img src="https://mugrain.oss-cn-hangzhou.aliyuncs.com/cswiki/image-20231009165925997.png" alt="image-20231009165925997" loading="lazy"></p><br><p>当客户端二，想对这张表加表锁时，会检查当前表是否有对应的行锁，如果没有，则添加表锁，此时就会从第一行数据，检查到最后一行数据，效率较低。</p><p><img src="https://mugrain.oss-cn-hangzhou.aliyuncs.com/cswiki/image-20231009165946914.png" alt="image-20231009165946914" loading="lazy"></p><br><p>有了意向锁之后 :客户端一，在执行DML操作时，会对涉及的行加行锁，同时也会对该表加上意向锁。</p><p><img src="https://mugrain.oss-cn-hangzhou.aliyuncs.com/cswiki/image-20231009170018187.png" alt="image-20231009170018187" loading="lazy"></p><br><p>而其他客户端，在对这张表加表锁的时候，会根据该表上所加的意向锁来判定是否可以成功加表锁，而不用逐行判断行锁情况了。</p><p><img src="https://mugrain.oss-cn-hangzhou.aliyuncs.com/cswiki/image-20231009170036223.png" alt="image-20231009170036223" loading="lazy"></p><br><p>意向锁分类：</p><ul><li>意向共享锁(IS): 由语句<code>select ... lock in share mode</code>添加 。 与表锁共享锁(read)兼容，与表锁排他锁(write)互斥。</li><li>意向排他锁(IX): 由<code>insert、update、delete、select...for update</code>添加 。与表锁共享锁(read)及排他锁(write)都互斥，意向锁之间不会互斥。</li></ul><blockquote><p>一旦事务提交了，意向共享锁、意向排他锁，都会自动释放。</p></blockquote><br><div class="warning custom-block"><p class="custom-block-title">💡思考：元数据锁是什么？</p><p><strong>元数据锁</strong> 主要是维护 <strong>表元数据</strong> 的一致性。当一张表进行增删改查的时候，加入 <strong>元数据共享锁</strong>，对表结构修改互斥；当对表结构进行变更的时候，加入 <strong>元数据排他锁</strong>，不让增删改查影响到数据变更，保证了数据读写的正确性。</p><br><p>💡<strong>思考：意向锁实现了什么功能？</strong></p><p>意向锁的出现是为了支持 InnoDB 的多粒度锁，解决的是表锁和行锁共存的问题。</p><p>为了避免 DML 在执行时，加的行锁与表锁的冲突，在 InnoDB 中引入了意向锁，使得表锁不用检查每行数据是否加锁，使用意向锁来减少表锁的检查。</p><ul><li>假如没有意向锁，那么我们就得遍历表中所有数据行来判断有没有行锁；</li><li>有了意向锁这个表级锁之后，则我们直接判断一次就知道表中是否有数据行被锁定了。</li></ul></div><br><h3 id="行级锁" tabindex="-1">行级锁 <a class="header-anchor" href="#行级锁" aria-label="Permalink to &quot;行级锁&quot;">​</a></h3><p>行级锁，每次操作锁住对应的行数据。锁定粒度最小，发生锁冲突的概率最低，并发度最高。应用在InnoDB存储引擎中。</p><p>InnoDB的数据是基于索引组织的，行锁是通过对索引上的索引项加锁来实现的，而不是对记录加的锁。对于行级锁，主要分为以下三类：</p><ul><li><p>行锁（Record Lock）：锁定单个行记录的锁，防止其他事务对此行进行 Update 和 Delete。在RC、RR隔离级别下都支持。</p><p><img src="https://mugrain.oss-cn-hangzhou.aliyuncs.com/cswiki/image-20231009170704468.png" alt="image-20231009170704468" loading="lazy"></p></li><li><p>间隙锁（Gap Lock）：锁定索引记录间隙（不含该记录），确保索引记录间隙不变，防止其他事务在这个间隙进行 Insert，产生幻读。在RR隔离级别下都支持。</p><p><img src="https://mugrain.oss-cn-hangzhou.aliyuncs.com/cswiki/image-20231009170712563.png" alt="image-20231009170712563" loading="lazy"></p></li><li><p>临键锁（Next-Key Lock）：行锁和间隙锁组合，同时锁住数据，并锁住数据前面的间隙Gap。 在RR隔离级别下支持。</p><p><img src="https://mugrain.oss-cn-hangzhou.aliyuncs.com/cswiki/image-20231009170734715.png" alt="image-20231009170734715" loading="lazy"></p><ul><li><p>举例：查询的条件为 <code>id&lt;=34</code></p><ul><li>如果34之后没有数据 ，则临键锁的范围为 <code>[-∞,34]</code></li><li>如果34之后有一个ID为25的数据，则临键锁的范围为 <code>[-∞,25]，(25,34]</code></li></ul></li><li><p>查询的条件为 <code>id &lt; 34</code></p><ul><li>如果34之后没有数据，则临键锁的范围为 <code>[-∞,34)</code></li><li>如果34之后有一个ID为25的数据，则临键锁的范围为 <code>[-∞,25]，(25,34)</code></li></ul></li></ul></li></ul><br><h4 id="行锁" tabindex="-1">行锁 <a class="header-anchor" href="#行锁" aria-label="Permalink to &quot;行锁&quot;">​</a></h4><p>InnoDB实现了以下两种类型的行锁：</p><ul><li>共享锁（S）：允许一个事务去读一行，阻止其他事务获得相同数据集的排它锁。</li><li>排他锁（X）：允许获取排他锁的事务更新数据，阻止其他事务获得相同数据集的共享锁和排他锁。</li></ul><p>两种行锁的兼容情况如下:</p><p><img src="https://mugrain.oss-cn-hangzhou.aliyuncs.com/cswiki/image-20231009171039349.png" alt="image-20231009171039349" loading="lazy"></p><p>常见的SQL语句，在执行时，所加的行锁如下：</p><table><thead><tr><th>SQL</th><th>行锁类型</th><th>说明</th></tr></thead><tbody><tr><td>INSERT ...</td><td>排他锁</td><td>自动加锁</td></tr><tr><td>UPDATE ...</td><td>排他锁</td><td>自动加锁</td></tr><tr><td>DELETE ...</td><td>排他锁</td><td>自动加锁</td></tr><tr><td>SELECT (正常)</td><td>不加任何锁</td><td></td></tr><tr><td>SELECT ... LOCK IN SHAREMODE</td><td>共享锁</td><td>需要手动在SELECT之后加LOCK IN SHAREMODE</td></tr><tr><td>SELECT ... FOR UPDATE</td><td>排他锁</td><td>需要手动在SELECT之后加FOR UPDATE</td></tr></tbody></table><br><p>默认情况下，InnoDB在 REPEATABLE READ事务隔离级别运行，InnoDB使用临键锁进行搜索和索引扫描，以防止幻读。</p><ul><li>针对唯一索引进行检索时，对已存在的记录进行等值匹配时，将会自动优化为行锁。</li><li>InnoDB的行锁是针对于索引加的锁，不通过索引条件检索数据，那么InnoDB将对表中的所有记录加锁，此时就会升级为表锁。</li></ul><br><h4 id="间隙锁-临键锁" tabindex="-1">间隙锁&amp;临键锁 <a class="header-anchor" href="#间隙锁-临键锁" aria-label="Permalink to &quot;间隙锁&amp;临键锁&quot;">​</a></h4><p>默认情况下，InnoDB在 REPEATABLE READ事务隔离级别运行，InnoDB使用临键锁进行搜索和索引扫描，以防止幻读。</p><ul><li>索引上的等值查询(唯一索引)，给不存在的记录加锁时, 优化为间隙锁 。</li><li>索引上的等值查询(非唯一普通索引)，向右遍历时最后一个值不满足查询需求时，临键锁退化为间隙锁。</li><li>索引上的范围查询(唯一索引)--会访问到不满足条件的第一个值为止。</li></ul><blockquote><p>注意：间隙锁唯一目的是防止其他事务插入间隙。间隙锁是通过插入间隙锁实现的共存，一个事务采用的间隙锁不会阻止另一个事务在同一间隙上采用间隙锁。</p></blockquote><br><div class="warning custom-block"><p class="custom-block-title">💡思考：InnoDB中行级锁是如何实现的。</p><ul><li><p>一个事务在查询，查询条件为大于等于19，如果有ID为19的数据，则会对19这条数据加行锁，大于19的数据如果没有，则会在没有的数据大于19的数据加入间隙锁。行锁加上间隙锁的集合就是临键锁。</p></li><li><p>当其他事物在查询的时候是不会阻塞的，执行DML语句不在临键锁范围内的数据也不会阻塞。但是当要修改ID为19这条数据或插入19以后的数据则会阻塞。只有当事务提交之后才可以执行。</p></li><li><p>如果ID为19的数据不存在，则会优化为间隙锁，如果查询不带条件，则会升级为表锁。</p></li></ul></div><h2 id="innodb" tabindex="-1">InnoDB <a class="header-anchor" href="#innodb" aria-label="Permalink to &quot;InnoDB&quot;">​</a></h2><h3 id="存储结构" tabindex="-1">存储结构 <a class="header-anchor" href="#存储结构" aria-label="Permalink to &quot;存储结构&quot;">​</a></h3><p>InnoDB的逻辑存储结构如下图所示：</p><p><img src="https://mugrain.oss-cn-hangzhou.aliyuncs.com/cswiki/image-20231009220004945.png" alt="image-20231009220004945" loading="lazy"></p><ol><li><p>表空间</p><p>表空间是InnoDB存储引擎逻辑结构的最高层， 如果用户启用了参数 innodb_file_per_table(在8.0版本中默认开启) ，则每张表都会有一个表空间（xxx.ibd），一个mysql实例可以对应多个表空间，用于存储记录、索引等数据。</p></li><li><p>段</p><p>段，分为数据段（Leaf node segment）、索引段（Non-leaf node segment）、回滚段(Rollback segment），InnoDB是索引组织表，数据段就是B+树的叶子节点， 索引段即为B+树的非叶子节点。段用来管理多个Extent（区）。</p></li><li><p>区</p><p>区，表空间的单元结构，每个区的大小为1M。 默认情况下， InnoDB存储引擎页大小为16K， 即一个区中一共有64个连续的页。</p></li><li><p>页</p><p>页，是InnoDB 存储引擎磁盘管理的最小单元，每个页的大小默认为 16KB。为了保证页的连续性，InnoDB 存储引擎每次从磁盘申请 4-5 个区。</p></li><li><p>行</p><p>行，InnoDB 存储引擎数据是按行进行存放的。在行中，默认有两个隐藏字段：</p><ul><li><p>Trx_id：每次对某条记录进行改动时，都会把对应的事务id赋值给trx_id隐藏列。</p></li><li><p>Roll_pointer：每次对某条引记录进行改动时，都会把旧的版本写入到undo日志中，然后这个隐藏列就相当于一个指针，可以通过它来找到该记录修改前的信息。</p></li></ul></li></ol><br><p>总结</p><p><img src="https://mugrain.oss-cn-hangzhou.aliyuncs.com/cswiki/image-20231009225239236.png" alt="image-20231009225239236" loading="lazy"></p><br><h3 id="事务特性" tabindex="-1">事务特性 <a class="header-anchor" href="#事务特性" aria-label="Permalink to &quot;事务特性&quot;">​</a></h3><blockquote><p>面试官：事务的特性是什么？可以详细说一下吗？</p></blockquote><p>事务是一组操作的集合，它是一个不可分割的工作单位，事务会把所有的操作作为一个整体一起向系统提交或撤销操作请求，即这些操作要么同时成功，要么同时失败。</p><ul><li>原子性（Atomicity）：事务是不可分割的最小操作单元，要么全部成功，要么全部失败。</li><li>一致性（Consistency）：事务完成时，必须使所有的数据都保持一致状态。</li><li>隔离性（Isolation）：数据库系统提供的隔离机制，保证事务在不受外部并发操作影响的独立环境下运行。</li><li>持久性（Durability）：事务一旦提交或回滚，它对数据库中的数据的改变就是永久的。</li></ul><br><div class="warning custom-block"><p class="custom-block-title">💡思考：事务的特性是什么？可以详细说一下吗？</p><p>ACID，分别指的是：原子性、一致性、隔离性、持久性；我举个例子：</p><ul><li><p>A向B转账500，转账成功，A扣除500元，B增加500元，原子操作体现在要么都成功，要么都失败</p></li><li><p>在转账的过程中，数据要一致，A扣除了500，B必须增加500</p></li><li><p>在转账的过程中，隔离性体现在A像B转账，不能受其他事务干扰</p></li><li><p>在转账的过程中，持久性体现在事务提交后，要把数据持久化（可以说是落盘操作）</p></li></ul><br><p>💡<strong>思考：事务的实现原理是什么？</strong></p><p><code>redo log</code>保证了事务的持久性，<code>undo log</code> 保证了事务的原子性和一致性，MVCC 和锁保证了事务的隔离性。</p></div><br><h3 id="隔离级别" tabindex="-1">隔离级别 <a class="header-anchor" href="#隔离级别" aria-label="Permalink to &quot;隔离级别&quot;">​</a></h3><blockquote><p>面试官：并发事务带来哪些问题？怎么解决这些问题呢？MySQL的默认隔离级别是？</p></blockquote><ul><li>并发事务问题：脏读、不可重复读、幻读</li><li>隔离级别：读未提交、读已提交、可重复读、串行化</li></ul><br><p><strong>事务并发问题</strong></p><p>脏读：一个事务读到另外一个事务还没有提交的数据。</p><p><img src="https://mugrain.oss-cn-hangzhou.aliyuncs.com/cswiki/image-20231220013450183.png" alt="image-20231220013450183" loading="lazy"></p><br><p>不可重复读：一个事务先后读取同一条记录，但两次读取的数据不同，称之为不可重复读。</p><p><img src="https://mugrain.oss-cn-hangzhou.aliyuncs.com/cswiki/image-20231220013559504.png" alt="image-20231220013559504" loading="lazy"></p><br><p>幻读：事务在还没提交之前第一次查询的数据和第二次查询的数据结果集不相同。</p><p><img src="https://mugrain.oss-cn-hangzhou.aliyuncs.com/cswiki/image-20231220013637040.png" alt="image-20231220013637040" loading="lazy"></p><br><p>如何解决并发事务问题呢？</p><p>解决方案：对事务进行隔离</p><p><img src="https://mugrain.oss-cn-hangzhou.aliyuncs.com/cswiki/image-20231220014247093.png" alt="image-20231220014247093" loading="lazy"></p><p>注意：事务隔离级别越高，数据越安全，但是性能越低。</p><br><div class="warning custom-block"><p class="custom-block-title">💡思考：并发事务带来哪些问题？</p><p>我们在项目开发中，多个事务并发进行是经常发生的，并发也是必然的，有可能导致一些问题</p><ul><li><p>第一是脏读， 当一个事务正在访问数据并且对数据进行了修改，而这种修改还没有提交到数据库中，这时另外一个事务也访问了这个数据，因为这个数据是还没有提交的数据，那么另外一个事务读到的这个数据是“脏数据”，依据“脏数据”所做的操作可能是不正确的。</p></li><li><p>第二是不可重复读：比如在一个事务内多次读同一数据。在这个事务还没有结束时，另一个事务也访问该数据。那么，在第一个事务中的两次读数据之间，由于第二个事务的修改导致第一个事务两次读取的数据可能不太一样。这就发生了在一个事务内两次读到的数据是不一样的情况，因此称为不可重复读。</p></li><li><p>第三是幻读（Phantom read）：幻读与不可重复读类似。它发生在一个事务（T1）读取了几行数据，接着另一个并发事务（T2）插入了一些数据时。在随后的查询中，第一个事务（T1）就会发现多了一些原本不存在的记录，就好像发生了幻觉一样，所以称为幻读。</p></li></ul><br><p>💡<strong>思考：怎么解决这些问题呢？</strong></p><p>解决方案是对事务进行隔离。MySQL支持四种隔离级别，分别有：</p><ul><li>第一个是，未提交读（read uncommitted）它解决不了刚才提出的所有问题，一般项目中也不用这个。</li><li>第二个是读已提交（read committed）它能解决脏读的问题的，但是解决不了不可重复读和幻读。</li><li>第三个是可重复读（repeatable read）它能解决脏读和不可重复读，但是解决不了幻读，这个也是mysql默认的隔离级别。</li><li>第四个是串行化（serializable）它可以解决刚才提出来的所有问题，但是由于让是事务串行执行的，性能比较低。</li><li>所以，我们一般使用的都是mysql默认的隔离级别:可重复读</li></ul></div><br><h3 id="事务原理" tabindex="-1">事务原理 <a class="header-anchor" href="#事务原理" aria-label="Permalink to &quot;事务原理&quot;">​</a></h3><blockquote><p>思考：那事务是如何实现的呢？</p></blockquote><p>那实际上，我们研究事务的原理，就是研究MySQL的InnoDB引擎是如何保证事务的这四大特性的。而对于这四大特性，实际上分为两个部分。 其中的原子性、一致性、持久化，实际上是由InnoDB中的两份日志来保证的，一份是redo log日志，一份是undo log日志。 而隔离性是通过数据库的锁，加上MVCC来保证的。</p><p><img src="https://mugrain.oss-cn-hangzhou.aliyuncs.com/cswiki/image-20231010145905547.png" alt="image-20231010145905547" loading="lazy"></p><p>我们在讲解事务原理的时候，主要就是来研究一下redolog，undolog以及MVCC。</p><br><h4 id="日志" tabindex="-1">日志 <a class="header-anchor" href="#日志" aria-label="Permalink to &quot;日志&quot;">​</a></h4><blockquote><p>思考：undo log 和redo log 区别</p></blockquote><p>要了解这两个日志的区别，我们需要先知道一些基本的概念</p><ul><li><p>缓冲池（buffer pool）：主内存中的一个区域，里面可以缓存磁盘上经常操作的真实数据，在执行增删改查操作时，先操作缓冲池中的数据（若缓冲池没有数据，则从磁盘加载并缓存），以一定频率刷新到磁盘，从而减少磁盘IO，加快处理速度。</p></li><li><p>数据页（page）：是InnoDB 存储引擎磁盘管理的最小单元，每个页的大小默认为 16KB。页中存储的是行数据。</p><p><img src="https://mugrain.oss-cn-hangzhou.aliyuncs.com/cswiki/image-20231220015312223.png" alt="" loading="lazy"></p></li><li><p>重做日志（redo log）：记录的是事务提交时数据页的物理修改，是用来实现事务的持久性。</p><ul><li><p>该日志文件由两部分组成：重做日志缓冲（redo log buffer）以及重做日志文件（redo log file）,前者是在内存中，后者在磁盘中。当事务提交之后会把所有修改信息都存到该日志文件中, 用于在刷新脏页到磁盘,发生错误时, 进行数据恢复使用。</p><p><img src="https://mugrain.oss-cn-hangzhou.aliyuncs.com/cswiki/image-20231220015511800.png" alt="image-20231220015511800" loading="lazy"></p></li></ul></li><li><p>回滚日志（undo log）：用于记录数据被修改前的信息 , 作用包含两个 : 提供回滚 和 MVCC(多版本并发控制) 。undo log和redo log记录物理日志不一样，它是逻辑日志。</p><ul><li>可以认为当delete一条记录时，undo log中会记录一条对应的insert记录，反之亦然，当update一条记录时，它记录一条对应相反的update记录。当执行rollback时，就可以从undo log中的逻辑记录读取到相应的内容并进行回滚。</li></ul></li></ul><br><h4 id="mvcc" tabindex="-1">MVCC <a class="header-anchor" href="#mvcc" aria-label="Permalink to &quot;MVCC&quot;">​</a></h4><blockquote><p>思考：MVCC是如何实现的？</p></blockquote><p>全称 Multi-Version Concurrency Control，多版本并发控制。指维护一个数据的多个版本，使得读写操作没有冲突。</p><p>MVCC的具体实现，主要依赖于数据库记录中的<mark>隐式字段、undo log日志、readView</mark></p><br><p><strong>隐藏字段</strong></p><p>记录中的隐藏字段</p><p><img src="https://mugrain.oss-cn-hangzhou.aliyuncs.com/cswiki/image-20231220021155541.png" alt="image-20231220021155541" loading="lazy"></p><br><p><strong>undo log</strong></p><p>会滚日志在insert、update、delete的时候产生的便于数据回滚的日志。</p><ul><li>当insert的时候，产生的undo log日志只在回滚时需要，在事务提交后，可被立即删除。</li><li>而update、delete的时候，产生的undo log日志不仅在回滚时需要，mvcc版本访问也需要，不会立即被删除。</li></ul><p>undo log 版本链：不同事务或相同事务对同一条记录进行修改，会导致该记录的undolog生成一条记录版本链表，链表的头部是最新的旧记录，链表尾部是最早的旧记录。</p><p><img src="https://mugrain.oss-cn-hangzhou.aliyuncs.com/cswiki/image-20231220022939865.png" alt="image-20231220022939865" loading="lazy"></p><br><p><strong>ReadView</strong></p><p>读视图是<mark>快照读</mark>SQL执行时MVCC提取数据的依据，记录并维护系统当前活跃的事务（未提交的）id。</p><ul><li>当前读：读取的是记录的<mark>最新版本</mark>，读取时还要保证其他并发事务不能修改当前记录，会对读取的记录进行加锁。对于我们日常的操作， <ul><li>如：select ... lock in share mode(共享锁)，select ... for update、update、insert、delete(排他锁)都是一种当前读。</li></ul></li><li>快照读：简单的select（不加锁）就是快照读，快照读，读取的是记录数据的可见版本，有可能是历史数据，不加锁，是非阻塞读。 <ul><li>Read Committed：每次select，都生成一个快照读。</li><li>Repeatable Read：开启事务后第一个select语句才是快照读的地方。</li></ul></li></ul><br><p>举例：</p><p>当前读：第一次和第二次查询的数据不同。读取的是最新版本，事务A的第二个Select读取的是事务B提交的事务。</p><p>快照读RC：其他事务提交后的数据。</p><p>快照读RR：每次查询都是第一次查询的数据。</p><p><img src="https://mugrain.oss-cn-hangzhou.aliyuncs.com/cswiki/image-20231220023905188.png" alt="image-20231220023905188" loading="lazy"></p><br><p>ReadView中包含了四个核心字段</p><table><thead><tr><th><strong>字段</strong></th><th><strong>含义</strong></th></tr></thead><tbody><tr><td>m_ids</td><td>当前活跃的事务ID集合</td></tr><tr><td>min_trx_id</td><td>最小活跃事务ID</td></tr><tr><td>max_trx_id</td><td>预分配事务ID，当前最大事务ID+1（因为事务ID是自增的）</td></tr><tr><td>creator_trx_id</td><td>ReadView创建者的事务ID</td></tr></tbody></table><br><p>数据访问规则</p><p><img src="https://mugrain.oss-cn-hangzhou.aliyuncs.com/cswiki/image-20231220024821973.png" alt="image-20231220024821973" loading="lazy"></p><br><p>不同的隔离级别，生成ReadView的时机不同：</p><ul><li>READ COMMITTED ：在事务中每一次执行快照读时生成ReadView。</li><li>REPEATABLE READ：仅在事务中第一次执行快照读时生成ReadView，后续复用该ReadView。</li></ul><p><img src="https://mugrain.oss-cn-hangzhou.aliyuncs.com/cswiki/image-20231220030120724.png" alt="image-20231220030120724" loading="lazy"></p><br><p>举例：在RC下数据读取规则。当前ReadView最终读取到的数据为事务ID为2的数据。</p><p><img src="https://mugrain.oss-cn-hangzhou.aliyuncs.com/cswiki/image-20231220030233615.png" alt="image-20231220030233615" loading="lazy"></p><br><p>当前ReadView最终读取到的数据为事务ID为3的数据。</p><p><img src="https://mugrain.oss-cn-hangzhou.aliyuncs.com/cswiki/image-20231220030422716.png" alt="image-20231220030422716" loading="lazy"></p><br><p>在RR隔离级别下，仅在事务中第一次执行快照读时生成ReadView，后续复用该ReadView。</p><p><img src="https://mugrain.oss-cn-hangzhou.aliyuncs.com/cswiki/image-20231220030518656.png" alt="image-20231220030518656" loading="lazy"></p><br><div class="warning custom-block"><p class="custom-block-title">💡思考：undo log和redo log的区别</p><ul><li>redo log 日志记录的是数据页的物理变化，服务宕机可用来同步数据</li><li>undo log 是逻辑日志，当事务回滚时，通过逆操作恢复原来的数据，比如我们删除一条数据的时候，就会在undo log日志文件中新增一条delete语句，如果发生回滚就执行逆操作；</li></ul><br><p>💡<strong>思考：事务中的隔离性是如何保证的呢？</strong></p><p><strong>事务的隔离性是由锁和 MVCC 实现的。</strong></p><ul><li><p>其中 mvcc 的意思是多版本并发控制。指维护一个数据的多个版本，使得读写操作没有冲突，它的底层实现主要是分为了三个部分，第一个是隐藏字段，第二个是undo log日志，第三个是readView读视图</p></li><li><p>隐藏字段是指：在mysql中给每个表都设置了隐藏字段，有一个是trx_id(事务id)，记录每一次操作的事务id，是自增的；另一个字段是roll_pointer(回滚指针)，指向上一个版本的事务版本记录地址</p></li><li><p>undo log主要的作用是记录回滚日志，存储老版本数据，在内部会形成一个版本链，在多个事务并行操作某一行记录，记录不同事务修改数据的版本，通过roll_pointer指针形成一个链表</p></li><li><p>readView解决的是一个事务查询选择版本的问题，在内部定义了一些匹配规则和当前的一些事务id判断该访问那个版本的数据，不同的隔离级别快照读是不一样的，最终的访问的结果不一样。如果是rc隔离级别，每一次执行快照读时生成ReadView，如果是rr隔离级别仅在事务中第一次执行快照读时生成ReadView，后续复用。</p></li></ul></div><h2 id="运维" tabindex="-1">运维 <a class="header-anchor" href="#运维" aria-label="Permalink to &quot;运维&quot;">​</a></h2><p>数据库日志</p><h3 id="慢查询定位" tabindex="-1">慢查询定位 <a class="header-anchor" href="#慢查询定位" aria-label="Permalink to &quot;慢查询定位&quot;">​</a></h3><blockquote><p>思考：MySQL中如何定位慢查询？</p></blockquote><ul><li>聚合查询</li><li>多表查询</li><li>表数据量过大查询</li><li>深度分页查询</li></ul><p>表象：页面加载过慢、接口压测响应时间过长（超过1秒）</p><br><p>方案一：开源工具</p><ul><li>调试工具：Arthas</li><li>运维工具：Prometheus、Skywalking</li></ul><p><img src="https://mugrain.oss-cn-hangzhou.aliyuncs.com/cswiki/image-20231218203515002.png" alt="image-20231218203515002" loading="lazy"></p><br><p>方案二：MySQL自带慢日志</p><p>慢查询日志记录了所有执行时间超过指定参数（long_query_time，单位：秒，默认10秒）的所有SQL语句的日志如果要开启慢查询日志，需要在MySQL的配置文件（/etc/my.cnf）中配置如下信息：</p><div class="language-properties vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">properties</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 开启MySQL慢日志查询开关</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">slow_query_log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=1</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 设置慢日志的时间为2秒，SQL语句执行时间超过2秒，就会视为慢查询，记录慢查询日志</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">long_query_time</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=2</span></span></code></pre></div><p>配置完毕之后，通过以下指令重新启动MySQL服务器进行测试，查看慢日志文件中记录的信息</p><p><code>/var/lib/mysql/localhost-slow.log</code></p><p><img src="https://mugrain.oss-cn-hangzhou.aliyuncs.com/cswiki/image-20231218203645312.png" alt="image-20231218203645312" loading="lazy"></p><br><p>回答如何定位慢查询的方法</p><ol><li>介绍当时生产问题的场景（我们当时的一个接口测试的时候非常的慢，压测的结果大概5秒钟）</li><li>我们系统中当时采用了运维工具（Skywalking），可以监测出哪个接口，最终以为SQL的问题</li><li>在mysql中开启了慢日志查询，我们设置的值就是2秒，一旦sql执行超过2秒就会记录到日志中（调试阶段）</li></ol><br><div class="warning custom-block"><p class="custom-block-title">💡思考：MySQL中，如何定位慢查询?</p><p>我们当时做压测的时候有的接口非常的慢，接口的响应时间超过了2秒以上，因为我们当时的系统部署了运维的监控系统Skywalking ，在展示的报表中可以看到是哪一个接口比较慢，并且可以分析这个接口哪部分比较慢，这里可以看到SQL的具体的执行时间，所以可以定位是哪个sql出了问题</p><p>如果，项目中没有这种运维的监控系统，其实在MySQL中也提供了慢日志查询的功能，可以在MySQL的系统配置文件中开启这个慢日志的功能，并且也可以设置SQL执行超过多少时间来记录到一个日志文件中，我记得上一个项目配置的是2秒，只要SQL执行的时间超过了2秒就会记录到日志文件中，我们就可以在日志文件找到执行比较慢的SQL了。</p></div><br><h3 id="sql优化" tabindex="-1">SQL优化 <a class="header-anchor" href="#sql优化" aria-label="Permalink to &quot;SQL优化&quot;">​</a></h3><blockquote><p>数据库中如何优化你的SQL？</p></blockquote><h4 id="插入优化" tabindex="-1">插入优化 <a class="header-anchor" href="#插入优化" aria-label="Permalink to &quot;插入优化&quot;">​</a></h4><p><strong>insert</strong></p><p>如果我们需要一次性往数据库表中插入多条记录，可以从以下三个方面进行优化。</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">insert into</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tb_test </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">values</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;tom&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">insert into</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tb_test </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">values</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;cat&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">insert into</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tb_test </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">values</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;jerry&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><br><p>优化方案一：批量插入数据</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Insert into</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tb_test </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">values</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Tom&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Cat&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Jerry&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><br><p>优化方案二：手动控制事务</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">start transaction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">insert into</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tb_test </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">values</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Tom&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Cat&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Jerry&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">insert into</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tb_test </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">values</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Tom&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Cat&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Jerry&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">insert into</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tb_test </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">values</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">7</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Tom&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Cat&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">9</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Jerry&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">commit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><br><p>优化方案三：主键顺序插入，性能要高于乱序插入。</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">主键乱序插入</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> : </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 9</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 21</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 88</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 4</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 15</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 89</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 7</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">主键顺序插入</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> : </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 4</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 7</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 8</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 9</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 15</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 21</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 88</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 89</span></span></code></pre></div><br><p><strong>批量insert</strong></p><p>如果一次性需要插入大批量数据(比如: 几百万的记录)，使用insert语句插入性能较低，此时可以使用MySQL数据库提供的load指令进行插入。</p><p>插入100w的记录，10几秒就完成了，性能很好。</p><br><h4 id="主键优化" tabindex="-1">主键优化 <a class="header-anchor" href="#主键优化" aria-label="Permalink to &quot;主键优化&quot;">​</a></h4><p>主键设计原则</p><ul><li>满足业务需求的情况下，尽量降低主键的长度。</li><li>插入数据时，尽量选择顺序插入，选择使用AUTO_INCREMENT自增主键。</li><li>尽量不要使用UUID做主键或者是其他自然主键，如身份证号，这会导致频繁的页分裂。</li><li>对删除的数据做逻辑删除，频繁的删除会导致页合并，可以对必要删除的数据做历史化。</li><li>业务操作时，避免对主键的修改。</li></ul><br><h4 id="排序优化" tabindex="-1">排序优化 <a class="header-anchor" href="#排序优化" aria-label="Permalink to &quot;排序优化&quot;">​</a></h4><p>排序优化原则</p><ul><li>根据排序字段建立合适的索引，多字段排序时，也遵循最左前缀法则。</li><li>尽量使用覆盖索引。</li><li>多字段排序, 一个升序一个降序，此时需要注意联合索引在创建时的规则（ASC/DESC）。</li><li>如果不可避免的出现filesort，大数据量排序时，可以适当增大排序缓冲区大小，sort_buffer_size(默认256k)。</li></ul><br><h4 id="分组优化" tabindex="-1">分组优化 <a class="header-anchor" href="#分组优化" aria-label="Permalink to &quot;分组优化&quot;">​</a></h4><p>在分组操作中，我们需要通过以下两点进行优化，以提升性能：</p><ul><li>在分组操作时，可以通过索引来提高效率。</li><li>分组操作时，索引的使用也是满足最左前缀法则的。</li></ul><br><h4 id="count优化" tabindex="-1">count优化 <a class="header-anchor" href="#count优化" aria-label="Permalink to &quot;count优化&quot;">​</a></h4><p>在之前的测试中，我们发现，如果数据量很大，在执行count操作时，是非常耗时的</p><ul><li>MyISAM 引擎把一个表的总行数存在了磁盘上，因此执行 count(*) 的时候会直接返回这个数，效率很高； 但是如果是带条件的count，MyISAM也慢。</li><li>InnoDB 引擎就麻烦了，它执行 count(*) 的时候，需要把数据一行一行地从引擎里面读出来，然后累积计数。</li></ul><p>如果说要大幅度提升InnoDB表的count效率，主要的优化思路：自己计数(可以借助于redis这样的数据库进行,但是如果是带条件的count又比较麻烦了)</p><br><p><strong>count用法</strong></p><p><code>count()</code> 是一个聚合函数，对于返回的结果集，一行行地判断，如果 count 函数的参数不是 NULL，累计值就加 1，否则不加，最后返回累计值。</p><ul><li><code>count(主键)</code>：InnoDB 引擎会遍历整张表，把每一行的 主键id 值都取出来，返回给服务层。 服务层拿到主键后，直接按行进行累加(主键不可能为null)。</li><li><code>count(字段)</code>：没有not null 约束 : InnoDB 引擎会遍历整张表把每一行的字段值都取出来，返回给服务层，服务层判断是否为null，不为null，计数累加。有not null 约束： InnoDB 引擎会遍历整张表把每一行的字段值都取出来，返 回给服务层，直接按行进行累加。</li><li><code>count(数字)</code>：InnoDB 引擎遍历整张表，但不取值。服务层对于返回的每一行，放一个数字“1” 进去，直接按行进行累加。</li><li><code>count(*)</code>：InnoDB引擎并不会把全部字段取出来，而是专门做了优化，不取值，服务层直接按行进行累加。</li></ul><blockquote><p>按照效率排序的话，count(字段) &lt; count(主键 id) &lt; count(1) ≈ count(*)，所以尽量使用 count(*)。</p></blockquote><br><h4 id="更新优化" tabindex="-1">更新优化 <a class="header-anchor" href="#更新优化" aria-label="Permalink to &quot;更新优化&quot;">​</a></h4><p>我们主要需要注意一下update语句执行时的注意事项。</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">update</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> course </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">set</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;javaEE&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> where</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ;</span></span></code></pre></div><p>当我们在执行删除的SQL语句时，会锁定id为1这一行的数据，然后事务提交之后，行锁释放。</p><br><p>但是当我们在执行如下SQL时。</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">update</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> course </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">set</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;SpringBoot&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> where</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;PHP&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ;</span></span></code></pre></div><p>当我们开启多个事务，在执行上述的SQL时，我们发现行锁升级为了表锁。 导致该update语句的性能大大降低。</p><blockquote><p>InnoDB的行锁是针对索引加的锁，不是针对记录加的锁 ,并且该索引不能失效，否则会从行锁升级为表锁 。</p></blockquote><br><h4 id="分页优化" tabindex="-1">分页优化 <a class="header-anchor" href="#分页优化" aria-label="Permalink to &quot;分页优化&quot;">​</a></h4><p>在数据量比较大时，如果进行limit分页查询，在查询时，越往后，分页查询效率越低。</p><p>我们一起来看看执行limit分页查询耗时对比：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mysql&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> select </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> from tb_sku limit </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">,10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">10</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rows in set </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">0.00</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sec</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mysql&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> select </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> from tb_sku limit </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">9000000</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">,10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">10</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rows in set </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">11.05</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sec</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>因为，当在进行分页查询时，如果执行 limit 9000000,10 ，此时需要MySQL排序前9000010 记录，仅仅返回 9000000 - 9000010 的记录，其他记录丢弃，查询排序的代价非常大 。</p><br><p>优化思路: 一般分页查询时，通过创建 <mark>覆盖索引</mark> 能够比较好地提高性能，可以通过<mark>覆盖索引</mark>加<mark>子查询</mark>形式进行优化。</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mysql</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> select</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tb_sku t,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">select</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tb_sku </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">order by</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">limit</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 9000000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) a</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> rows</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> in</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">90</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sec)</span></span></code></pre></div><br><div class="warning custom-block"><p class="custom-block-title">💡思考：MYSQL超大分页怎么处理 ?</p><p>超大分页一般都是在数据量比较大时，我们使用了limit分页查询，并且需要对数据进行排序，这个时候效率就很低，我们可以采用覆盖索引和子查询来解决，先分页查询数据的id字段，确定了id之后，再用子查询来过滤，只查询这个id列表中的数据就可以了，因为查询id的时候，走的覆盖索引，所以效率可以提升很多</p></div><h3 id="主从同步" tabindex="-1">主从同步 <a class="header-anchor" href="#主从同步" aria-label="Permalink to &quot;主从同步&quot;">​</a></h3><p>MySQL主从复制的核心就是二进制日志。</p><p>二进制日志（BINLOG）记录了所有的 DDL（数据定义语言）语句和 DML（数据操纵语言）语句，但不包括数据查询（SELECT、SHOW）语句。</p><p><img src="https://mugrain.oss-cn-hangzhou.aliyuncs.com/cswiki/image-20231220030627266.png" alt="image-20231220030627266" loading="lazy"></p><p>复制分成三步：</p><ol><li>Master 主库在事务提交时，会把数据变更记录在二进制日志文件 Binlog 中。</li><li>从库读取主库的二进制日志文件 Binlog ，写入到从库的中继日志 Relay Log 。</li><li>Slave 重做中继日志中的事件，将改变反映它自己的数据。</li></ol><br><div class="warning custom-block"><p class="custom-block-title">💡思考：MySQL主从同步原理</p><p>MySQL主从复制的核心就是二进制日志中的DDL 语句和 DML 语句，但是不包括 SELECT 和 SHOW 语句，它的步骤是这样的</p><ul><li>主库在事务提交时，会把数据变更记录在二进制日志文件Binlog中，并且创建一个Dump线程向从库推送Binlog</li><li>从库创建一个 IO线程接收 Binlog，并记录到Relay Log 中继日志中。</li><li>从库开启一个 SQL 线程读取 Relay log中继日志中的事件，完成数据的同步。</li></ul></div><br><h3 id="分库分表" tabindex="-1">分库分表 <a class="header-anchor" href="#分库分表" aria-label="Permalink to &quot;分库分表&quot;">​</a></h3><blockquote><p>面试官：你们项目用过分库分表吗</p></blockquote><p><img src="https://mugrain.oss-cn-hangzhou.aliyuncs.com/cswiki/image-20231220033052742.png" alt="image-20231220033052742" loading="lazy"></p><p>分库分表的时机：</p><ol><li>前提：项目业务数据逐渐增多，或业务发展比较迅速。单表数据量达到1000w或者20G以后</li><li>优化已经解决不了性能问题（主从读写分离、创建索引）</li><li>IO瓶颈（磁盘IO，网络IO），CPU瓶颈（聚合查询、连接数太多）</li></ol><br><p>拆分策略</p><p><img src="https://mugrain.oss-cn-hangzhou.aliyuncs.com/cswiki/image-20231220032859265.png" alt="image-20231220032859265" loading="lazy"></p><br><h4 id="垂直分库" tabindex="-1">垂直分库 <a class="header-anchor" href="#垂直分库" aria-label="Permalink to &quot;垂直分库&quot;">​</a></h4><p>以表为依据，根据业务将不同表拆分到不同库中。</p><p>特点：</p><ol><li>按业务对数据分级管理、维护、监控、扩展</li><li>在高并发下，提高磁盘IO和连接量和连接数</li></ol><p><img src="https://mugrain.oss-cn-hangzhou.aliyuncs.com/cswiki/image-20231220033520210.png" alt="image-20231220033520210" loading="lazy"></p><br><h4 id="垂直分表" tabindex="-1">垂直分表 <a class="header-anchor" href="#垂直分表" aria-label="Permalink to &quot;垂直分表&quot;">​</a></h4><p>以字段为依据，根据字段属性不同将不同字段拆分到不同表中</p><p>特点</p><ol><li>冷热数据分离</li><li>减少IO过渡争抢，两表互不影响</li></ol><p><img src="https://mugrain.oss-cn-hangzhou.aliyuncs.com/cswiki/image-20231220033745102.png" alt="image-20231220033745102" loading="lazy"></p><br><h4 id="水平分库" tabindex="-1">水平分库 <a class="header-anchor" href="#水平分库" aria-label="Permalink to &quot;水平分库&quot;">​</a></h4><p>将一个库的数据拆分到多个库中。</p><p>特点</p><ol><li>解决了单库大数据量，高并发的性能瓶颈问题</li><li>提高了系统的稳定性和可用性</li></ol><p><img src="https://mugrain.oss-cn-hangzhou.aliyuncs.com/cswiki/image-20231220034102516.png" alt="image-20231220034102516" loading="lazy"></p><br><h4 id="水平分表" tabindex="-1">水平分表 <a class="header-anchor" href="#水平分表" aria-label="Permalink to &quot;水平分表&quot;">​</a></h4><p>将一个表的数据分到多个表中（可以在同一个库中）</p><p>特点</p><ul><li>避免单一数据量过大而产生的性能问题；</li><li>避免IO争抢并减少锁表的几率；</li></ul><p><img src="https://mugrain.oss-cn-hangzhou.aliyuncs.com/cswiki/image-20231220034406719.png" alt="image-20231220034406719" loading="lazy"></p><br><p>新方法带来的新问题</p><p><img src="https://mugrain.oss-cn-hangzhou.aliyuncs.com/cswiki/image-20231220034614104.png" alt="image-20231220034614104" loading="lazy"></p><br><div class="warning custom-block"><p class="custom-block-title">💡思考：你们项目用过MySQL的分库分表吗？</p><p>项目背景 当项目业务数据逐渐增多，业务发展迅速，单表数据量达到1000w或20G以后，磁盘IO，网络IO，文件IO太多导致IO遇到瓶颈；聚合查询，连接数太多导致CPU遇到瓶颈，优化已经解决不了性能问题（主从读写分离，创建索引）。</p><p>拆分的策略</p><ul><li>垂直分库：以表为依据，根据不同业务将不同表拆分到不同库中，在高并发的情况下提升了磁盘IO和连接数。</li><li>垂直分表：以字段为依据，根据字段属性不同将不同字段拆分到不同表中，使冷热数据分离，减少IO过渡争抢，两表互不影响。</li><li>水平分库：将一个库的数据拆分到多个库中，解决了单库数据量大，高并发的性能瓶颈问题，提高了系统的稳定性和可用性。</li><li>水平分表：将一个表的数据拆分到多个表中，避免单一数据量过大而产生的性能问题，可以减少由于IO争抢导致锁表的几率。</li></ul><p>分库之后带来的问题：分布式事务一致性问题，跨界点关联问题，跨界点分页、排序函数，主键重复等问题。</p></div><br><h3 id="优化经验" tabindex="-1">优化经验 <a class="header-anchor" href="#优化经验" aria-label="Permalink to &quot;优化经验&quot;">​</a></h3><blockquote><p>思考：谈谈你对数据库的优化经验</p></blockquote><ul><li>表的设计优化</li><li>表的索引优化</li><li>SQL语句优化</li><li>主从复制、读写分离</li><li>分库分表</li></ul><br><p><strong>表的设计优化（参考阿里开发手册《嵩山版》）</strong></p><ol><li>比如设置合适的数值（tinyint int bigint），要根据实际情况选择</li><li>比如设置合适的字符串类型（char和varchar）char定长效率高，varchar可变长度，效率稍低</li></ol><br><p><strong>SQL语句优化</strong></p><ol><li><p>SQL语句优化SELECT语句务必指明字段名称（避免直接使用select * ），避免回表查询</p></li><li><p>SQL语句要避免造成索引失效的写法。</p><ul><li>联合索引如果出现范围查询<code>(&gt;,&lt;)</code>，则范围查询后面的索引列将会失效，尽可能的使用 <code>&lt;=</code> 或 <code> &gt;=</code>。</li><li>违反最左前缀法则会造成索引失效，最左前缀与联合索引顺序有关，与SQL条件编写的先后顺序无关。</li><li>不能再索引列上做运算操作，会造成索引失效。</li><li>不在字符串上加单引号，MySQL查询优化器会自动类型转换，造成索引失效。</li><li>避免使用 &lt;&gt; 或者 != 操作符。不等于操作符会导致查询引擎放弃查询索引，引起全表扫描。通过把不等于操作符改成 or，可以使用索引，避免全表扫描</li><li>如果仅仅是尾部模糊匹配，索引不会失效。如果是头部模糊匹配，索引失效。</li><li>避免在where子句中对字段进行表达式操作和函数操作，会导致索引失效。</li></ul></li><li><p>尽量用union all代替union，union会多一次过滤，效率低</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">select</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> t_user </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">union all</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">union</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">select</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> t_user </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5</span></span></code></pre></div></li><li><p>Join优化能用 inner join 就不用 left join right join，如必须使用一定要以小表为驱动，内连接会对两个表进行优化，优先把小表放到外边，把大表放到里边。left join 或 right join，不会重新调整顺序</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> j </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; j </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; j</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li></ol><br><p><strong>主从复制、读写分离</strong></p><p>如果数据库的使用场景读的操作比较多的时候，为了避免写的操作所造成的性能影响 可以采用读写分离的架构。读写分离解决的是，数据库的写入，影响了查询的效率。</p><p><img src="https://mugrain.oss-cn-hangzhou.aliyuncs.com/cswiki/image-20231219191318480.png" alt="image-20231219191318480" loading="lazy"></p><br><div class="warning custom-block"><p class="custom-block-title">💡思考：说说你对数据库优化的经验</p><p>数据库的优化可以考虑这几个方面，合理的表设计和字段、索引优化、SQL语句优化、读写分离，如果数据量超过2000w则可以考虑分库分表</p><br><p>💡<strong>思考：创建表的时候，你们是如何优化的呢？</strong></p><p>这个我们主要参考的阿里出的那个开发手册《嵩山版》，就比如，在定义字段的时候需要结合字段的内容来选择合适的类型，如果是数值的话，像tinyint、int 、bigint这些类型，要根据实际情况选择。如果是字符串类型，也是结合存储的内容来选择char和varchar或者text类型</p><br><p>💡<strong>思考：创建表的时候，你们是如何优化的呢？</strong></p><ul><li>针对于数据量较大，且查询比较频繁的表建立索引。</li><li>针对于常作为查询条件、排序、分组操作的字段建立索引。</li><li>尽量选择区分度高的列作为索引，尽量建立唯一索引，区分度越高，使用索引的效率越高。</li><li>如果是字符串类型的字段，字段的长度较长，可以针对于字段的特点，建立前缀索引。</li><li>尽量使用联合索引，减少单列索引，查询时，联合索引很多时候可以覆盖索引，节省存储空间，避免回表，提高查询效率。</li><li>要控制索引的数量，索引并不是多多益善，索引越多，维护索引结构的代价也就越大，会影响增删改的效率</li><li>如果索引列不能存储NULL值，请在创建表时使用NOT NULL约束它。当优化器知道每列是否包含NULL值时，它可以更好地确定哪个索引最有效地用于查询。</li></ul><br><p>💡<strong>思考：你平时对 SQL 语句做了哪些优化呢？</strong></p><ul><li><p>SQL语句优化SELECT语句务必指明字段名称（避免直接使用select * ），避免回表查询</p></li><li><p>SQL语句要避免造成索引失效的写法。</p><ul><li>联合索引如果出现范围查询<code>(&gt;,&lt;)</code>，则范围查询后面的索引列将会失效，尽可能的使用 <code>&lt;=</code> 或 <code> &gt;=</code>。</li><li>违反最左前缀法则会造成索引失效，最左前缀与联合索引顺序有关，与SQL条件编写的先后顺序无关。</li><li>不能再索引列上做运算操作，会造成索引失效。</li><li>不在字符串上加单引号，MySQL查询优化器会自动类型转换，造成索引失效。</li><li>避免使用 &lt;&gt; 或者 != 操作符。不等于操作符会导致查询引擎放弃查询索引，引起全表扫描。通过把不等于操作符改成 or，可以使用索引，避免全表扫描</li><li>如果仅仅是尾部模糊匹配，索引不会失效。如果是头部模糊匹配，索引失效。</li><li>避免在where子句中对字段进行表达式操作和函数操作，会导致索引失效。</li></ul></li><li><p>尽量用union all代替union，union会多一次过滤，效率低</p></li><li><p>Join优化能用 inner join 就不用 left join right join，如必须使用一定要以小表为驱动，内连接会对两个表进行优化，优先把小表放到外边，把大表放到里边。left join 或 right join，不会重新调整顺序。</p></li></ul></div>`,327);function B(i,D,A,q,L,S){const o=s("ArticleMetadata"),d=s("ClientOnly"),g=s("Mermaid");return l(),u("div",null,[b,p(d,null,{default:a(()=>{var t,n;return[(((t=i.$frontmatter)==null?void 0:t.aside)??!0)&&(((n=i.$frontmatter)==null?void 0:n.showArticleMetadata)??!0)?(l(),e(o,{key:0,article:i.$frontmatter},null,8,["article"])):y("",!0)]}),_:1}),F,(l(),e(E,null,{default:a(()=>[p(g,{id:"mermaid-955",class:"mermaid",graph:"mindmap%0A%20%20root((MySQL%E9%94%81))%0A%20%20%20%20%E9%94%81%E9%A2%97%E7%B2%92%E5%BA%A6%0A%20%20%20%20%20%20%E5%85%A8%E5%B1%80%E9%94%81%0A%20%20%20%20%20%20%E8%A1%A8%E7%BA%A7%E9%94%81%0A%20%20%20%20%20%20%09%E8%A1%A8%E9%94%81%0A%20%20%20%20%20%20%09%E5%85%83%E6%95%B0%E6%8D%AE%E9%94%81%0A%20%20%20%20%20%20%09%E6%84%8F%E5%90%91%E9%94%81%20%09%0A%20%20%20%20%20%20%E8%A1%8C%E7%BA%A7%E9%94%81%0A%20%20%20%20%20%20%20%20%E8%AE%B0%E5%BD%95%E9%94%81%0A%20%20%20%20%20%20%20%20%E9%97%B4%E9%9A%99%E9%94%81%0A%20%20%20%20%20%20%20%20%E4%B8%B4%E9%94%AE%E9%94%81%0A%20%20%20%20%E5%85%BC%E5%AE%B9%E6%80%A7%0A%20%20%20%20%09%E5%85%B1%E4%BA%AB%E9%94%81%0A%20%20%20%20%09%E4%BA%92%E6%96%A5%E9%94%81%0A%20%20%20%20%E9%94%81%E6%9C%BA%E5%88%B6%0A%20%20%20%20%20%20%E4%B9%90%E8%A7%82%E9%94%81%0A%20%20%20%20%20%20%E6%82%B2%E8%A7%82%E9%94%81%0A"})]),fallback:a(()=>[k(" Loading... ")]),_:1})),C])}const w=c(m,[["render",B]]);export{I as __pageData,w as default};
