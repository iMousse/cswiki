import{_ as e,E as t,c as n,m as s,J as l,w as p,a,V as h,o as c}from"./chunks/framework.syB9hai_.js";const F=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"src/base/juc/juc-apply-limit.md","filePath":"src/base/juc/juc-apply-limit.md","lastUpdated":1730648753000}'),r={name:"src/base/juc/juc-apply-limit.md"},k=s("p",null,[s("a",{href:"./"},"返回首页")],-1),o={id:"应用之限制",tabindex:"-1"},d=s("a",{class:"header-anchor",href:"#应用之限制","aria-label":'Permalink to "<font color="green">*应用之限制</font>"'},"​",-1),E=h(`<p>案例-防止CPU占用100%，通过sleep 实现</p><p>在没有利用 cpu 来计算时，不要让 while(true) 空转浪费 cpu，这时可以使用 yield 或 sleep 来让出 cpu 的使用权给其他程序</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        Thread.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sleep</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">50</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (InterruptedException </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        e.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">printStackTrace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="warning custom-block"><p class="custom-block-title">💡 提示</p><ul><li>可以用 <code>wait/nofity/nofifyAll</code> 或 <code>await/signal/signalAll</code> 达到类似的效果；</li><li>不同的是，<code>wait</code> 和 <code>await</code> 都需要加锁，并且需要相应的唤醒操作，一般适用于要进行同步的场景，sleep 适用于无需锁同步的场景，用来限制空转CPU</li></ul></div><br><h3 id="" tabindex="-1"><a class="header-anchor" href="#" aria-label="Permalink to &quot;&quot;">​</a></h3>`,6);function _(g,u,y,m,f,b){const i=t("font");return c(),n("div",null,[k,s("h4",o,[l(i,{color:"green"},{default:p(()=>[a("*应用之限制")]),_:1}),a(),d]),E])}const v=e(r,[["render",_]]);export{F as __pageData,v as default};
