import{_ as h,E as l,c as r,J as k,w as o,m as e,a as c,V as d,o as n,b as g,e as u}from"./chunks/framework.syB9hai_.js";const m="/cswiki/assets/image-20210731141907366.q3l-llZU.png",y="/cswiki/assets/image-20210731142219735.XmWNuP11.png",E="/cswiki/assets/image-20210731143401460.1Yap_SsJ.png",b="/cswiki/assets/image-20210731144304990.DE8X1mSY.png",F="/cswiki/assets/image-20210731144458680.j0VTljYl.png",v="/cswiki/assets/image-20210731144820638.kTzfXgds.png",C="/cswiki/assets/image-20210731145914960.xzxcBAXp.png",D="/cswiki/assets/image-20210731152243765.7r9T_RIf.png",_="/cswiki/assets/image-20210731153059464.w-BUIEIH.png",f="/cswiki/assets/image-20210731153743354.P7wQPuAl.png",q="/cswiki/assets/image-20210731154257653.1qKhhJGd.png",B="/cswiki/assets/image-20210731155141362.jP7MxqUU.png",A="/cswiki/assets/image-20210731155649535.RHrpXebE.png",x="/cswiki/assets/image-20210731155844368.-Qn2mJB0.png",j="/cswiki/assets/image-20210731155856199.oXhBFiRG.png",P="/cswiki/assets/image-20210731155903037.FYnvTJln.png",w="/cswiki/assets/image-20210731161104732.w2XKK7rH.png",z="/cswiki/assets/image-20210731161354344.UsYyDKyA.png",S="/cswiki/assets/image-20210731161746245.oLnX9hoc.png",O="/cswiki/assets/image-20210731161950495.t9sCuneZ.png",M="/cswiki/assets/image-20210731163255863.ZNQYzwKN.png",L="/cswiki/assets/image-20210731164159811.krRJVYJi.png",Q="/cswiki/assets/image-20210731164455818.o48MOhC5.png",R="/cswiki/assets/image-20210731164717604.hDpfEUof.png",N="/cswiki/assets/image-20210731172440275.aoqVWY0s.png",U="/cswiki/assets/image-20210731173541846.UrPIjbDA.png",T="/cswiki/assets/image-20210731173746910.QuqA3lNp.png",J="/cswiki/assets/image-20210731173809877.bl1Pbrd3.png",H="/cswiki/assets/image-20210731175155453.OrhUNfq5.png",I="/cswiki/assets/image-20210731175806273.Xl7_Hhks.png",V="/cswiki/assets/image-20210731180321133.C2v3mQij.png",Y="/cswiki/assets/image-20210801101207444.vuQuDk2z.png",W="/cswiki/assets/image-20210801101314816.ms8mMC4r.png",$="/cswiki/assets/image-20210801101410200.pWkyrMu5.png",X="/cswiki/assets/image-20210801101455590.ju51c5H-.png",K="/cswiki/assets/image-20240222174137274.Wk9qoUgj.png",G="/cswiki/assets/image-20210731181341330.2Gpmk7X1.png",Z="/cswiki/assets/image-20210801095205034.aWBQAQCe.png",ss="/cswiki/assets/image-20210801095320586.ZSOKThaj.png",is="/cswiki/assets/image-20210801095951030.oUyA4Ggl.png",as="/cswiki/assets/image-20210801100201253.1LkFPIJu.png",ls="/cswiki/assets/image-20210801100231495.PnYUpu1k.png",es="/cswiki/assets/image-20210801100308102.2nxjUev0.png",us=JSON.parse('{"title":"容器管理","description":"","frontmatter":{},"headers":[],"relativePath":"src/base/cloud/02实用篇-容器管理.md","filePath":"src/base/cloud/02实用篇-容器管理.md","lastUpdated":1730648753000}'),ns={name:"src/base/cloud/02实用篇-容器管理.md"},ps=e("h1",{id:"容器管理",tabindex:"-1"},[c("容器管理 "),e("a",{class:"header-anchor",href:"#容器管理","aria-label":'Permalink to "容器管理"'},"​")],-1),ts=d('<nav class="table-of-contents"><ul><li><a href="#容器管理">容器管理</a><ul><li><a href="#初识docker">初识Docker</a><ul><li><a href="#docker介绍">Docker介绍</a></li><li><a href="#docker架构">Docker架构</a><ul><li><a href="#docker镜像">Docker镜像</a></li><li><a href="#docker架构-1">Docker架构</a></li></ul></li><li><a href="#docker安装">Docker安装</a></li></ul></li><li><a href="#基本操作">基本操作</a><ul><li><a href="#镜像操作">镜像操作</a><ul><li><a href="#镜像命令">镜像命令</a></li><li><a href="#案例-拉取、查看镜像">案例-拉取、查看镜像</a></li><li><a href="#案例-保存、导入镜像">案例-保存、导入镜像</a></li></ul></li><li><a href="#容器操作">容器操作</a><ul><li><a href="#容器命令">容器命令</a></li><li><a href="#案例-创建并运行一个容器">案例-创建并运行一个容器</a></li><li><a href="#案例-进入容器内修改文件">案例-进入容器内修改文件</a></li></ul></li><li><a href="#数据卷">数据卷</a><ul><li><a href="#数据卷命令">数据卷命令</a></li><li><a href="#案例-给nginx挂载数据卷">案例-给Nginx挂载数据卷</a></li><li><a href="#案例-给mysql挂载本地目录">案例-给MySQL挂载本地目录</a></li></ul></li></ul></li><li><a href="#dockerfile">Dockerfile</a><ul><li><a href="#镜像结构">镜像结构</a></li><li><a href="#镜像语法">镜像语法</a></li><li><a href="#构建项目">构建项目</a><ul><li><a href="#基于ubuntu构建java项目">基于Ubuntu构建Java项目</a></li><li><a href="#基于java8构建java项目">基于Java8构建Java项目</a></li></ul></li></ul></li><li><a href="#dockercompose">DockerCompose</a><ul><li><a href="#安装dockercompose">安装DockerCompose</a></li><li><a href="#初识dockercompose">初识DockerCompose</a></li><li><a href="#部署微服务集群">* 部署微服务集群</a><ul><li><a href="#compose-文件">compose 文件</a></li><li><a href="#修改微服务配置">修改微服务配置</a></li><li><a href="#打包">打包</a></li><li><a href="#拷贝jar包到部署目录">拷贝jar包到部署目录</a></li><li><a href="#部署">部署</a></li></ul></li></ul></li></ul></li></ul></nav><h2 id="初识docker" tabindex="-1">初识Docker <a class="header-anchor" href="#初识docker" aria-label="Permalink to &quot;初识Docker&quot;">​</a></h2><h3 id="docker介绍" tabindex="-1">Docker介绍 <a class="header-anchor" href="#docker介绍" aria-label="Permalink to &quot;Docker介绍&quot;">​</a></h3><blockquote><p>💡思考：我们微服务是如何部署的？</p></blockquote><p>微服务虽然具备各种各样的优势，但服务的拆分通用给部署带来了很大的麻烦。</p><ul><li>分布式系统中，依赖的组件非常多，不同组件之间部署时往往会产生一些冲突。</li><li>在数百上千台服务中重复部署，环境不一定一致，会遇到各种问题</li></ul><br><blockquote><p>💡思考：我们平时应用部署的环境遇到过哪些问题？</p></blockquote><p>大型项目组件较多，运行环境也较为复杂，部署时会碰到一些问题：</p><ul><li>依赖关系复杂，容易出现兼容性问题</li><li>开发、测试、生产环境有差异</li></ul><p><img src="'+m+'" alt="image-20210731141907366" loading="lazy"></p><p>例如一个项目中，部署时需要依赖于node.js、Redis、RabbitMQ、MySQL等，这些服务部署时所需要的函数库、依赖项各不相同，甚至会有冲突。给部署带来了极大的困难。</p><br><blockquote><p>💡思考：Docker 如何解决依赖兼容问题</p></blockquote><p>Docker 为了解决依赖的兼容问题的，采用了两个手段：</p><ul><li>将应用的Libs（函数库）、Deps（依赖）、配置与应用一起打包</li><li>将每个应用放到一个隔离<strong>容器</strong>去运行，避免互相干扰</li></ul><p><img src="'+y+'" alt="image-20210731142219735" loading="lazy"></p><p>这样打包好的应用包中，既包含应用本身，也保护应用所需要的Libs、Deps，无需再操作系统上安装这些，自然就不存在不同应用之间的兼容问题了。</p><p>虽然解决了不同应用的兼容问题，但是开发、测试等环境会存在差异，操作系统版本也会有差异，怎么解决这些问题呢？</p><br><blockquote><p>💡思考：Docker如何解决<strong>操作系统</strong>环境差异</p></blockquote><p>要解决不同操作系统环境差异问题，必须先了解操作系统结构。以一个 Ubuntu 操作系统为例，结构如下：</p><p><img src="'+E+'" alt="image-20210731143401460" loading="lazy"></p><p>结构包括：</p><ul><li>计算机硬件：例如 CPU、内存、磁盘等</li><li>系统内核：所有 Linux 发行版的内核都是 Linux，例如CentOS、Ubuntu、Fedora等。内核可以与计算机硬件交互，对外提供<strong>内核指令</strong>，用于操作计算机硬件。</li><li>系统应用：操作系统本身提供的应用、函数库。这些函数库是对内核指令的封装，使用更加方便。</li></ul><br><p>应用于计算机交互的流程如下：</p><ul><li>应用调用操作系统应用（函数库），实现各种功能</li><li>系统函数库是对内核指令集的封装，会调用内核指令</li><li>内核指令操作计算机硬件</li></ul><br><p><code>Ubuntu</code> 和 <code>CentOS</code> 都是基于 <code>Linux</code> 内核，无非是系统应用不同，提供的函数库有差异：</p><p><img src="'+b+'" alt="image-20210731144304990" loading="lazy"></p><p>此时，如果将一个 <code>Ubuntu</code> 版本的 <code>MySQL</code> 应用安装到 <code>CentOS</code> 系统，<code>MySQL</code> 在调用 <code>Ubuntu</code> 函数库时，会发现找不到或者不匹配，就会报错了</p><p><img src="'+F+'" alt="image-20210731144458680" loading="lazy"></p><p>Docker如何解决不同系统环境的问题？</p><ul><li>Docker 将用户程序与所需要调用的系统(比如Ubuntu)函数库一起打包</li><li>Docker 运行到不同操作系统时，直接基于打包的函数库，借助于操作系统的 Linux 内核来运行</li></ul><br><p><strong>如图</strong></p><p><img src="'+v+'" alt="image-20210731144820638" loading="lazy"></p><br><div class="warning custom-block"><p class="custom-block-title">📌 小结</p><p>Docker 如何解决大型项目依赖关系复杂，不同组件依赖的兼容性问题？</p><ul><li>Docker允许开发中将应用、依赖、函数库、配置一起<strong>打包</strong>，形成可移植镜像</li><li>Docker应用运行在容器中，使用沙箱机制，相互<strong>隔离</strong></li></ul><br><p>Docker 如何解决开发、测试、生产环境有差异的问题？</p><ul><li>Docker 镜像中包含完整运行环境，包括系统函数库，仅依赖系统的 Linux 内核，因此可以在任意 Linux 操作系统上运行</li></ul><br><p>Docker 是一个快速交付应用、运行应用的技术，具备下列优势：</p><ul><li>可以将程序及其依赖、运行环境一起打包为一个镜像，可以迁移到任意 Linux 操作系统</li><li>运行时利用沙箱机制形成隔离容器，各个应用互不干扰</li><li>启动、移除都可以通过一行命令完成，方便快捷</li></ul></div><br><blockquote><p>💡思考：Docker和虚拟机是什么样的关系，有什么样的差异？</p></blockquote><p>Docker可以让一个应用在任何操作系统中非常方便的运行。而以前我们接触的虚拟机，也能在一个操作系统中，运行另外一个操作系统，保护系统中的任何应用。</p><br><p>两者有什么差异呢？</p><p><strong>虚拟机</strong>（Virtual Machine）是在操作系统中<strong>模拟</strong>硬件设备，然后运行另一个操作系统，比如在 Windows 系统里面运行 Ubuntu 系统，这样就可以运行任意的 Ubuntu 应用了。</p><p><strong>Docker</strong> 仅仅是封装函数库，并没有模拟完整的操作系统。<strong>如图</strong></p><p><img src="'+C+'" alt="image-20210731145914960" loading="lazy"></p><br><p>对比来看：</p><img src="'+D+'" alt="image-20210731152243765" style="zoom:50%;"><br><div class="warning custom-block"><p class="custom-block-title">📌 Docker 和虚拟机的差异：</p><ul><li>Docker 是一个系统进程；虚拟机是在操作系统中的操作系统</li><li>Docker 体积小、启动速度快、性能好；虚拟机体积大、启动速度慢、性能一般</li></ul></div><br><h3 id="docker架构" tabindex="-1">Docker架构 <a class="header-anchor" href="#docker架构" aria-label="Permalink to &quot;Docker架构&quot;">​</a></h3><p>Docker 中有几个重要的概念：</p><p><strong>镜像（Image）</strong>：Docker将应用程序及其所需的依赖、函数库、环境、配置等文件打包在一起，称为镜像。</p><p><strong>容器（Container）</strong>：镜像中的应用程序运行后形成的进程就是<strong>容器</strong>，只是Docker会给容器进程做隔离，对外不可见。</p><br><p>一切应用最终都是代码组成，都是硬盘中的一个个的字节形成的<strong>文件</strong>。只有运行时，才会加载到内存，形成进程。</p><br><p>而<strong>镜像</strong>，就是把一个应用在硬盘上的文件、及其运行环境、部分系统函数库文件一起打包形成的文件包。这个文件包是只读的。</p><p><strong>容器</strong>呢，就是将这些文件中编写的程序、函数加载到内存中允许，形成进程，只不过要隔离起来。因此一个镜像可以启动多次，形成多个容器进程。</p><p><img src="'+_+'" alt="image-20210731153059464" loading="lazy"></p><br><p>例如你下载了一个QQ，如果我们将QQ在磁盘上的运行<strong>文件</strong>及其运行的操作系统依赖打包，形成QQ镜像。然后你可以启动多次，双开、甚至三开QQ，跟多个妹子聊天。</p><br><h4 id="docker镜像" tabindex="-1">Docker镜像 <a class="header-anchor" href="#docker镜像" aria-label="Permalink to &quot;Docker镜像&quot;">​</a></h4><p>开源应用程序非常多，打包这些应用往往是重复的劳动。为了避免这些重复劳动，人们就会将自己打包的应用镜像，例如 Redis、MySQL 镜像放到网络上，共享使用，就像 GitHub 的代码共享一样。</p><ul><li>DockerHub：是一个官方的 Docker 镜像的托管平台。这样的平台称为 Docker Registry。国内也有类似于 DockerHub 的公开服务。 <ul><li>比如 <a href="https://c.163yun.com/hub" target="_blank" rel="noreferrer">网易云镜像服务</a>、<a href="https://cr.console.aliyun.com/" target="_blank" rel="noreferrer">阿里云镜像库</a></li></ul></li></ul><br><p>我们一方面可以将自己的镜像共享到 DockerHub，另一方面也可以从 DockerHub 拉取镜像</p><p><img src="'+f+'" alt="image-20210731153743354" loading="lazy"></p><br><h4 id="docker架构-1" tabindex="-1">Docker架构 <a class="header-anchor" href="#docker架构-1" aria-label="Permalink to &quot;Docker架构&quot;">​</a></h4><p>Docker 是一个 CS 架构的程序，由两部分组成：</p><ul><li>服务端(Server)：Docker 守护进程，负责处理 Docker 指令，管理镜像、容器等</li><li>客户端(Client)：通过命令或 RestAPI 向 Docker 服务端发送指令。可以在本地或远程向服务端发送指令。</li></ul><br><p><strong>如图</strong></p><p><img src="'+q+'" alt="image-20210731154257653" loading="lazy"></p><br><div class="warning custom-block"><p class="custom-block-title">📌 小结</p><p>镜像</p><ul><li>将应用程序及其依赖、环境、配置打包在一起</li></ul><p>容器</p><ul><li>镜像运行起来就是容器，一个镜像可以运行多个容器</li></ul><p>结构</p><ul><li><p>服务端：接收命令或远程请求，操作镜像或容器</p></li><li><p>客户端：发送命令或者请求到Docker服务端</p></li></ul><p>仓库</p><ul><li>一个镜像托管的服务器，类似的还有阿里云镜像服务，统称为 DockerRegistry</li></ul></div><br><h3 id="docker安装" tabindex="-1">Docker安装 <a class="header-anchor" href="#docker安装" aria-label="Permalink to &quot;Docker安装&quot;">​</a></h3><p>企业部署一般都是采用 Linux 操作系统，而其中又数 CentOS 发行版占比最多，因此我们在 CentOS 下安装 Docker。</p><p>参考文档：<a href="./00操作篇-安装Docker#CentOS安装Docker">安装Docker</a></p><h2 id="基本操作" tabindex="-1">基本操作 <a class="header-anchor" href="#基本操作" aria-label="Permalink to &quot;基本操作&quot;">​</a></h2><h3 id="镜像操作" tabindex="-1">镜像操作 <a class="header-anchor" href="#镜像操作" aria-label="Permalink to &quot;镜像操作&quot;">​</a></h3><p>首先来看下镜像的名称组成：</p><ul><li>镜名称一般分两部分组成：<code>[repository]:[tag]</code>。</li><li>在没有指定tag时，默认是latest，代表最新版本的镜像</li></ul><br><p><strong>如图</strong></p><p><img src="'+B+'" alt="image-20210731155141362" loading="lazy"></p><p>这里的 mysql 就是 repository，5.7 就是 tag，合一起就是镜像名称，代表 5.7 版本的 MySQL 镜像。</p><br><h4 id="镜像命令" tabindex="-1">镜像命令 <a class="header-anchor" href="#镜像命令" aria-label="Permalink to &quot;镜像命令&quot;">​</a></h4><p>常见的镜像操作命令如图</p><p><img src="'+A+'" alt="image-20210731155649535" loading="lazy"></p><br><h4 id="案例-拉取、查看镜像" tabindex="-1">案例-拉取、查看镜像 <a class="header-anchor" href="#案例-拉取、查看镜像" aria-label="Permalink to &quot;案例-拉取、查看镜像&quot;">​</a></h4><p>需求：从 DockerHub 中拉取一个 Nginx 镜像并查看</p><ol><li>首先去镜像仓库搜索nginx镜像，比如 <a href="https://hub.docker.com/" target="_blank" rel="noreferrer">DockerHub</a>:</li></ol><p><img src="'+x+'" alt="image-20210731155844368" loading="lazy"></p><br><ol start="2"><li>根据查看到的镜像名称，拉取自己需要的镜像，通过命令：docker pull nginx</li></ol><p><img src="'+j+'" alt="image-20210731155856199" loading="lazy"></p><br><ol start="3"><li>通过命令：docker images 查看拉取到的镜像</li></ol><p><img src="'+P+'" alt="image-20210731155903037" loading="lazy"></p><br><h4 id="案例-保存、导入镜像" tabindex="-1">案例-保存、导入镜像 <a class="header-anchor" href="#案例-保存、导入镜像" aria-label="Permalink to &quot;案例-保存、导入镜像&quot;">​</a></h4><p>需求：利用 docker save 将 nginx 镜像导出磁盘，然后再通过 load 加载回来</p><br><ol><li>利用 docker xx --help 命令查看 docker save 和 docker load 的语法</li></ol><p>例如，查看 save 命令用法，可以输入命令：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> save --help</span></span></code></pre></div><p>结果：</p><p><img src="'+w+'" alt="image-20210731161104732" loading="lazy"></p><br><p>命令格式：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> save -o [保存的目标文件名称] [镜像名称]</span></span></code></pre></div><br><ol start="2"><li>使用 docker save 导出镜像到磁盘</li></ol><p>运行命令：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> save -o nginx.tar nginx:latest</span></span></code></pre></div><p>结果如图：</p><p><img src="'+z+'" alt="image-20210731161354344" loading="lazy"></p><br><ol start="3"><li>使用 docker load 加载镜像</li></ol><p>先删除本地的nginx镜像：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rmi nginx:latest</span></span></code></pre></div><br><p>然后运行命令，加载本地文件：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> load -i nginx.tar</span></span></code></pre></div><p>结果：</p><p><img src="'+S+'" alt="image-20210731161746245" loading="lazy"></p><br><blockquote><p>📖 需求：去 DockerHub 搜索并拉取一个Redis镜像</p></blockquote><p>目标：</p><ul><li>去 DockerHub 搜索 Redis 镜像</li><li>查看 Redis 镜像的名称和版本</li><li>利用 docker pull 命令拉取镜像</li><li>利用 docker save 命令将 redis:latest 打包为一个 redis.tar 包</li><li>利用 docker rmi 删除本地的 redis:latest</li><li>利用 docker load 重新加载 redis.tar文件</li></ul><br><h3 id="容器操作" tabindex="-1">容器操作 <a class="header-anchor" href="#容器操作" aria-label="Permalink to &quot;容器操作&quot;">​</a></h3><h4 id="容器命令" tabindex="-1">容器命令 <a class="header-anchor" href="#容器命令" aria-label="Permalink to &quot;容器命令&quot;">​</a></h4><p>容器操作的命令如图：</p><p><img src="'+O+'" alt="image-20210731161950495" loading="lazy"></p><p>容器保护三个状态：</p><ul><li>运行：进程正常运行</li><li>暂停：进程暂停，CPU不再运行，并不释放内存</li><li>停止：进程终止，回收进程占用的内存、CPU等资源</li></ul><br><p>其中</p><ul><li>docker run：创建并运行一个容器，处于运行状态</li><li>docker pause：让一个运行的容器暂停</li><li>docker unpause：让一个容器从暂停状态恢复运行</li><li>docker stop：停止一个运行的容器</li><li>docker start：让一个停止的容器再次运行</li><li>docker rm：删除一个容器</li></ul><br><h4 id="案例-创建并运行一个容器" tabindex="-1">案例-创建并运行一个容器 <a class="header-anchor" href="#案例-创建并运行一个容器" aria-label="Permalink to &quot;案例-创建并运行一个容器&quot;">​</a></h4><p>创建并运行nginx容器的命令：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run --name containerName -p </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">80</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">:80 -d nginx</span></span></code></pre></div><br><p>命令解读：</p><ul><li><code>docker run</code>：创建并运行一个容器</li><li><code>--name</code>: 给容器起一个名字，比如叫做 mn</li><li><code>-p</code>：将宿主机端口与容器端口映射，冒号左侧是宿主机端口，右侧是容器端口</li><li><code>-d</code>：后台运行容器</li><li><code>nginx</code>：镜像名称，例如 nginx</li></ul><br><p>这里的 <code>-p</code> 参数，是将容器端口映射到宿主机端口。</p><p>默认情况下，容器是隔离环境，我们直接访问宿主机的 80 端口，肯定访问不到容器中的 nginx。</p><p>现在，将容器的 80 与宿主机的 80 关联起来，当我们访问宿主机的 8 0端口时，就会被映射到容器的 80，这样就能访问到 nginx 了：</p><p><img src="'+M+'" alt="image-20210731163255863" loading="lazy"></p><br><h4 id="案例-进入容器内修改文件" tabindex="-1">案例-进入容器内修改文件 <a class="header-anchor" href="#案例-进入容器内修改文件" aria-label="Permalink to &quot;案例-进入容器内修改文件&quot;">​</a></h4><p><strong>需求</strong>：进入Nginx容器，修改HTML文件内容，添加“传智教育欢迎您”</p><p><strong>提示</strong>：进入容器要用到 docker exec 命令。</p><br><p><strong>步骤</strong>：</p><ol><li>进入容器。进入我们刚刚创建的nginx容器的命令为：</li></ol><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> exec -it mn bash</span></span></code></pre></div><p>命令解读：</p><ul><li><p>docker exec ：进入容器内部，执行一个命令</p></li><li><p>-it : 给当前进入的容器创建一个标准输入、输出终端，允许我们与容器交互</p></li><li><p>mn ：要进入的容器的名称</p></li><li><p>bash：进入容器后执行的命令，bash是一个linux终端交互命令</p></li></ul><br><ol start="2"><li>进入 nginx 的 HTML 所在目录 /usr/share/nginx/html</li></ol><p>容器内部会模拟一个独立的 Linux 文件系统，看起来如同一个 Linux 服务器一样</p><p><img src="'+L+'" alt="image-20210731164159811" loading="lazy"></p><p>Nginx的环境、配置、运行文件全部都在这个文件系统中，包括我们要修改的 html 文件。</p><p>查看DockerHub网站中的nginx页面，可以知道nginx的html目录位置在<code>/usr/share/nginx/html</code></p><br><p>我们执行命令，进入该目录：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /usr/share/nginx/html</span></span></code></pre></div><p>查看目录下文件：</p><p><img src="'+Q+`" alt="image-20210731164455818" loading="lazy"></p><br><ol start="3"><li>修改index.html的内容</li></ol><p>容器内没有vi命令，无法直接修改，我们用下面的命令来修改：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sed</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -i</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -e</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;s#Welcome to nginx#传智教育欢迎您#g&#39;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-e </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;s#&lt;head&gt;#&lt;head&gt;&lt;meta charset=&quot;utf-8&quot;&gt;#g&#39;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">index.html</span></span></code></pre></div><br><p>在浏览器访问自己的虚拟机地址，例如我的是：<a href="http://192.168.150.101" target="_blank" rel="noreferrer">http://192.168.150.101</a></p><p><img src="`+R+'" alt="image-20210731164717604" loading="lazy"></p><br><div class="warning custom-block"><p class="custom-block-title">📌小结</p><p>docker run 命令的常见参数有哪些？</p><ul><li>--name：指定容器名称</li><li>-p：指定端口映射</li><li>-d：让容器后台运行</li></ul><p>查看容器日志的命令：</p><ul><li>docker logs</li><li>添加 -f 参数可以持续查看日志</li></ul><p>查看容器状态：</p><ul><li>docker ps</li><li>docker ps -a 查看所有容器，包括已经停止的</li></ul></div><br><h3 id="数据卷" tabindex="-1">数据卷 <a class="header-anchor" href="#数据卷" aria-label="Permalink to &quot;数据卷&quot;">​</a></h3><p>在之前的 nginx 案例中，修改 nginx 的 html 页面时，需要进入 nginx 内部。并且因为没有编辑器，修改文件也很麻烦。</p><p>这就是因为容器与数据（容器内文件）耦合带来的后果。</p><p><img src="'+N+'" alt="image-20210731172440275" loading="lazy"></p><p>要解决这个问题，必须将数据与容器解耦，这就要用到数据卷了。</p><br><p><strong>数据卷</strong>（volume）是一个虚拟目录，指向宿主机文件系统中的某个目录。</p><p><img src="'+U+'" alt="image-20210731173541846" loading="lazy"></p><p>一旦完成数据卷挂载，对容器的一切操作都会作用在数据卷对应的宿主机目录了。</p><p>这样，我们操作宿主机的 <code>/var/lib/docker/volumes/html</code> 目录，就等于操作容器内的 <code>/usr/share/nginx/html</code> 目录了</p><br><h4 id="数据卷命令" tabindex="-1">数据卷命令 <a class="header-anchor" href="#数据卷命令" aria-label="Permalink to &quot;数据卷命令&quot;">​</a></h4><p>数据卷操作的基本语法如下：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> volume [COMMAND]</span></span></code></pre></div><p>docker volume 命令是数据卷操作，根据命令后跟随的command来确定下一步的操作：</p><ul><li>create 创建一个 volume</li><li>inspect 显示一个或多个 volume 的信息</li><li>ls 列出所有的 volume</li><li>prune 删除未使用的 volume</li><li>rm 删除一个或多个指定的 volume</li></ul><br><p><strong>创建和查看数据卷</strong></p><p><strong>需求</strong>：创建一个数据卷，并查看数据卷在宿主机的目录位置</p><p>① 创建数据卷</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> volume create html</span></span></code></pre></div><br><p>② 查看所有数据</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> volume ls</span></span></code></pre></div><p>结果：</p><p><img src="'+T+'" alt="image-20210731173746910" loading="lazy"></p><br><p>③ 查看数据卷详细信息卷</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> volume inspect html</span></span></code></pre></div><p>结果：</p><p><img src="'+J+`" alt="image-20210731173809877" loading="lazy"></p><p>可以看到，我们创建的html这个数据卷关联的宿主机目录为<code>/var/lib/docker/volumes/html/_data</code>目录。</p><br><div class="warning custom-block"><p class="custom-block-title">📌 小结</p><ul><li>数据卷的作用： <ul><li>将容器与数据分离，解耦合，方便操作容器内数据，保证数据安全</li></ul></li><li>数据卷操作： <ul><li>docker volume create：创建数据卷</li><li>docker volume ls：查看所有数据卷</li><li>docker volume inspect：查看数据卷详细信息，包括关联的宿主机目录位置</li><li>docker volume rm：删除指定数据卷</li><li>docker volume prune：删除所有未使用的数据卷</li></ul></li></ul></div><br><p><strong>挂载数据卷</strong></p><p>我们在创建容器时，可以通过 -v 参数来挂载一个数据卷到某个容器内目录，命令格式如下：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  --name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mn </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  -v</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> html:/root/html </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  -p</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 8080</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">:80</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  nginx</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span></code></pre></div><p>这里的-v就是挂载数据卷的命令：</p><ul><li><code>-v html:/root/htm</code> ：把html数据卷挂载到容器内的/root/html这个目录中</li></ul><br><h4 id="案例-给nginx挂载数据卷" tabindex="-1">案例-给Nginx挂载数据卷 <a class="header-anchor" href="#案例-给nginx挂载数据卷" aria-label="Permalink to &quot;案例-给Nginx挂载数据卷&quot;">​</a></h4><p><strong>需求</strong>：创建一个nginx容器，修改容器内的html目录内的index.html内容</p><br><p><strong>分析</strong>：上个案例中，我们进入nginx容器内部，已经知道nginx的html目录所在位置/usr/share/nginx/html ，我们需要把这个目录挂载到html这个数据卷上，方便操作其中的内容。</p><br><p><strong>提示</strong>：运行容器时使用 -v 参数挂载数据卷</p><ol><li>创建容器并挂载数据卷到容器内的HTML目录</li></ol><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run --name mn </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-v </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">html:/usr/share/nginx/html </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-p </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">80</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">:80 </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-d </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">nginx</span></span></code></pre></div><ol start="2"><li>进入html数据卷所在位置，并修改HTML内容</li></ol><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 查看html数据卷的位置</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> volume inspect html</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 进入该目录</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /var/lib/docker/volumes/html/_data</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 修改文件</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">vi</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> index.html</span></span></code></pre></div><br><h4 id="案例-给mysql挂载本地目录" tabindex="-1">案例-给MySQL挂载本地目录 <a class="header-anchor" href="#案例-给mysql挂载本地目录" aria-label="Permalink to &quot;案例-给MySQL挂载本地目录&quot;">​</a></h4><p>容器不仅仅可以挂载数据卷，也可以直接挂载到宿主机目录上。关联关系如下：</p><ul><li>带数据卷模式：宿主机目录 --&gt; 数据卷 --&gt; 容器内目录</li><li>直接挂载模式：宿主机目录 --&gt; 容器内目录</li></ul><br><p><strong>如图</strong></p><p><img src="`+H+`" alt="image-20210731175155453" loading="lazy"></p><p><strong>语法</strong>：</p><p>目录挂载与数据卷挂载的语法是类似的：</p><ul><li>-v [宿主机目录]:[容器内目录]</li><li>-v [宿主机文件]:[容器内文件]</li></ul><br><p><strong>需求</strong>：创建并运行一个MySQL容器，将宿主机目录直接挂载到容器</p><div class="tip custom-block"><p class="custom-block-title">🔖 实现思路如下：</p><ul><li><p>在将课前资料中的 <code>mysql.tar</code> 文件上传到虚拟机，通过 <code>load</code> 命令加载为镜像</p></li><li><p>创建目录/usr/local/src/mysql/data</p></li><li><p>创建目录/usr/local/src/mysql/conf，将课前资料提供的hmy.cnf文件上传到目标目录</p></li><li><p>去DockerHub查阅资料，创建并运行MySQL容器，要求：</p><ul><li>挂载/usr/local/src/mysql/data 到 mysql 容器内数据存储目录</li><li>挂载/usr/local/src/mysql/conf/hmy.cnf 到 mysql 容器的配置文件</li><li>设置MySQL密码</li></ul></li></ul></div><br><p>通过 load 命令加载为镜像：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[root@centos7 src]# docker load -i mysql.tar</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Loaded</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> image: mysql:5.7.25</span></span></code></pre></div><br><p>创建两个目录，作为数据库的数据卷</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[root@centos7 src]# mkdir -p /usr/local/src/mysql/data</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[root@centos7 src]# mkdir -p /usr/local/src/mysql/conf</span></span></code></pre></div><br><p>新增配置文件 init.conf</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[root@centos7 src]# vim mysql/conf/init.conf</span></span></code></pre></div><br><p>配置信息</p><div class="language-properties vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">properties</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">[mysqld]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">skip-name-resolve</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">character_set_server</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=utf8</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">datadir</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=/var/lib/mysql</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">server-id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=1000</span></span></code></pre></div><br><p>启动命令</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run -d </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  --name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mysql </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  --restart=always</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  -e</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> MYSQL_ROOT_PASSWORD=abc123 </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  -p</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3306</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">:3306 </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  -v</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /usr/local/src/mysql/conf/init.cnf:/etc/mysql/conf.d/init.cnf </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  -v</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /usr/local/src/mysql/data:/var/lib/mysql </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mysql:5.7.25</span></span></code></pre></div><br><p>进入 MySQL 容器</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> exec -it mysql mysql -uroot -pabc123</span></span></code></pre></div><br><p>验证字符集是否正确</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mysql&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> show variables like &#39;%character%&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">+--------------------------+----------------------------+</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Variable_name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                      |</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">+--------------------------+----------------------------+</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> character_set_client</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">     |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> latin1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                     |</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> character_set_connection</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> latin1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                     |</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> character_set_database</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> utf8</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                       |</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> character_set_filesystem</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> binary</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                     |</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> character_set_results</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> latin1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                     |</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> character_set_server</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">     |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> utf8</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                       |</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> character_set_system</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">     |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> utf8</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                       |</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> character_sets_dir</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">       |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> /usr/share/mysql/charsets/</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">+--------------------------+----------------------------+</span></span></code></pre></div><br><div class="warning custom-block"><p class="custom-block-title">📌 总结</p><p>docker run 的命令中通过 -v 参数挂载文件或目录到容器中</p><ul><li>-v volume名称:容器内目录</li><li>-v 宿主机文件:容器内文件</li><li>-v 宿主机目录:容器内目录</li></ul><p>数据卷挂载与目录直接挂载的</p><ul><li>数据卷挂载耦合度低，由docker来管理目录，但是目录较深，不好找</li><li>目录挂载耦合度高，需要我们自己管理目录，不过目录容易寻找查看</li></ul></div><h2 id="dockerfile" tabindex="-1">Dockerfile <a class="header-anchor" href="#dockerfile" aria-label="Permalink to &quot;Dockerfile&quot;">​</a></h2><p>Dockerfile 为自定义镜像。常见的镜像在 DockerHub 就能找到，但是我们自己写的项目就必须自己构建镜像了。而要自定义镜像，就必须先了解镜像的结构才行。</p><br><h3 id="镜像结构" tabindex="-1">镜像结构 <a class="header-anchor" href="#镜像结构" aria-label="Permalink to &quot;镜像结构&quot;">​</a></h3><p>镜像是将应用程序及其需要的系统函数库、环境、配置、依赖打包而成。</p><br><p>我们以MySQL为例，来看看镜像的组成结构：</p><p><img src="`+I+'" alt="image-20210731175806273" loading="lazy"></p><br><p>简单来说，镜像就是在系统函数库、运行环境基础上，添加应用程序文件、配置文件、依赖文件等组合，然后编写好启动脚本打包在一起形成的文件。</p><br><p>我们要构建镜像，其实就是实现上述打包的过程。</p><br><h3 id="镜像语法" tabindex="-1">镜像语法 <a class="header-anchor" href="#镜像语法" aria-label="Permalink to &quot;镜像语法&quot;">​</a></h3><p>构建自定义的镜像时，并不需要一个个文件去拷贝，打包。</p><br><p>我们只需要告诉Docker，我们的镜像的组成，需要哪些BaseImage、需要拷贝什么文件、需要安装什么依赖、启动脚本是什么，将来Docker会帮助我们构建镜像。</p><br><p>而描述上述信息的文件就是 Dockerfile 文件。</p><br><p><strong>Dockerfile</strong> 就是一个文本文件，其中包含一个个的<strong>指令(Instruction)</strong>，用指令来说明要执行什么操作来构建镜像。每一个指令都会形成一层Layer。</p><p><img src="'+V+'" alt="image-20210731180321133" loading="lazy"></p><br><p>更新详细语法说明，请参考官网文档： <a href="https://docs.docker.com/engine/reference/builder" target="_blank" rel="noreferrer">https://docs.docker.com/engine/reference/builder</a></p><br><h3 id="构建项目" tabindex="-1">构建项目 <a class="header-anchor" href="#构建项目" aria-label="Permalink to &quot;构建项目&quot;">​</a></h3><h4 id="基于ubuntu构建java项目" tabindex="-1">基于Ubuntu构建Java项目 <a class="header-anchor" href="#基于ubuntu构建java项目" aria-label="Permalink to &quot;基于Ubuntu构建Java项目&quot;">​</a></h4><p>需求：基于Ubuntu镜像构建一个新镜像，运行一个java项目</p><ul><li><p>步骤1：新建一个空文件夹docker-demo</p><p><img src="'+Y+'" alt="image-20210801101207444" loading="lazy"></p></li><li><p>步骤2：拷贝课前资料中的docker-demo.jar文件到docker-demo这个目录</p><p><img src="'+W+'" alt="image-20210801101314816" loading="lazy"></p></li><li><p>步骤3：拷贝课前资料中的jdk8.tar.gz文件到docker-demo这个目录</p><p><img src="'+$+'" alt="image-20210801101410200" loading="lazy"></p></li><li><p>步骤4：拷贝课前资料提供的Dockerfile到docker-demo这个目录</p><p><img src="'+X+`" alt="image-20210801101455590" loading="lazy"></p><p>其中的内容如下：</p><div class="language-dockerfile vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dockerfile</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 指定基础镜像</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ubuntu:16.04</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 配置环境变量，JDK的安装目录</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ENV</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> JAVA_DIR=/usr/local</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 拷贝jdk和java项目的包</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">COPY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ./jdk8.tar.gz $JAVA_DIR/</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">COPY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ./docker-demo.jar /tmp/app.jar</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 安装JDK</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">RUN</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cd $JAVA_DIR \\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &amp;&amp; tar -xf ./jdk8.tar.gz \\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &amp;&amp; mv ./jdk1.8.0_144 ./java8</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 配置环境变量</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ENV</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> JAVA_HOME=$JAVA_DIR/java8</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ENV</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> PATH=$PATH:$JAVA_HOME/bin</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 暴露端口</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">EXPOSE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 8090</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 入口，java项目的启动命令</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ENTRYPOINT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> java -jar /tmp/app.jar</span></span></code></pre></div></li><li><p>步骤5：进入docker-demo</p><p>将准备好的docker-demo上传到虚拟机任意目录，然后进入docker-demo目录下</p></li><li><p>步骤6：运行命令：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build -t javaweb:1.0 .</span></span></code></pre></div></li></ul><p>最后访问 <a href="http://192.168.150.101:8090/hello/count%EF%BC%8C%E5%85%B6%E4%B8%AD%E7%9A%84ip%E6%94%B9%E6%88%90%E4%BD%A0%E7%9A%84%E8%99%9A%E6%8B%9F%E6%9C%BAip" target="_blank" rel="noreferrer">http://192.168.150.101:8090/hello/count，其中的ip改成你的虚拟机ip</a></p><br><h4 id="基于java8构建java项目" tabindex="-1">基于Java8构建Java项目 <a class="header-anchor" href="#基于java8构建java项目" aria-label="Permalink to &quot;基于Java8构建Java项目&quot;">​</a></h4><p>虽然我们可以基于Ubuntu基础镜像，添加任意自己需要的安装包，构建镜像，但是却比较麻烦。所以大多数情况下，我们都可以在一些安装了部分软件的基础镜像上做改造。</p><br><p>例如，构建java项目的镜像，可以在已经准备了JDK的基础镜像基础上构建。</p><br><p>需求：基于java:8-alpine镜像，将一个Java项目构建为镜像</p><p>实现思路如下：</p><ul><li><p>新建一个空的目录，然后在目录中新建一个文件，命名为Dockerfile</p></li><li><p>拷贝课前资料提供的docker-demo.jar到这个目录中</p><ul><li><p>编写Dockerfile文件：</p></li><li><p>基于java:8-alpine作为基础镜像</p></li><li><p>将app.jar拷贝到镜像中</p></li><li><p>暴露端口</p></li><li><p>编写入口ENTRYPOINT</p><p>内容如下：</p><div class="language-dockerfile vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dockerfile</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> java:8-alpine</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">COPY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ./app.jar /tmp/app.jar</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">EXPOSE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 8090</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ENTRYPOINT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> java -jar /tmp/app.jar</span></span></code></pre></div></li></ul></li><li><p>使用docker build命令构建镜像</p></li><li><p>使用docker run创建容器并运行</p></li></ul><br><div class="warning custom-block"><p class="custom-block-title">📌 小结</p><ol><li><p>Dockerfile的本质是一个文件，通过指令描述镜像的构建过程</p></li><li><p>Dockerfile的第一行必须是FROM，从一个基础镜像来构建</p></li><li><p>基础镜像可以是基本操作系统，如Ubuntu。也可以是其他人制作好的镜像，例如：java:8-alpine</p></li></ol></div><h2 id="dockercompose" tabindex="-1">DockerCompose <a class="header-anchor" href="#dockercompose" aria-label="Permalink to &quot;DockerCompose&quot;">​</a></h2><p>Docker Compose 可以基于 Compose 文件帮我们快速的部署分布式应用，而无需手动一个个创建和运行容器！</p><p><img src="`+K+`" alt="image-20240222174137274" loading="lazy"></p><br><h3 id="安装dockercompose" tabindex="-1">安装DockerCompose <a class="header-anchor" href="#安装dockercompose" aria-label="Permalink to &quot;安装DockerCompose&quot;">​</a></h3><p>如何安装请参考：<a href="./00操作篇-安装Docker#centos安装dockercompose">安装DockerCompose</a></p><br><h3 id="初识dockercompose" tabindex="-1">初识DockerCompose <a class="header-anchor" href="#初识dockercompose" aria-label="Permalink to &quot;初识DockerCompose&quot;">​</a></h3><p>Compose 文件是一个文本文件，通过指令定义集群中的每个容器如何运行。格式如下：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">version: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;3.8&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> services:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  mysql:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    image: mysql:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5.7</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">25</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    environment:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     MYSQL_ROOT_PASSWORD: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">123</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    volumes:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/tmp/mysql/data:/var/lib/mysql&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/tmp/mysql/conf/hmy.cnf:/etc/mysql/conf.d/hmy.cnf&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  web:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    build: .</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ports:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;8090:8090&quot;</span></span></code></pre></div><p>上面的 Compose 文件就描述一个项目，其中包含两个容器：</p><ul><li>MySQL：一个基于 <code>mysql:5.7.25</code> 镜像构建的容器，并且挂载了两个目录</li><li>Web：一个基于<code>docker build</code>临时构建的镜像容器，映射端口时8090</li></ul><br><p>DockerCompose 的详细语法参考官网：<a href="https://docs.docker.com/compose/compose-file/" target="_blank" rel="noreferrer">https://docs.docker.com/compose/compose-file/</a></p><br><p>其实 DockerCompose 文件可以看做是将多个 docker run 命令写到一个文件，只是语法稍有差异。</p><br><h3 id="部署微服务集群" tabindex="-1">* 部署微服务集群 <a class="header-anchor" href="#部署微服务集群" aria-label="Permalink to &quot;* 部署微服务集群&quot;">​</a></h3><p><strong>需求</strong>：将之前学习的 cloud-demo 微服务集群利用 DockerCompose 部署</p><br><p><strong>实现思路</strong>：</p><ul><li>查看课前资料提供的 cloud-demo 文件夹，里面已经编写好了 docker-compose 文件</li><li>修改自己的 cloud-demo 项目，将数据库、nacos地址都命名为 docker-compose 中的服务名</li><li>使用 maven 打包工具，将项目中的每个微服务都打包为 app.jar</li><li>将打包好的 app.jar 拷贝到 cloud-demo 中的每一个对应的子目录中</li><li>将 cloud-demo 上传至虚拟机，利用 docker-compose up -d 来部署</li></ul><br><h4 id="compose-文件" tabindex="-1">compose 文件 <a class="header-anchor" href="#compose-文件" aria-label="Permalink to &quot;compose 文件&quot;">​</a></h4><p>查看课前资料提供的 cloud-demo 文件夹，里面已经编写好了 docker-compose 文件，而且每个微服务都准备了一个独立的目录</p><p><img src="`+G+`" alt="image-20210731181341330" loading="lazy"></p><br><p>内容如下</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">version</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;3.2&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">services</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  nacos</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    image</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">nacos/nacos-server</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    environment</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      MODE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">standalone</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    ports</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;8848:8848&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  mysql</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    image</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">mysql:5.7.25</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    environment</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      MYSQL_ROOT_PASSWORD</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">123</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    volumes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;$PWD/mysql/data:/var/lib/mysql&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;$PWD/mysql/conf:/etc/mysql/conf.d/&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  userservice</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">./user-service</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  orderservice</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">./order-service</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  gateway</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">./gateway</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    ports</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;10010:10010&quot;</span></span></code></pre></div><p>可以看到，其中包含5个service服务：</p><ul><li><code>nacos</code>：作为注册中心和配置中心 <ul><li><code>image: nacos/nacos-server</code>： 基于nacos/nacos-server镜像构建</li><li><code>environment</code>：环境变量 <ul><li><code>MODE: standalone</code>：单点模式启动</li></ul></li><li><code>ports</code>：端口映射，这里暴露了8848端口</li></ul></li><li><code>mysql</code>：数据库 <ul><li><code>image: mysql:5.7.25</code>：镜像版本是mysql:5.7.25</li><li><code>environment</code>：环境变量 <ul><li><code>MYSQL_ROOT_PASSWORD: 123</code>：设置数据库root账户的密码为123</li></ul></li><li><code>volumes</code>：数据卷挂载，这里挂载了mysql的data、conf目录，其中有我提前准备好的数据</li></ul></li><li><code>userservice</code>、<code>orderservice</code>、<code>gateway</code>：都是基于Dockerfile临时构建的</li></ul><br><p>查看mysql目录，可以看到其中已经准备好了cloud_order、cloud_user表：</p><p><img src="`+Z+'" alt="image-20210801095205034" loading="lazy"></p><br><p>查看微服务目录，可以看到都包含Dockerfile文件：</p><p><img src="'+ss+`" alt="image-20210801095320586" loading="lazy"></p><br><p>内容如下：</p><div class="language-dockerfile vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dockerfile</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> java:8-alpine</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">COPY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ./app.jar /tmp/app.jar</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ENTRYPOINT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> java -jar /tmp/app.jar</span></span></code></pre></div><br><h4 id="修改微服务配置" tabindex="-1">修改微服务配置 <a class="header-anchor" href="#修改微服务配置" aria-label="Permalink to &quot;修改微服务配置&quot;">​</a></h4><p>因为微服务将来要部署为docker容器，而容器之间互联不是通过IP地址，而是通过容器名。这里我们将order-service、user-service、gateway服务的mysql、nacos地址都修改为基于容器名的访问。</p><br><p><strong>如下所示</strong></p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">spring</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  datasource</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    url</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">jdbc:mysql://mysql:3306/cloud_order?useSSL=false</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    username</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">root</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    password</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">123</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    driver-class-name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">com.mysql.jdbc.Driver</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  application</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">orderservice</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  cloud</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    nacos</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      server-addr</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">nacos:8848</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # nacos服务地址</span></span></code></pre></div><br><h4 id="打包" tabindex="-1">打包 <a class="header-anchor" href="#打包" aria-label="Permalink to &quot;打包&quot;">​</a></h4><p>接下来需要将我们的每个微服务都打包。因为之前查看到Dockerfile中的jar包名称都是app.jar，因此我们的每个微服务都需要用这个名称。</p><p>可以通过修改pom.xml中的打包名称来实现，每个微服务都需要修改：</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  &lt;!-- 服务打包的最终名称 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">finalName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;app&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">finalName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">plugins</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">plugin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;org.springframework.boot&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;spring-boot-maven-plugin&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">plugin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">plugins</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><br><p>打包后</p><p><img src="`+is+'" alt="image-20210801095951030" loading="lazy"></p><br><h4 id="拷贝jar包到部署目录" tabindex="-1">拷贝jar包到部署目录 <a class="header-anchor" href="#拷贝jar包到部署目录" aria-label="Permalink to &quot;拷贝jar包到部署目录&quot;">​</a></h4><p>编译打包好的app.jar文件，需要放到Dockerfile的同级目录中。注意：每个微服务的app.jar放到与服务名称对应的目录，别搞错了。</p><br><p><code>user-service</code></p><p><img src="'+as+'" alt="image-20210801100201253" loading="lazy"></p><br><p><code>order-service</code></p><p><img src="'+ls+'" alt="image-20210801100231495" loading="lazy"></p><br><p><code>gateway</code></p><p><img src="'+es+'" alt="image-20210801100308102" loading="lazy"></p><br><h4 id="部署" tabindex="-1">部署 <a class="header-anchor" href="#部署" aria-label="Permalink to &quot;部署&quot;">​</a></h4><p>最后，我们需要将文件整个cloud-demo文件夹上传到虚拟机中，由 DockerCompose 部署。</p><br><p>进入 cloud-demo 目录，然后运行下面的命令：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker-compose</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> up -d</span></span></code></pre></div>',393);function hs(s,rs,ks,os,cs,ds){const p=l("ArticleMetadata"),t=l("ClientOnly");return n(),r("div",null,[ps,k(t,null,{default:o(()=>{var i,a;return[(((i=s.$frontmatter)==null?void 0:i.aside)??!0)&&(((a=s.$frontmatter)==null?void 0:a.showArticleMetadata)??!0)?(n(),g(p,{key:0,article:s.$frontmatter},null,8,["article"])):u("",!0)]}),_:1}),ts])}const ms=h(ns,[["render",hs]]);export{us as __pageData,ms as default};
