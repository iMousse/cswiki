import{_ as h,E as t,c as k,J as r,w as d,m as n,a as g,V as E,o as l,b as o,e as c}from"./chunks/framework.syB9hai_.js";const y="/cswiki/assets/20230725141106786.kaTNd430.jpg",m="/cswiki/assets/image-20240218165316152.mA6N-o1g.png",F="/cswiki/assets/20230725141124489.vFHnkEbA.jpg",u="/cswiki/assets/20230725141134671.fQLMPd-6.jpg",b="/cswiki/assets/20230725141130822.0e2kCGtQ.jpg",B="/cswiki/assets/20230725141123495.ZoMmPnjg.jpg",j="/cswiki/assets/20230725141128154.P1S52-BW.jpg",x="/cswiki/assets/image-20240218165736180.uT4nT_lN.png",C="/cswiki/assets/20230725141112299.2QBKDBxM.jpg",D="/cswiki/assets/20230725141144470.48UxSurK.jpg",A="/cswiki/assets/20230725141125720.DL4Jw2qH.jpg",_="/cswiki/assets/20230725141130759.-6Rd3_aw.jpg",f="/cswiki/assets/20230725141156282.9oI52j-j.jpg",q="/cswiki/assets/20230725141132043.gCwqp2vE.jpg",w="/cswiki/assets/20230725141127298.I4f6Z3Go.jpg",v="/cswiki/assets/20230725141131619.effBk_hY.jpg",z="/cswiki/assets/20230725141132870.J2ETf7oU.jpg",P="/cswiki/assets/20230725141140568.iFiMacSk.jpg",M="/cswiki/assets/20230725141200184.ErGpiKuG.jpg",U="/cswiki/assets/20230725141218558.kIdeoaVE.jpg",G="/cswiki/assets/20230725141142131.qVExZrS7.jpg",S="/cswiki/assets/20230725141156358.tXsoteWo.jpg",R="/cswiki/assets/20230725141147410.87pKXBVk.jpg",N="/cswiki/assets/20230725141159665.5VmvxN1Z.jpg",I="/cswiki/assets/20230725141156107.F1q-UfkR.jpg",O="/cswiki/assets/20230725141146880.4SQe5sjW.jpg",V="/cswiki/assets/image-20240218171801762.-nnE3jOx.png",$="/cswiki/assets/20230725141204174.-fRzN9zu.jpg",L="/cswiki/assets/20230725141206346.XQffRZBf.jpg",H="/cswiki/assets/20230725141210152.4bzOyFS6.jpg",Y="/cswiki/assets/20230725141203140.ED8lZqBN.jpg",J="/cswiki/assets/20230725141205252.hOQJt1i1.jpg",T="/cswiki/assets/20230725141853108.pKX1ni__.jpg",W="/cswiki/assets/20230725141204941.N2zYinbl.jpg",X="/cswiki/assets/20230725141900135.mBxy5VaY.jpg",K="/cswiki/assets/20230725141906191.j9tFt289.jpg",Q="/cswiki/assets/20230725141914814.skxO7siw.jpg",Z="/cswiki/assets/20230725141920592.DELqUuPp.jpg",ss="/cswiki/assets/20230725141925810.-DEzm4EV.jpg",is="/cswiki/assets/20230725141933338.OF2Zf3zu.jpg",as="/cswiki/assets/20230725141954370.unLcArud.jpg",ts="/cswiki/assets/20230725141959180.CqgW_Axi.jpg",ns="/cswiki/assets/20230725142004281.hNhfIijX.jpg",ls="/cswiki/assets/20230725142011889.vxNX2SGd.jpg",es="/cswiki/assets/image-20240218172359692.G-DW9PWf.png",ps="/cswiki/assets/20230725142024543.KnGapHB6.jpg",hs="/cswiki/assets/20230725142030211.suRJXwje.jpg",ks="/cswiki/assets/20230725142037604.TcK3ICCa.jpg",rs="/cswiki/assets/20230725142043783.x1R_sU-w.jpg",ds="/cswiki/assets/20230725142052838.8q0sf8Pu.jpg",gs="/cswiki/assets/20230725142059558.xs17OUkc.jpg",Es="/cswiki/assets/20230725142105332.0ZO3gQ8Y.jpg",os="/cswiki/assets/20230725142110514.nUk2_-9P.jpg",cs="/cswiki/assets/20230725142118091.ca2XW6Dn.jpg",ys="/cswiki/assets/20230725142125027.4U31R72M.jpg",ms="/cswiki/assets/20230725142142866.YkrfGaPi.jpg",Fs="/cswiki/assets/20230725142151105.EtEqFd8d.jpg",us="/cswiki/assets/20230725142157260.fIJMFTmL.jpg",bs="/cswiki/assets/20230725142204481.r-t0a441.jpg",Bs="/cswiki/assets/20230725142216300.I4eUV7xF.jpg",js="/cswiki/assets/20230725142222750.zwCBbena.jpg",xs="/cswiki/assets/20230725142238277.2BniAfH3.jpg",Cs="/cswiki/assets/20230725142258814.FzgK7I_5.jpg",Ds="/cswiki/assets/20230725142305274.ItkWpZCU.jpg",As="/cswiki/assets/20230725142331209.rMEZAa2b.jpg",_s="/cswiki/assets/20230725142336510.Xo9_s2t6.jpg",fs="/cswiki/assets/20230725141554924.b0OuaBFv.jpg",qs="/cswiki/assets/20230725141550665.pwNP76_U.jpg",ws="/cswiki/assets/20230725141206615.a_YHWTIb.jpg",vs="/cswiki/assets/20230725141212620.DWgEV8qJ.jpg",zs="/cswiki/assets/20230725141206867.umVC68V3.jpg",Ps="/cswiki/assets/20230725141208576.sdwCzn7l.jpg",Ms="/cswiki/assets/20230725141208683.pgy4uVEP.jpg",Us="/cswiki/assets/20230725141213900.gBGU6ZW3.jpg",Gs="/cswiki/assets/20230725141211637.HfiH9ior.jpg",Ss="/cswiki/assets/20230725141213357.2G--fUH-.jpg",Rs="/cswiki/assets/20230725141212565.gNd6x_iK.jpg",Ws=JSON.parse('{"title":"Day01-初识项目","description":"","frontmatter":{},"headers":[],"relativePath":"src/project/college/01-初识项目.md","filePath":"src/project/college/01-初识项目.md","lastUpdated":1730648753000}'),Ns={name:"src/project/college/01-初识项目.md"},Is=n("h1",{id:"day01-初识项目",tabindex:"-1"},[g("Day01-初识项目 "),n("a",{class:"header-anchor",href:"#day01-初识项目","aria-label":'Permalink to "Day01-初识项目"'},"​")],-1),Os=E('<nav class="table-of-contents"><ul><li><a href="#day01-初识项目">Day01-初识项目</a><ul><li><a href="#学习背景">学习背景</a></li><li><a href="#天机学堂">天机学堂</a><ul><li><a href="#行业背景">行业背景</a></li><li><a href="#行业图谱">行业图谱</a></li><li><a href="#系统架构">系统架构</a></li><li><a href="#技术架构">技术架构</a></li><li><a href="#功能演示">功能演示</a><ul><li><a href="#老师核心业务">老师核心业务</a></li><li><a href="#学员核心业务">学员核心业务</a></li></ul></li></ul></li><li><a href="#环境搭建">环境搭建</a><ul><li><a href="#导入虚拟机">导入虚拟机</a></li><li><a href="#配置本机">配置本机</a></li><li><a href="#部署">部署</a><ul><li><a href="#虚拟机部署">虚拟机部署</a></li><li><a href="#本地部署">本地部署</a></li></ul></li></ul></li><li><a href="#修复bug">修复BUG</a><ul><li><a href="#熟悉项目">熟悉项目</a><ul><li><a href="#项目结构">项目结构</a></li><li><a href="#实体类规范">实体类规范</a></li><li><a href="#依赖注入">依赖注入</a></li><li><a href="#异常处理">异常处理</a></li><li><a href="#配置文件">配置文件</a></li></ul></li><li><a href="#阅读源码">阅读源码</a><ul><li><a href="#bug重现">BUG重现</a></li><li><a href="#请求链路">请求链路</a></li></ul></li><li><a href="#远程调试">远程调试</a><ul><li><a href="#本地配置">本地配置</a></li><li><a href="#远程调试-1">远程调试</a></li><li><a href="#开始调试">开始调试</a></li></ul></li><li><a href="#修复bug-1">修复BUG</a><ul><li><a href="#分支管理">分支管理</a></li><li><a href="#修复bug-2">修复BUG</a></li></ul></li><li><a href="#测试部署">测试部署</a><ul><li><a href="#接口测试">接口测试</a></li><li><a href="#组件测试">组件测试</a></li><li><a href="#部署联调">部署联调</a></li></ul></li></ul></li></ul></li></ul></nav><h2 id="学习背景" tabindex="-1">学习背景 <a class="header-anchor" href="#学习背景" aria-label="Permalink to &quot;学习背景&quot;">​</a></h2><p>各位同学大家好，经过前面的学习我们已经掌握了《微服务架构》的核心技术栈。相信大家也体会到了微服务架构相对于项目一的单体架构要复杂很多，你的脑袋里也会有很多的问号：</p><ul><li>微服务架构该如何拆分？</li><li>到了公司中我需要自己搭建微服务项目吗？</li><li>如果公司已经有了一个复杂的微服务项目，我该如何快速上手？</li><li>我该从哪里拉取代码？</li><li>开发的规范有哪些？</li><li>微服务开发的环境与传统项目有什么差异？</li><li>...</li></ul><p>别担心，通过项目二的学习，上述问题你都能找到答案。</p><p>在大多数情况下，我们进入公司接手的都是一个成熟的，或者说开发中的微服务项目。所以如何快速熟悉项目、熟悉业务流程、融入开发团队就成了我们的必修课。</p><p>因此，项目二模拟的正是这样的开发场景：你刚刚进入了一家公司，进入了一个微服务项目组，参与一个微服务项目开发。我们会带着大家拉取代码、搭建开发环境、熟悉项目代码、熟悉业务流程、修改项目BUG、开发新功能、完成项目优化。通过整个项目的学习，真正掌握微服务架构技术栈，有能力解决微服务架构的各种问题。</p><h2 id="天机学堂" tabindex="-1">天机学堂 <a class="header-anchor" href="#天机学堂" aria-label="Permalink to &quot;天机学堂&quot;">​</a></h2><p>天机学堂是一个基于微服务架构的<strong>生产级</strong>在线教育项目，核心用户不是K12群体，而是面向成年人的<strong>非学历职业技能培训</strong>平台。相比之前的项目课程，其业务完整度、真实度、复杂度都非常的高，与企业真实项目非常接近。</p><p>通过天机学堂项目，你能学习到在线教育中核心的学习辅助系统、考试系统，电商类项目的促销优惠系统等等。更能学习到微服务开发中的各种热点问题，以及不同场景对应的解决方案。学完以后你会收获很多的“哇塞”。</p><br><h3 id="行业背景" tabindex="-1">行业背景 <a class="header-anchor" href="#行业背景" aria-label="Permalink to &quot;行业背景&quot;">​</a></h3><p>2021年7月，国务院颁布《关于进一步减轻义务教育阶段学生作业负担和校外培训负担的意见》，简称“双减”政策。在该政策影响下，多年来占据我国教育培训行业半壁江山的课外辅导培训遭到毁灭性打击。相对的，职业教育培训的市场规模持续增长：</p><p><img src="'+y+'" alt="img" loading="lazy"></p><p>职业教育的市场规模持续增长，增长率保持在12%以上，总规模即将突破万亿，可见职业教育前景大好。职业教育培训分为有学历和非学历两大类：</p><p><img src="'+m+'" alt="image-20240218165316152" loading="lazy"></p><p>天机学堂的核心业务就是非学历的<strong>职业技能培训</strong>。</p><br><p>另外，职业教育有线上和线下之分，随着互联网发展，传统行业也逐渐网络化发展。再加上疫情的影响，很多职业技能培训企业都开始发展在线教育。相比于传统线下培训，在线教育有成本更低，学习时间碎片化，教育资源能充分利用。因此，在线教育市场规模不断增长，前景巨大。</p><p><img src="'+F+'" alt="img" loading="lazy"></p><br><h3 id="行业图谱" tabindex="-1">行业图谱 <a class="header-anchor" href="#行业图谱" aria-label="Permalink to &quot;行业图谱&quot;">​</a></h3><p>职业教育产业图谱：</p><p><img src="'+u+'" alt="img" loading="lazy"></p><p>职业教育产业链分为三大部分：</p><ul><li>上游：由配套服务商、平台服务商、师资服务商和内容服务商构成。</li><li>中游：由学历和非学历的职业教育服务商 构成， 主要提供教育和培训服务。</li><li>下游：是职业教育需求方， 其中现阶段学历职业教育主要面向 15-22 岁的 C 端学生， 非学历职业培训的受众则更为广泛，基本覆盖了中考毕业以后所有年龄阶层的学生，此外职业技能培训和企业培训公司还向 B 端企业提供服务</li></ul><p><img src="'+b+'" alt="img" loading="lazy"></p><p>天机学堂正是属于中游的非学历职业技能培训的一家企业。</p><br><h3 id="系统架构" tabindex="-1">系统架构 <a class="header-anchor" href="#系统架构" aria-label="Permalink to &quot;系统架构&quot;">​</a></h3><p>天机学堂目前是一个B2C类型的教育网站，因此分为两个端：</p><ul><li>后台管理端</li><li>用户端（PC网站）</li></ul><p>整体架构如下：</p><p><img src="'+B+'" alt="img" loading="lazy"></p><br><h3 id="技术架构" tabindex="-1">技术架构 <a class="header-anchor" href="#技术架构" aria-label="Permalink to &quot;技术架构&quot;">​</a></h3><p><img src="'+j+'" alt="img" loading="lazy"></p><br><h3 id="功能演示" tabindex="-1">功能演示 <a class="header-anchor" href="#功能演示" aria-label="Permalink to &quot;功能演示&quot;">​</a></h3><p>天机学堂分为两部分：</p><ul><li>学生端：其核心业务主体就是学员，所有业务围绕着学员的展开</li><li>管理端：其核心业务主体包括老师、管理员、其他员工，核心业务围绕着老师展开</li></ul><p>具体可参考课前资料提供的功能演示视频。</p><br><h4 id="老师核心业务" tabindex="-1">老师核心业务 <a class="header-anchor" href="#老师核心业务" aria-label="Permalink to &quot;老师核心业务&quot;">​</a></h4><p>例如，老师的核心业务流程有：</p><p><img src="'+x+'" alt="image-20240218165736180" loading="lazy"></p><p>虽然流程并不复杂，但其中包含的业务繁多，例如：</p><ul><li>课程分类管理：课程分类的增删改查</li><li>媒资管理：媒资的增删改查、媒资审核</li><li>题目管理：试题的增删改查、试题批阅、审核</li><li>课程管理：课程增删改查、课程上下架、课程审核、发布等等</li></ul><br><h4 id="学员核心业务" tabindex="-1">学员核心业务 <a class="header-anchor" href="#学员核心业务" aria-label="Permalink to &quot;学员核心业务&quot;">​</a></h4><p>学员的核心业务就是买课、学习，基本流程如下：</p><p><img src="'+C+'" alt="img" loading="lazy"></p><h2 id="环境搭建" tabindex="-1">环境搭建 <a class="header-anchor" href="#环境搭建" aria-label="Permalink to &quot;环境搭建&quot;">​</a></h2><p>为了模拟真实的开发场景，我们设定的场景是这样的：天机学堂项目已经完成1.0.0版本60%的功能开发，能够实现项目的课程管理、课程购买等业务流程。现在需要加入课程学习、优惠促销、评价等功能。</p><p>相关微服务及1.0.0版本的完成状态如下：</p><table><thead><tr><th style="text-align:center;">微服务名称</th><th style="text-align:center;">功能描述</th><th style="text-align:center;">完成状态</th></tr></thead><tbody><tr><td style="text-align:center;">tj-parent</td><td style="text-align:center;">父工程</td><td style="text-align:center;"><strong>√</strong></td></tr><tr><td style="text-align:center;">tj-common</td><td style="text-align:center;">通用工程</td><td style="text-align:center;"><strong>√</strong></td></tr><tr><td style="text-align:center;">tj-message</td><td style="text-align:center;">消息中心</td><td style="text-align:center;"><strong>√</strong></td></tr><tr><td style="text-align:center;">tj-gateway</td><td style="text-align:center;">网关</td><td style="text-align:center;"><strong>√</strong></td></tr><tr><td style="text-align:center;">tj-auth</td><td style="text-align:center;">权限服务</td><td style="text-align:center;"><strong>√</strong></td></tr><tr><td style="text-align:center;">tj-user</td><td style="text-align:center;">用户服务</td><td style="text-align:center;"><strong>√</strong></td></tr><tr><td style="text-align:center;">tj-pay</td><td style="text-align:center;">支付服务</td><td style="text-align:center;"><strong>√</strong></td></tr><tr><td style="text-align:center;">tj-course</td><td style="text-align:center;">课程服务</td><td style="text-align:center;"><strong>√</strong></td></tr><tr><td style="text-align:center;">tj-exam</td><td style="text-align:center;">考试服务</td><td style="text-align:center;"><strong>O</strong></td></tr><tr><td style="text-align:center;">tj-search</td><td style="text-align:center;">搜索服务</td><td style="text-align:center;"><strong>√</strong></td></tr><tr><td style="text-align:center;">tj-trade</td><td style="text-align:center;">交易服务</td><td style="text-align:center;"><strong>O</strong></td></tr><tr><td style="text-align:center;">tj-learning</td><td style="text-align:center;">学习服务</td><td style="text-align:center;"><strong>X</strong></td></tr><tr><td style="text-align:center;">tj-promotion</td><td style="text-align:center;">促销服务</td><td style="text-align:center;"><strong>X</strong></td></tr><tr><td style="text-align:center;">tj-media</td><td style="text-align:center;">媒资服务</td><td style="text-align:center;"><strong>√</strong></td></tr><tr><td style="text-align:center;">tj-data</td><td style="text-align:center;">数据服务</td><td style="text-align:center;"><strong>O</strong></td></tr><tr><td style="text-align:center;">tj-remark</td><td style="text-align:center;">评价服务</td><td style="text-align:center;"><strong>X</strong></td></tr></tbody></table><br><h3 id="导入虚拟机" tabindex="-1">导入虚拟机 <a class="header-anchor" href="#导入虚拟机" aria-label="Permalink to &quot;导入虚拟机&quot;">​</a></h3><p>为了模拟企业中的开发环境，我们利用虚拟机搭建了一套开发环境，其中部署了开发常用的组件：</p><ul><li><code>Gogs</code>：代码全部提交带了自己的Git私服，模拟企业开发的代码管理，大家也需要自行到私服拉取代码</li><li><code>Jenkins</code>：持续集成，目前已经添加了所有部署脚本和Git钩子，代码推送会自动编译，可以根据需求手动部署</li><li><code>Nacos</code>：服务注册中心、统一配置管理，大多数共享的配置都已经交给nacos处理</li><li><code>Seata</code>：分布式事务管理</li><li>·<code>XXL-JOB</code>：分布式任务系统</li><li><code>ES</code>：索引库</li><li><code>MQ</code>：消息队列</li><li><code>Redis</code>：缓存库</li><li><code>MySQL</code>：数据库</li><li><code>Kibana</code>：ES控制台</li></ul><p>如图：</p><p><img src="'+D+`" alt="img" loading="lazy"></p><p>导入方式有两种：</p><ul><li><p>方式一：下载完整虚拟机并导入</p><ul><li>参考文档<a href="./00-虚拟机导入">《虚拟机导入说明》</a></li></ul></li><li><p>方式二：下载基础 DockerCompose 文件，及基础数据，利用脚本一键部署。</p><ul><li>参考文档<a href="./00-自定义部署">《自定义部署》</a></li></ul></li></ul><p>注意：导入虚拟机后所有软件即可使用，无需重复安装，VMware一定要按照文档中设置IP，不要私自修改。一定要关闭Windows防火墙。</p><br><h3 id="配置本机" tabindex="-1">配置本机 <a class="header-anchor" href="#配置本机" aria-label="Permalink to &quot;配置本机&quot;">​</a></h3><p>为了模拟使用域名访问，我们需要在本地配置hosts：</p><p>在地址栏输入：<code>C:\\WINDOWS\\system32\\drivers\\etc</code> ,修改 <code>hosts</code> 文件,<code>hosts</code> 文件修改会<strong>实时生效</strong></p><div class="language-Java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">192.168</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">150</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">101</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> git.tianji.com</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">192.168</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">150</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">101</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> jenkins.tianji.com</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">192.168</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">150</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">101</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mq.tianji.com</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">192.168</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">150</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">101</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> nacos.tianji.com</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">192.168</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">150</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">101</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> xxljob.tianji.com</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">192.168</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">150</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">101</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> es.tianji.com</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">192.168</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">150</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">101</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> api.tianji.com</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">192.168</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">150</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">101</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> www.tianji.com</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">192.168</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">150</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">101</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> manage.tianji.com</span></span></code></pre></div><p>当我们访问上述域名时，请求实际是发送到了虚拟机，而虚拟机中的 <code>Nginx</code> 会对这些域名做反向代理，这样我们就能请求到对应的组件了：</p><p><img src="`+A+'" alt="img" loading="lazy"></p><p>在浏览器中输入对应域名，即可查看到对应服务，例如Git私服地址：<a href="http://git.tianji.com/" target="_blank" rel="noreferrer">http://git.tianji.com</a></p><p><img src="'+_+'" alt="img" loading="lazy"></p><p>每个域名对应的服务列表如下：</p><table><thead><tr><th style="text-align:center;">名称</th><th style="text-align:center;">域名</th><th style="text-align:center;">账号</th><th style="text-align:center;">端口</th></tr></thead><tbody><tr><td style="text-align:center;">Gogs</td><td style="text-align:center;"><a href="./git.tianji.com">git.tianji.com</a></td><td style="text-align:center;">tjxt/123321</td><td style="text-align:center;">10880</td></tr><tr><td style="text-align:center;">Jenkins</td><td style="text-align:center;"><a href="./jenkins.tianji.com">jenkins.tianji.com</a></td><td style="text-align:center;">root/123</td><td style="text-align:center;">18080</td></tr><tr><td style="text-align:center;">RabbitMQ</td><td style="text-align:center;"><a href="./mq.tianji.com">mq.tianji.com</a></td><td style="text-align:center;">tjxt/123321</td><td style="text-align:center;">15672</td></tr><tr><td style="text-align:center;">Nacos控制台</td><td style="text-align:center;"><a href="./nacos.tianji.com">nacos.tianji.com</a></td><td style="text-align:center;">nacos/nacos</td><td style="text-align:center;">8848</td></tr><tr><td style="text-align:center;">XXL-Job控制台</td><td style="text-align:center;"><a href="./xxljob.tianji.com">xxljob.tianji.com</a></td><td style="text-align:center;">admin/123456</td><td style="text-align:center;">8880</td></tr><tr><td style="text-align:center;">Kibana控制台</td><td style="text-align:center;"><a href="./es.tianji.com">es.tianji.com</a></td><td style="text-align:center;">-</td><td style="text-align:center;">5601</td></tr><tr><td style="text-align:center;">微服务网关</td><td style="text-align:center;"><a href="./api.tianji.com">api.tianji.com</a></td><td style="text-align:center;">-</td><td style="text-align:center;">10010</td></tr><tr><td style="text-align:center;">用户端入口</td><td style="text-align:center;"><a href="./www.tianji.com">www.tianji.com</a></td><td style="text-align:center;">-</td><td style="text-align:center;">18081</td></tr><tr><td style="text-align:center;">管理端入口</td><td style="text-align:center;"><a href="./manage.tianji.com">manage.tianji.com</a></td><td style="text-align:center;">-</td><td style="text-align:center;">18082</td></tr></tbody></table><p>同样，我们访问用户端或者管理端页面时，也会被Nginx反向代理：</p><p><img src="'+f+'" alt="img" loading="lazy"></p><p>当我们访问www.tianji.com时，请求会被代理到虚拟机中的<code> /usr/local/src/tj-portal</code>目录中的静态资源</p><p>当页面访问<a href="./api.tianji.com">api.tianji.com</a>时，请求会被代理到虚拟机中的网关服务。</p><br><h3 id="部署" tabindex="-1">部署 <a class="header-anchor" href="#部署" aria-label="Permalink to &quot;部署&quot;">​</a></h3><p>在企业开发中，微服务项目非常庞大，往往有十几个，甚至数十个，数百个微服务。而这些微服务也会交给不同的开发组去完成开发。你可能只参与其中的某几个微服务开发，那么问题来了：</p><p>如果我的微服务需要访问其它微服务怎么办？</p><p>难道说我需要把所有的微服务都部署到自己的电脑吗？</p><p>很明显，这样做是不现实的。第一，不是所有的代码你都有访问的权限；第二，你的电脑可能无法运行这数十、数百的微服务。</p><p>因此，公司往往会给我们部署一套开发环境，在上面运行那些经过测试的可部署的微服务。而多数情况下我们是面向接口编程，功能自测完成后再与公司开发环境的其它微服务联调。</p><p>为了模拟真实环境，我们在虚拟机中已经提供了一套持续集成的开发环境，代码一旦自测完成，push到Git私服后即可自动编译部署。</p><p>而开发我们负责的微服务时，则需要在本地启动运行部分微服务。</p><br><h4 id="虚拟机部署" tabindex="-1">虚拟机部署 <a class="header-anchor" href="#虚拟机部署" aria-label="Permalink to &quot;虚拟机部署&quot;">​</a></h4><p>项目已经基于Jenkins实现了持续集成，每当我们push代码时，就会触发项目完成自动编译和打包。而需要运行某个微服务时，我们只需要经过两步：</p><ul><li>第一步，访问jenkins控制台：<a href="http://jenkins.tianji.com/" target="_blank" rel="noreferrer">http://jenkins.tianji.com</a> (账号：root/123)</li><li>第二步，点击对应微服务后面的运行按钮</li></ul><p><img src="'+q+'" alt="img" loading="lazy"></p><p>构建过程中，可以在页面左侧看到构建进度，如果没有说明构建已经结束了（你的机器速度太快了！）：</p><p><img src="'+w+'" alt="img" loading="lazy"></p><p>完成后，点击对应的微服务名称【例如tj-gateway】，即可进入构建任务的详情页面，在页面左侧可以看到构建历史：</p><p><img src="'+v+'" alt="img" loading="lazy"></p><p>其中#1代表第一次构建，点击前面的√即可查看构建日志：</p><p><img src="'+z+'" alt="img" loading="lazy"></p><p>看到上面的日志，说明构建已经成功，容器也成功运行了。</p><p>我们需要分别启动几个开发完成的微服务：</p><ul><li><code>tj-user</code></li><li><code>tj-auth</code></li><li><code>tj-gateway</code></li><li><code>tj-course</code></li><li><code>tj-media</code></li><li><code>tj-search</code></li><li><code>tj-exam</code></li><li><code>tj-data</code></li></ul><p>此时访问Nacos控制台，可以看到微服务都成功注册了：</p><p><img src="'+P+'" alt="img" loading="lazy"></p><p>此时访问 <a href="http://www.tianji.com/" target="_blank" rel="noreferrer">http://www.tianji.com</a> 即可看到用户端页面：</p><p><img src="'+M+'" alt="img" loading="lazy"></p><p>此时访问 <a href="http://manage.tianji.com/" target="_blank" rel="noreferrer">http://manage.tianji.com</a> 即可看到管理端页面：</p><p><img src="'+U+'" alt="img" loading="lazy"></p><p>如果想要知道微服务具备哪些API接口，可以访问网关中的swagger页面，路径如下：</p><p><a href="http://api.tianji.com/doc.html" target="_blank" rel="noreferrer">http://api.tianji.com/doc.html</a></p><p><img src="'+G+'" alt="img" loading="lazy"></p><p>其中可以查看所有微服务的接口信息</p><h4 id="本地部署" tabindex="-1">本地部署 <a class="header-anchor" href="#本地部署" aria-label="Permalink to &quot;本地部署&quot;">​</a></h4><p>对于需要开发功能的微服务，则需要在本地部署，不过首先我们要把代码拉取下来。</p><p>查看Git私服的代码：<a href="http://git.tianji.com/tjxt/tianji" target="_blank" rel="noreferrer">http://git.tianji.com/tjxt/tianji</a> ：</p><p><img src="'+S+'" alt="img" loading="lazy"></p><p>利用命令将代码克隆到你的IDEA工作空间中：</p><div class="language-Bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> clone http://192.168.150.101:10880/tjxt/tianji.git -b lesson-init</span></span></code></pre></div><p><img src="'+R+`" alt="img" loading="lazy"></p><p>注意，开发时需要使用dev分支，因此我们需要创建新的分支：</p><div class="language-Bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 进入项目目录</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> tianji</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 创建新的分支</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> checkout -b dev</span></span></code></pre></div><p>为了方便我们教学，目前所有微服务代码都聚合在了一个Project中，如图：</p><p><img src="`+N+'" alt="img" loading="lazy"></p><p>在默认情况下，微服务启用的是dev配置，如果要在本地运行，需要设置profile为local：</p><p><img src="'+I+'" alt="img" loading="lazy"></p><p>可以在本地启动<code>ExamApplication</code>，然后我们去Nacos控制台查看exam-service，可以看到有两个实例，分别是虚拟机IP和宿主机IP：</p><p><img src="'+O+'" alt="img" loading="lazy"></p><h2 id="修复bug" tabindex="-1">修复BUG <a class="header-anchor" href="#修复bug" aria-label="Permalink to &quot;修复BUG&quot;">​</a></h2><p>在刚刚进入项目组后，一般不会布置开发任务，而是先熟悉项目代码。为了帮助大家熟悉整个项目，我们预留了一个BUG，让大家在修复BUG的过程中熟悉项目代码。</p><p>一般修复BUG的过程是这样的：</p><ul><li>熟悉项目</li><li>阅读源码</li><li>分析解决</li><li>测试部署</li></ul><p>因此，解决BUG的过程，就是熟悉项目的过程。</p><br><h3 id="熟悉项目" tabindex="-1">熟悉项目 <a class="header-anchor" href="#熟悉项目" aria-label="Permalink to &quot;熟悉项目&quot;">​</a></h3><p>熟悉项目的第一步是熟悉项目的结构、用到的技术、编码的一些规范等。</p><br><h4 id="项目结构" tabindex="-1">项目结构 <a class="header-anchor" href="#项目结构" aria-label="Permalink to &quot;项目结构&quot;">​</a></h4><p>我们先来看看项目结构，目前企业微服务开发项目结构有两种模式：</p><ul><li>项目下的每一个微服务，都创建为一个独立的Project，有独立的Git仓库，尽可能降低耦合</li><li>项目创建一个Project，项目下的每一个微服务都是一个Module，方便管理</li></ul><p>方案一：更适合于大型项目，架构更为复杂，管理和维护成本都比较高；</p><p>方案二：更适合中小型项目，架构更为简单，管理和维护成本都比较低；</p><p>天机学堂采用的正是第二种模式，结构如图：</p><p><img src="'+V+'" alt="image-20240218171801762" loading="lazy"></p><p>对应到我们项目中每个模块及功能如下：</p><p><img src="'+$+'" alt="img" loading="lazy"></p><p>当我们要创建新的微服务时，也必须以<code>tjxt</code>为父工程，创建一个子<code>module</code>. 例如交易微服务：</p><p><img src="'+L+'" alt="img" loading="lazy"></p><p>微服务<code>module</code>中如果有对外暴露的Feign接口，需要定义到<code>tj-api</code>模块中：</p><p><img src="'+H+'" alt="img" loading="lazy"></p><br><h4 id="实体类规范" tabindex="-1">实体类规范 <a class="header-anchor" href="#实体类规范" aria-label="Permalink to &quot;实体类规范&quot;">​</a></h4><p>在天机学堂项目中，所有实体类按照所处领域不同，划分为4种不同类型：</p><ul><li>DTO：数据传输对象，在客户端与服务端间传递数据，例如微服务之间的请求参数和返回值、前端提交的表单</li><li>PO：持久层对象，与数据库表一一对应，作为查询数据库时的返回值</li><li>VO：视图对象，返回给前端用于封装页面展示的数据</li><li>QUERY：查询对象，一般是用于封装复杂查询条件</li></ul><p>例如交易服务：</p><p><img src="'+Y+'" alt="img" loading="lazy"></p><br><h4 id="依赖注入" tabindex="-1">依赖注入 <a class="header-anchor" href="#依赖注入" aria-label="Permalink to &quot;依赖注入&quot;">​</a></h4><p>Spring提供了依赖注入的功能，方便我们管理和使用各种Bean，常见的方式有：</p><ul><li>字段注入（<code>@Autowired</code> 或 <code>@Resource</code>）</li><li>构造函数注入</li><li>set方法注入</li></ul><p>在以往代码中，我们经常利用Spring提供的<code>@Autowired</code>注解来实现依赖注入：</p><p><img src="'+J+'" alt="img" loading="lazy"></p><p>不过，这种模式是不被Spring推荐的，Spring推荐的是基于构造函数注入，像这样：</p><p><img src="'+T+'" alt="img" loading="lazy"></p><p>但是，如果需要注入的属性较多，构造函数就会非常臃肿，代码写起来也比较麻烦。</p><p>好在Lombok提供了一个注解<code>@RequiredArgsConstructor</code>，可以帮我们生成构造函数，简化代码：</p><p><img src="'+W+'" alt="img" loading="lazy"></p><p>这样一来，不管需要注入的字段再多，我们也只需要一个注解搞定：</p><p><img src="'+X+'" alt="img" loading="lazy"></p><br><h4 id="异常处理" tabindex="-1">异常处理 <a class="header-anchor" href="#异常处理" aria-label="Permalink to &quot;异常处理&quot;">​</a></h4><p>在项目运行过程中，或者业务代码流程中，可能会出现各种类型异常，为了加以区分，我们定义了一些自定义异常对应不同场景：</p><p><img src="'+K+`" alt="img" loading="lazy"></p><p>在开发业务的过程中，如果出现对应类型的问题，应该优先使用这些自定义异常。</p><p>当微服务抛出这些异常时，需要一个统一的异常处理类，同样在<code>tj-common</code>模块中定义了：</p><div class="language-Java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">RestControllerAdvice</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Slf4j</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CommonExceptionAdvice</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ExceptionHandler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(DbException.class)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Object </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">handleDbException</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(DbException </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        log.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;mysql数据库操作异常 -&gt; &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, e);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> processResponse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(e.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getStatus</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), e.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getCode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), e.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getMessage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ExceptionHandler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CommonException.class)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Object </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">handleBadRequestException</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CommonException </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        log.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;自定义异常 -&gt; {} , 状态码：{}, 异常原因：{}  &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,e.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getClass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), e.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getStatus</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), e.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getMessage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        log.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">debug</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, e);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> processResponse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(e.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getStatus</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), e.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getCode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), e.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getMessage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ExceptionHandler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(FeignException.class)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Object </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">handleFeignException</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(FeignException </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        log.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;feign远程调用异常 -&gt; &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, e);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> processResponse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(e.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">status</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), e.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">status</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), e.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">contentUTF8</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ExceptionHandler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(MethodArgumentNotValidException.class)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Object </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">handleMethodArgumentNotValidException</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(MethodArgumentNotValidException </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        String msg </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> e.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getBindingResult</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getAllErrors</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">stream</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ObjectError</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">getDefaultMessage)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">collect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Collectors.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">joining</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;|&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        log.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;请求参数校验异常 -&gt; {}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, msg);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        log.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">debug</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, e);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> processResponse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">400</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">400</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, msg);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ExceptionHandler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(BindException.class)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Object </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">handleBindException</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(BindException </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        log.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;请求参数绑定异常 -&gt;BindException， {}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, e.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getMessage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        log.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">debug</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, e);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> processResponse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">400</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">400</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;请求参数格式错误&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ExceptionHandler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(NestedServletException.class)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Object </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">handleNestedServletException</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(NestedServletException </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        log.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;参数异常 -&gt; NestedServletException，{}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, e.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getMessage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        log.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">debug</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, e);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> processResponse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">400</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">400</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;请求参数异常&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ExceptionHandler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ConstraintViolationException.class)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Object </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">handViolationException</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ConstraintViolationException </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        log.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;请求参数异常 -&gt; ConstraintViolationException, {}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, e.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getMessage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> processResponse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">( HttpStatus.OK.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), HttpStatus.BAD_REQUEST.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                e.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getConstraintViolations</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">stream</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ConstraintViolation</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">getMessage).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">distinct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">collect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Collectors.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">joining</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;|&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                );</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ExceptionHandler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Exception.class)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Object </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">handleRuntimeException</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Exception </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        log.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;其他异常 uri : {} -&gt; &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, WebUtils.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getRequest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getRequestURI</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), e);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> processResponse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">500</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">500</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;服务器内部异常&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Object </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">processResponse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> status</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> code</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, String </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">msg</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 1.标记响应异常已处理（避免重复处理）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        WebUtils.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setResponseHeader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Constant.BODY_PROCESSED_MARK_HEADER, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;true&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 2.如果是网关请求，http状态码修改为200返回，前端基于业务状态码code来判断状态</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 如果是微服务请求，http状态码基于异常原样返回，微服务自己做fallback处理</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> WebUtils.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isGatewayRequest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                R.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(code, msg).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">requestId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(MDC.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Constant.REQUEST_ID_HEADER))</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                :</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ResponseEntity.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">status</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(status).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">body</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(msg);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><br><h4 id="配置文件" tabindex="-1">配置文件 <a class="header-anchor" href="#配置文件" aria-label="Permalink to &quot;配置文件&quot;">​</a></h4><p>SpringBoot的配置文件支持多环境配置，在天机学堂中也基于不同环境有不同配置文件：</p><p><img src="`+Q+'" alt="img" loading="lazy"></p><p>说明：</p><table><thead><tr><th style="text-align:center;"><strong>文件</strong></th><th style="text-align:center;"><strong>说明</strong></th></tr></thead><tbody><tr><td style="text-align:center;">bootstrap.yml</td><td style="text-align:center;">通用配置属性，包含服务名、端口、日志等等各环境通用信息</td></tr><tr><td style="text-align:center;">bootstrap-dev.yml</td><td style="text-align:center;">线上开发环境配置属性，虚拟机中部署使用</td></tr><tr><td style="text-align:center;">bootstrap-local.yml</td><td style="text-align:center;">本地开发环境配置属性，本地开发、测试、部署使用</td></tr></tbody></table><p>项目中的很多共性的配置都放到了Nacos配置中心管理：</p><p><img src="'+Z+'" alt="img" loading="lazy"></p><p>例如<code>mybatis</code>、<code>mq</code>、<code>redis</code>等，都有对应的<code>shared-xxx.yaml</code>共享配置文件。在微服务中如果用到了相关技术，无需重复配置，只要引用上述共享配置即可：</p><p><img src="'+ss+'" alt="img" loading="lazy"></p><br><p><strong>bootstrap.yml</strong></p><p>我们来看看<code>bootstrap.yml</code>文件的基本内容：</p><p><img src="'+is+`" alt="img" loading="lazy"></p><p>接下来，我们就分别看看每一个共享的配置文件内容。</p><br><p><strong>shared-spring.yml</strong></p><div class="language-YAML vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">YAML</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">spring</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  jackson</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    default-property-inclusion</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">non_null</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 忽略json处理时的空值字段</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    allow-bean-definition-overriding</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 允许同名Bean重复定义</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  mvc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    pathmatch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      # 解决异常：swagger Failed to start bean &#39;documentationPluginsBootstrapper&#39;; nested exception is java.lang.NullPointerException</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      # 因为Springfox使用的路径匹配是基于AntPathMatcher的，而Spring Boot 2.6.X使用的是PathPatternMatcher</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      matching-strategy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">ant_path_matcher</span></span></code></pre></div><br><p><strong>shared-mybatis.yaml</strong></p><div class="language-YAML vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">YAML</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">mybatis-plus</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  configuration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 默认的枚举处理器</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    default-enum-type-handler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">com.baomidou.mybatisplus.core.handlers.MybatisEnumTypeHandler</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  global-config</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    field-strategy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    db-config</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      logic-delete-field</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">deleted</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # mybatis逻辑删除字段</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      id-type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">assign_id</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 默认的id策略是雪花算法id</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">spring</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  datasource</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    driver-class-name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">com.mysql.cj.jdbc.Driver</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 数据库驱动</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    url</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">jdbc:mysql://\${tj.jdbc.host:192.168.150.101}:\${tj.jdbc.port:3306}/\${tj.jdbc.database}?useUnicode=true&amp;characterEncoding=UTF-8&amp;autoReconnect=true&amp;serverTimezone=Asia/Shanghai</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    username</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\${tj.jdbc.username:root}</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    password</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\${tj.jdbc.password:123}</span></span></code></pre></div><p>注意到这里把mybatis的datasource都配置了，不过由于jdbc连接时的数据库ip、端口，数据库名、用户名、密码是不确定的，这里做了参数映射：</p><table><thead><tr><th style="text-align:center;"><strong>参数名</strong></th><th style="text-align:center;"><strong>描述</strong></th><th style="text-align:center;"><strong>默认值</strong></th></tr></thead><tbody><tr><td style="text-align:center;">tj.jdbc.host</td><td style="text-align:center;">主机名</td><td style="text-align:center;">192.168.150.101，也就是虚拟机ip</td></tr><tr><td style="text-align:center;">tj.jdbc.port</td><td style="text-align:center;">数据库端口</td><td style="text-align:center;">3306</td></tr><tr><td style="text-align:center;">tj.jdbc.database</td><td style="text-align:center;">数据库database名称</td><td style="text-align:center;">无</td></tr><tr><td style="text-align:center;">tj.jdbc.username</td><td style="text-align:center;">数据库用户名</td><td style="text-align:center;">root</td></tr><tr><td style="text-align:center;">tj.jdbc.password</td><td style="text-align:center;">数据库密码</td><td style="text-align:center;">123</td></tr></tbody></table><p>除了<code>tj.jdbc.database</code>外，其它参数都有默认值，在没有配置的情况下会按照默认值来配置，也可以按照参数名来自定义这些参数值。其中<code>tj.jdbc.database</code>是必须自定义的值，例如在交易服务中：</p><div class="language-YAML vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">YAML</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">tj</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  jdbc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    database</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">tj_trade</span></span></code></pre></div><br><p><strong>shared-mq.yaml</strong></p><div class="language-YAML vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">YAML</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">spring</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  rabbitmq</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    host</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\${tj.mq.host:192.168.150.101}</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # mq的IP</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    port</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\${tj.mq.port:5672}</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    virtual-host</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\${tj.mq.vhost:/tjxt}</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    username</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\${tj.mq.username:tjxt}</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    password</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\${tj.mq.password:123321}</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    listener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      simple</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        retry</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">          enabled</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\${tj.mq.listener.retry.enable:true}</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 开启消费者失败重试</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">          initial-interval</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\${tj.mq.listener.retry.interval:1000ms}</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 初始的失败等待时长为1秒</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">          multiplier</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\${tj.mq.listener.retry.multiplier:1}</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 失败的等待时长倍数，下次等待时长 = multiplier * last-interval</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">          max-attempts</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\${tj.mq.listener.retry.max-attempts:3}</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 最大重试次数</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">          stateless</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\${tj.mq.listener.retry.stateless:true}</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # true无状态；false有状态。如果业务中包含事务，这里改为false</span></span></code></pre></div><p>这里配置了mq的基本配置，例如地址、端口等，默认就是tjxt的地址，不需要修改。另外还配置类消费者的失败重试机制，如有需要可以按需修改。</p><br><p><strong>shared-redis.yaml</strong></p><div class="language-YAML vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">YAML</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">spring</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  redis</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    host</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\${tj.redis.host:192.168.150.101}</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    password</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\${tj.redis.password:123321}</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    lettuce</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      pool</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        max-active</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\${tj.redis.pool.max-active:8}</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        max-idle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\${tj.redis.pool.max-idle:8}</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        min-idle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\${tj.redis.pool.min-idle:1}</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        max-wait</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\${tj.redis.pool.max-wait:300}</span></span></code></pre></div><p>注意配置了Redis的基本地址和连接池配置，省去了我们大部分的工作</p><br><p><strong>shared-feign.yaml</strong></p><div class="language-YAML vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">YAML</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">feign</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  client</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    config</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># default全局的配置</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        loggerLevel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">BASIC</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 日志级别，BASIC就是基本的请求和响应信息</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  httpclient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    enabled</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 开启feign对HttpClient的支持</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    max-connections</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">200</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 最大的连接数</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    max-connections-per-route</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">50</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 每个路径的最大连接数</span></span></code></pre></div><p>这里配置了默认的Feign日志级别以及连接池配置，一般不需要修改。</p><br><p><strong>shared-xxljob.yaml</strong></p><div class="language-YAML vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">YAML</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">tj</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  xxl-job</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    access-token</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">tianji</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    admin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      address</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">http://192.168.150.101:8880/xxl-job-admin</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    executor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      appname</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\${spring.application.name}</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      log-retention-days</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      logPath</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">job/\${spring.application.name}</span></span></code></pre></div><p>这里配置了xxl-job组件的地址等信息，一般不需要修改。</p><br><h3 id="阅读源码" tabindex="-1">阅读源码 <a class="header-anchor" href="#阅读源码" aria-label="Permalink to &quot;阅读源码&quot;">​</a></h3><p>阅读源码也不是闷头乱找，而是有一定的技巧。一般阅读源码的流程如下：</p><p><img src="`+as+'" alt="img" loading="lazy"></p><br><h4 id="bug重现" tabindex="-1">BUG重现 <a class="header-anchor" href="#bug重现" aria-label="Permalink to &quot;BUG重现&quot;">​</a></h4><p>首先，我们来看还原一下BUG现场。</p><p>我们用杰克用户登录（jack/123），删除一个订单，发现删除成功：</p><p><img src="'+ts+'" alt="img" loading="lazy"></p><p>我们切换到萝丝用户登录（rose/123456），再次删除一个订单：</p><p><img src="'+ns+'" alt="img" loading="lazy"></p><p>发现删除失败，这是什么情况？？</p><br><h4 id="请求链路" tabindex="-1">请求链路 <a class="header-anchor" href="#请求链路" aria-label="Permalink to &quot;请求链路&quot;">​</a></h4><p>如果是我们自己写的代码，肯定很容易找到业务入口、整个业务线路。但现在我们是接手他人项目，所以只能通过其它途径来梳理业务：</p><ul><li>如果开发业务的同事还在，直接与开发该业务的同事交流</li><li>如果开发者已离职，可以查看相关接口文档</li><li>如果没有文档，也可以查看前端请求，顺藤摸瓜</li></ul><p>此处由于我们没有人可以交流，只能通过查看前端请求来分析了。经过查看，页面删除订单的请求如下：</p><p><img src="'+ls+'" alt="img" loading="lazy"></p><p>按照之前我们的环境部署方案，<code>api.tianji.com</code> 这个域名会被解析到 <code>192.168.150.101</code> 这个地址，然后被 <code>Nginx</code> 反向代理到网关微服务。</p><p>而网关则会根据请求路径和路由规则，把请求再路由到具体微服务。这里请求路径以 <code>/ts</code> 开头，对应的微服务是 <code>trade-service</code>，也就是交易微服务。</p><p>这样，整个请求链路就比较清楚了：</p><p><img src="'+es+'" alt="image-20240218172359692" loading="lazy"></p><p>找到了具体的微服务，接下来，我们就进入微服务，查看对应源码，找出问题即可。</p><p>请求到达交易服务后的路径是<code> /orders/{id}</code>，对应的 <code>controller</code> 是：</p><p><img src="'+ps+'" alt="img" loading="lazy"></p><p>跟入service代码：</p><p><img src="'+hs+'" alt="img" loading="lazy"></p><p>这样就找到了BUG发生的代码块了，现在只需要通过DEBUG调试来发现问题产生的原因就可以了。</p><br><h3 id="远程调试" tabindex="-1">远程调试 <a class="header-anchor" href="#远程调试" aria-label="Permalink to &quot;远程调试&quot;">​</a></h3><p>由于交易服务属于开发环境已经部署的服务，我们无法在本地调试，这在今后的开发中会经常碰到。遇到这样的情况我们就需要利用IDEA提供的远程调试功能。</p><br><h4 id="本地配置" tabindex="-1">本地配置 <a class="header-anchor" href="#本地配置" aria-label="Permalink to &quot;本地配置&quot;">​</a></h4><p>首先，我们需要对本地启动项做一些配置：</p><p><img src="'+ks+'" alt="img" loading="lazy"></p><p>然后添加一个新的启动项：</p><p><img src="'+rs+'" alt="img" loading="lazy"></p><p>在新建的 <code>Configuration</code> 中填写信息：</p><p><img src="'+ds+'" alt="img" loading="lazy"></p><p>此时，就可以在启动项中看到我们配置的远程调试项目了：</p><p><img src="'+gs+'" alt="img" loading="lazy"></p><br><h4 id="远程调试-1" tabindex="-1">远程调试 <a class="header-anchor" href="#远程调试-1" aria-label="Permalink to &quot;远程调试&quot;">​</a></h4><p>仅仅本地配置还不够，我们还需要在虚拟机中部署时，添加一段配置到部署脚本中，这段配置IDEA已经提供给我们了：</p><p><img src="'+Es+'" alt="img" loading="lazy"></p><p>我们需要在启动时加上这段参数，像这样：</p><div class="language-Shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">java</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -jar</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:5005</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> xx.jar</span></span></code></pre></div><p>不过我们的项目都是基于Jenkins来部署的，因此需要修改Jenkins部署脚本。部署脚本我也已经帮大家配置好了，我们直接运行即可：</p><p><img src="'+os+'" alt="img" loading="lazy"></p><p>部署完成后，可以看到 <code>tj-trade</code> 多暴露了一个5005端口，就是远程调试的端口了：</p><p><img src="'+cs+'" alt="img" loading="lazy"></p><h4 id="开始调试" tabindex="-1">开始调试 <a class="header-anchor" href="#开始调试" aria-label="Permalink to &quot;开始调试&quot;">​</a></h4><p>现在，我们就可以在需要的地方打上断点，然后DEBUG运行了：</p><p><img src="'+ys+'" alt="img" loading="lazy"></p><p>访问页面请求，就可以进入DEBUG断点了。</p><p>经过断点，可以发现断点所属用户判断出现问题的原因了：</p><p><img src="'+ms+'" alt="img" loading="lazy"></p><p>我们在判断用户id时使用了<code>!=</code>来判断，由于id是Long 类型，因此判断的是id对应的地址而不是值，所以萝丝用户的userId虽然都是129，但地址不同，判断自然不成立。</p><p>但问题来了，为什么杰克用户就可以删除成功呢？</p><p>再次以杰克发起请求，进入断点：</p><p><img src="'+Fs+'" alt="img" loading="lazy"></p><p>可以发现杰克的id是2，两个userId的地址是一样的！！</p><p>为什么userId为2的时候判断相等可以成立，而userId是129的时候判断相等不成立呢？</p><p>这是因为userId是Long类型包装类。包装类为了提高性能，减少内存占用，采用了享元模式，提前将-128~127之间的Long包装类提前创建出来，共享使用。</p><p>因此只要大小范围在者之间的数字，只要值相同，使用的都是享元模式中提供的同一个对象。杰克的id是2，恰好在范围内；而萝丝的id是129，刚好超过了这个范围。这就导致了杰克可以删除自己订单，而萝丝无法删除的现象。</p><p>这就说明，我们此处判断userId是否相等的方式是错误的，不能基于<code>!=</code>来判断，而是应该比较值，使用equals。</p><br><h3 id="修复bug-1" tabindex="-1">修复BUG <a class="header-anchor" href="#修复bug-1" aria-label="Permalink to &quot;修复BUG&quot;">​</a></h3><p>既然找到了BUG产生的原因，接下来就可以来修复BUG了。</p><br><h4 id="分支管理" tabindex="-1">分支管理 <a class="header-anchor" href="#分支管理" aria-label="Permalink to &quot;分支管理&quot;">​</a></h4><p>一般我们不建议大家直接在Dev分支直接修改代码。在企业中都有一套分支管理机制，称为GitFlow，大概如图所示：</p><p><img src="'+us+'" alt="img" loading="lazy"></p><p>说明：</p><ul><li><strong>Master</strong>：主分支，用于正式发布的分支。不可直接基于该分支提交。只有经过严格审核测试后的<code>Develop</code> 或 <code>Hotfix</code> 分支可以合并到 <code>Master</code></li><li><strong>Develop</strong>：开发分支，从 <code>Master</code> 创建得来。功能开发的基础分支。</li><li><strong>Feature</strong>：功能分支，从 <code>Develop</code> 分支创建得来。开发测试完成后会合并到 <code>Develop</code> 分支。</li><li><strong>Release</strong>：预发布分支，当 <code>Develop</code> 上积累了一定的功能特性后，从 <code>Develop</code> 分支创建一个<code>Release</code> 分支，做一些发布前的准备工作，不可开发功能。最终合并到 <code>Master</code> 分支和 <code>Develop</code>分支。</li><li><strong>Hotfix</strong>：热修复分支，当 <code>Master</code> 出现紧急BUG时，基于 <code>Master</code> 临时创建的分支，修复完成后合并到 <code>Develop</code> 和 <code>Master</code> 分支。</li></ul><p>在咱们项目中，<code>master</code> 分支用来给大家提供完整版本代码了，而 <code>lesson-init</code> 分支作为初始化分支。因此一般不使用 <code>master</code> 分支，而是把 <code>lesson-init</code> 当做 <code>master</code> 分支来用。开发用的 <code>dev</code> 分支就等于 <code>GitFlow</code> 中的 <code>Develop</code> 分支。</p><p>因此，这里建议大家在 <code>dev</code> 分支基础上创建一个 <code>Hotfix</code> 分支，用以修改 <code>BUG</code>，可以通过命令来创建该分支：</p><div class="language-Shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> checkout -b hotfix-delete-order-error</span></span></code></pre></div><p><img src="'+bs+'" alt="img" loading="lazy"></p><br><h4 id="修复bug-2" tabindex="-1">修复BUG <a class="header-anchor" href="#修复bug-2" aria-label="Permalink to &quot;修复BUG&quot;">​</a></h4><p>接下来，就可以修复BUG了，其实非常简单，不要使用<code>!=</code>判断，而是改用<code>equals</code>即可：</p><p><img src="'+Bs+'" alt="img" loading="lazy"></p><p>接下来，提交代码：</p><p><img src="'+js+'" alt="img" loading="lazy"></p><p>然后切换会Dev分支，并将hotfix-delete-order-error分支合并到dev分支，然后删除：</p><p><img src="'+xs+'" alt="img" loading="lazy"></p><br><h3 id="测试部署" tabindex="-1">测试部署 <a class="header-anchor" href="#测试部署" aria-label="Permalink to &quot;测试部署&quot;">​</a></h3><p>一般的测试步骤是这样的：</p><p><img src="'+Cs+'" alt="img" loading="lazy"></p><p>由于我们这里的修改比较简单，这里就不做单元测试了。</p><br><h4 id="接口测试" tabindex="-1">接口测试 <a class="header-anchor" href="#接口测试" aria-label="Permalink to &quot;接口测试&quot;">​</a></h4><p>我们首先基于swagger做本地接口测试，在本地启动tj-trade项目，然后访问swagger页面：</p><p><a href="http://localhost:8088/doc.html" target="_blank" rel="noreferrer">http://localhost:8088/doc.html</a> ，找到删除订单接口：</p><p><img src="'+Ds+'" alt="img" loading="lazy"></p><p>由于删除订单时需要对登录用户做校验，因此需要先设置用户id的全局参数：</p><p><img src="'+As+'" alt="img" loading="lazy"></p><p><img src="'+_s+'" alt="img" loading="lazy"></p><p>微服务获取用户是基于请求头来传递的，因此我们设置全局参数时添加一个user-info的请求头参数即可。</p><p>然后<strong>刷新页面</strong>，来再次找到删除订单接口，进行调试，发现当用户id不对时，删除会失败：</p><p><img src="'+fs+'" alt="img" loading="lazy"></p><p>当用户id正确时，删除成功：</p><p><img src="'+qs+'" alt="img" loading="lazy"></p><br><h4 id="组件测试" tabindex="-1">组件测试 <a class="header-anchor" href="#组件测试" aria-label="Permalink to &quot;组件测试&quot;">​</a></h4><p>接下来让我们的服务与网关联调，再次测试。</p><p>不过问题来了，现在我们在本地启动了交易服务，而虚拟机中也启动了交易服务：</p><p><img src="'+ws+'" alt="img" loading="lazy"></p><p>当我们请求网关时，如何保证请求一定进入本地启动的服务呢？</p><p>这里有两种办法：</p><ul><li>关停虚拟机中启动的交易服务</li><li>将虚拟机中启动的交易服务权重设置为0</li></ul><p>权重设置：</p><p><img src="'+vs+'" alt="img" loading="lazy"></p><p>接下来，通过浏览器访问前端页面，然后点击删除订单测试即可。</p><br><h4 id="部署联调" tabindex="-1">部署联调 <a class="header-anchor" href="#部署联调" aria-label="Permalink to &quot;部署联调&quot;">​</a></h4><p>最后，测试没有问题，我们就可以将代码部署到开发环境去了。</p><p>我们在 <code>Jenkins</code> 中配置了 <code>web</code> 钩子，代码推送后自动触发构建。不过需要注意的是，默认情况下我们推送的代码不管是哪个分支都会触发构建，而且构建默认是基于 <code>lesson-init</code> 分支，需要重新配置。</p><p>我们找到 <code>Jenkins</code> 控制台中的 <code>tjxt-dev-build</code> 任务：</p><p><img src="'+zs+'" alt="img" loading="lazy"></p><p>修改其中的配置。</p><p>第一个是哪些分支变化以后触发构建：</p><p><img src="'+Ps+'" alt="img" loading="lazy"></p><p>第二个是构建时基于哪个分支构建：</p><p><img src="'+Ms+'" alt="img" loading="lazy"></p><p>然后选择提交dev分支，并push到远端仓库：</p><p><img src="'+Us+'" alt="img" loading="lazy"></p><p><img src="'+Gs+'" alt="img" loading="lazy"></p><p>然后到控制台，重新构建<code>tj-trade</code>服务：</p><p><img src="'+Ss+'" alt="img" loading="lazy"></p><p>将本地服务停止，修改 <code>nacos</code> 中的虚拟机中的 <code>tj-trade</code> 实例权重为1：</p><p><img src="'+Rs+'" alt="img" loading="lazy"></p><p>再次测试即可。</p>',352);function Vs(s,$s,Ls,Hs,Ys,Js){const e=t("ArticleMetadata"),p=t("ClientOnly");return l(),k("div",null,[Is,r(p,null,{default:d(()=>{var i,a;return[(((i=s.$frontmatter)==null?void 0:i.aside)??!0)&&(((a=s.$frontmatter)==null?void 0:a.showArticleMetadata)??!0)?(l(),o(e,{key:0,article:s.$frontmatter},null,8,["article"])):c("",!0)]}),_:1}),Os])}const Xs=h(Ns,[["render",Vs]]);export{Ws as __pageData,Xs as default};
