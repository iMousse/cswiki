import{_ as s,c as i,o as a,V as p}from"./chunks/framework.syB9hai_.js";const t="/cswiki/assets/20240209112331436.KlYQ8Zix.png",l="/cswiki/assets/20240209112331451.ssjEsXOc.png",n="/cswiki/assets/20240209112331460.4TAdeDT4.png",e="/cswiki/assets/20240209112331480.Ud0Ft3Es.png",h="/cswiki/assets/20240209112331572._XsuYhJF.png",r="/cswiki/assets/20240209112331630.4hkd1Epv.png",g="/cswiki/assets/20240209112331585.-FkYPQdp.png",k="/cswiki/assets/20240209112331621.qXJo7MA2.png",o="/cswiki/assets/20240209112331618.8RxEmD81.png",c="/cswiki/assets/20240209112331682.0Lpx8dPG.png",d="/cswiki/assets/20240209112327189.Bb3dnKqv.png",m="/cswiki/assets/20240209112331781.s3i5gg2z.png",E="/cswiki/assets/20240209112331850.spi7Pkbs.png",y="/cswiki/assets/20240209112331780.PQf_Ajgq.png",C="/cswiki/assets/20240209112331812.UVhuAimU.png",_="/cswiki/assets/20240209112331832.Qf7BIugd.png",u="/cswiki/assets/20240209112331865.JT-S3r8S.png",G="/cswiki/assets/20240209112331945.bwNxW2_p.png",X="/cswiki/assets/20240209112332015.yx6SFAgp.png",D="/cswiki/assets/20240209112331966.CwM23f4q.png",b="/cswiki/assets/20240209112332012.W1hqUCr5.png",F="/cswiki/assets/20240209112332006.LWgPaaQw.png",w="/cswiki/assets/20240209112332051.m1diO2Xl.png",f="/cswiki/assets/20240209112332139.jo1fhUrL.png",z="/cswiki/assets/20240209112332153.QVjnVp0D.png",A="/cswiki/assets/20240209112332205.MPbuYnQr.png",v="/cswiki/assets/20240209112332183.wW4dr9Yh.png",P="/cswiki/assets/20240209112332233.k5oIxKwg.png",M="/cswiki/assets/20240209112332339.GlwPSC-Z.png",x="/cswiki/assets/20240209112332329.zygKsWDP.png",q="/cswiki/assets/20240209112332364.ebhS117n.png",L="/cswiki/assets/20240209112332384.GbYI5Cne.png",J="/cswiki/assets/20240209112332368.E9WcawFZ.png",U="/cswiki/assets/20240209112332382.bEdRNlzi.png",S="/cswiki/assets/20240209112332478.hlpihuM4.png",V="/cswiki/assets/20240209112332536.B8EV_5FU.png",j="/cswiki/assets/20240209112332553.BW-C-Mjc.png",O="/cswiki/assets/20240209112332569.PUrm_aty.png",T="/cswiki/assets/20240209112332642.ROtKCXZE.png",N="/cswiki/assets/20240209112332570.X6Np40XW.png",K="/cswiki/assets/20240209112332644.GGwlSNd5.png",I="/cswiki/assets/20240209112332735.KZPhu4bx.png",W="/cswiki/assets/20240209112332700.zze-WZNv.png",Z="/cswiki/assets/20240209112332730.WB3gnBdy.png",H="/cswiki/assets/20240209112332742.nIvE72_6.png",R="/cswiki/assets/20240209112332841.1GZ3xlCM.png",B="/cswiki/assets/20240209112332851.ofmuFQSl.png",Q="/cswiki/assets/20240209112332884.yu7c-IWG.png",Y="/cswiki/assets/20240209112332939.-T344uiG.png",$="/cswiki/assets/20240209112332921.xSzvzyMw.png",ss="/cswiki/assets/20240209112332913.LBqtuL8e.png",is="/cswiki/assets/20240209112333004.61-O4O7C.png",as="/cswiki/assets/20240209112333032.XelqtJ0D.png",ps="/cswiki/assets/20240209112333027.v-xK4mCR.png",ts="/cswiki/assets/20240209112333072.3ebSIdP9.png",ls="/cswiki/assets/20240209112333091.OD60gYRN.png",ns="/cswiki/assets/20240209112333089.DHF5xICe.png",es="/cswiki/assets/20240209112333285.7d8OSqCs.png",hs="/cswiki/assets/20240209112333248.mAviWKmX.png",rs="/cswiki/assets/20240209112333220.XbM88Z4F.png",gs="/cswiki/assets/20240209112333286.aI8l5XT2.png",ks="/cswiki/assets/20240209112333303.EieSSQEp.png",Ds=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"src/base/jvm/jvm-tuning-gc.md","filePath":"src/base/jvm/jvm-tuning-gc.md","lastUpdated":1730648753000}'),os={name:"src/base/jvm/jvm-tuning-gc.md"},cs=p('<nav class="table-of-contents"><ul><li><a href="#gc调优">GC调优</a><ul><li><a href="#gc调优的核心指标">GC调优的核心指标</a><ul><li><a href="#垃圾回收吞吐量">垃圾回收吞吐量</a></li><li><a href="#延迟-latency">延迟（Latency）</a></li><li><a href="#内存使用量">内存使用量</a></li></ul></li><li><a href="#gc调优的步骤">GC调优的步骤</a><ul><li><a href="#发现问题-常用工具">发现问题 - 常用工具</a></li><li><a href="#常见的gc模式">常见的GC模式</a></li><li><a href="#解决gc问题的手段">解决GC问题的手段</a></li><li><a href="#优化垃圾回收器的参数">优化垃圾回收器的参数</a></li><li><a href="#案例实战">案例实战</a></li></ul></li></ul></li></ul></nav><h2 id="gc调优" tabindex="-1">GC调优 <a class="header-anchor" href="#gc调优" aria-label="Permalink to &quot;GC调优&quot;">​</a></h2><p>GC调优指的是对垃圾回收（Garbage Collection）进行调优。GC调优的主要目标是避免由垃圾回收引起程序性能下降。</p><p>GC调优的核心分成三部分：</p><p>1、通用Jvm参数的设置。</p><p>2、特定垃圾回收器的Jvm参数的设置。</p><p>3、解决由频繁的FULLGC引起的程序性能问题。</p><p>GC调优没有没有唯一的标准答案，如何调优与硬件、程序本身、使用情况均有关系，重点学习调优的工具和方法。</p><h3 id="gc调优的核心指标" tabindex="-1">GC调优的核心指标 <a class="header-anchor" href="#gc调优的核心指标" aria-label="Permalink to &quot;GC调优的核心指标&quot;">​</a></h3><p>所以判断GC是否需要调优，需要从三方面来考虑，与GC算法的评判标准类似：</p><p>1.吞吐量(Throughput) 吞吐量分为业务吞吐量和垃圾回收吞吐量</p><p>业务吞吐量指的在一段时间内，程序需要完成的业务数量。比如企业中对于吞吐量的要求可能会是这样的：</p><p>支持用户每天生成10000笔订单</p><p>在晚上8点到10点，支持用户查询50000条商品信息</p><p>保证高吞吐量的常规手段有两条：</p><p>1、优化业务执行性能，减少单次业务的执行时间</p><p>2、优化垃圾回收吞吐量</p><h4 id="垃圾回收吞吐量" tabindex="-1">垃圾回收吞吐量 <a class="header-anchor" href="#垃圾回收吞吐量" aria-label="Permalink to &quot;垃圾回收吞吐量&quot;">​</a></h4><p>垃圾回收吞吐量指的是 CPU 用于执行用户代码的时间与 CPU 总执行时间的比值，即吞吐量 = 执行用户代码时间 /（执行用户代码时间 + GC时间）。吞吐量数值越高，垃圾回收的效率就越高，允许更多的CPU时间去处理用户的业务，相应的业务吞吐量也就越高。</p><p><img src="'+t+'" alt="img" loading="lazy"></p><p><img src="'+l+'" alt="img" loading="lazy"></p><h4 id="延迟-latency" tabindex="-1">延迟（Latency） <a class="header-anchor" href="#延迟-latency" aria-label="Permalink to &quot;延迟（Latency）&quot;">​</a></h4><ol><li><p>延迟指的是从用户发起一个请求到收到响应这其中经历的时间。比如企业中对于延迟的要求可能会是这样的：</p></li><li><p>所有的请求必须在5秒内返回给用户结果</p></li><li><p>延迟 = GC延迟 + 业务执行时间，所以如果GC时间过长，会影响到用户的使用。</p></li></ol><p><img src="'+n+'" alt="img" loading="lazy"></p><h4 id="内存使用量" tabindex="-1">内存使用量 <a class="header-anchor" href="#内存使用量" aria-label="Permalink to &quot;内存使用量&quot;">​</a></h4><ol><li>内存使用量指的是Java应用占用系统内存的最大值，一般通过Jvm参数调整，在满足上述两个指标的前提下，这个值越小越好。</li></ol><p><img src="'+e+'" alt="img" loading="lazy"></p><h3 id="gc调优的步骤" tabindex="-1">GC调优的步骤 <a class="header-anchor" href="#gc调优的步骤" aria-label="Permalink to &quot;GC调优的步骤&quot;">​</a></h3><p><img src="'+h+'" alt="img" loading="lazy"></p><h4 id="发现问题-常用工具" tabindex="-1">发现问题 - 常用工具 <a class="header-anchor" href="#发现问题-常用工具" aria-label="Permalink to &quot;发现问题 - 常用工具&quot;">​</a></h4><h5 id="jstat工具" tabindex="-1">jstat工具 <a class="header-anchor" href="#jstat工具" aria-label="Permalink to &quot;jstat工具&quot;">​</a></h5><p>Jstat工具是JDK自带的一款监控工具，可以提供各种垃圾回收、类加载、编译信息</p><p>等不同的数据。使用方法为：<code>jstat -gc 进程ID 每次统计的间隔（毫秒） 统计次数 </code></p><p><img src="'+r+'" alt="img" loading="lazy"></p><p>C代表Capacity容量，U代表Used使用量</p><p>S – 幸存者区，E – 伊甸园区，O – 老年代，M – 元空间</p><p>YGC、YGT：年轻代GC次数和GC耗时（单位：秒）</p><p>FGC、FGCT：Full GC次数和Full GC耗时</p><p>GCT：GC总耗时</p><p>优点：</p><p>操作简单</p><p>无额外的软件安装</p><p>缺点：</p><p>无法精确到GC产生的时间，只能用于判断GC是否存在问题</p><h5 id="visualvm插件" tabindex="-1">Visualvm插件 <a class="header-anchor" href="#visualvm插件" aria-label="Permalink to &quot;Visualvm插件&quot;">​</a></h5><p>VisualVm中提供了一款Visual GC插件，实时监控Java进程的堆内存结构、堆内存变化趋势以及垃圾回收时间的变化趋势。同时还可以监控对象晋升的直方图。</p><p><img src="'+g+'" alt="img" loading="lazy"></p><p>优点：</p><p>适合开发使用，能直观的看到堆内存和GC的变化趋势</p><p>缺点：</p><p>对程序运行性能有一定影响</p><p>生产环境程序员一般没有权限进行操作</p><p>安装方法：</p><p>1、打开插件页面</p><p><img src="'+k+'" alt="img" loading="lazy"></p><p>2、安装Visual GC插件</p><p><img src="'+o+'" alt="img" loading="lazy"></p><p>3、选择标签就可以看到内容：</p><p><img src="'+c+'" alt="img" loading="lazy"></p><h5 id="prometheus-grafana" tabindex="-1">Prometheus + Grafana <a class="header-anchor" href="#prometheus-grafana" aria-label="Permalink to &quot;Prometheus + Grafana&quot;">​</a></h5><p>Prometheus+Grafana是企业中运维常用的监控方案，其中Prometheus用来采系统或者应用的相关数据，同时具备告警功能。Grafana可以将Prometheus采集到的数据以可视化的方式进行展示。</p><p>Java程序员要学会如何读懂Grafana展示的Java虚拟机相关的参数。</p><p><img src="'+d+'" alt="img" loading="lazy"></p><p>优点：</p><p>支持系统级别和应用级别的监控，比如linux操作系统、Redis、MySQL、Java进程。</p><p>支持告警并允许自定义告警指标，通过邮件、短信等方式尽早通知相关人员进行处理</p><p>缺点：</p><p>环境搭建较为复杂，一般由运维人员完成</p><h5 id="gc日志" tabindex="-1">GC日志 <a class="header-anchor" href="#gc日志" aria-label="Permalink to &quot;GC日志&quot;">​</a></h5><p>通过GC日志，可以更好的看到垃圾回收细节上的数据，同时也可以根据每款垃圾回收器的不同特点更好地发现存在的问题。</p><p>使用方法（JDK 8及以下）：-XX:+PrintGCDetails -Xloggc:文件名</p><p>使用方法（JDK 9+）：-Xlog:gc*:file=文件名</p><p><img src="'+m+'" alt="img" loading="lazy"></p><p>1、添加虚拟机参数：</p><p><img src="'+E+'" alt="img" loading="lazy"></p><p>2、打开日志文件就可以看到GC日志</p><p><img src="'+y+'" alt="img" loading="lazy"></p><p>3、分析GC日志</p><p><strong>分析GC日志 - GCViewer</strong></p><p>GCViewer是一个将GC日志转换成可视化图表的小工具，github地址： <a href="https://github.com/chewiebug/GCViewer" target="_blank" rel="noreferrer">https://github.com/chewiebug/GCViewer</a> 使用方法：java -jar gcviewer_1.3.4.jar 日志文件.log</p><p><img src="'+C+'" alt="img" loading="lazy"></p><p>右下角是基础信息，左边是内存趋势图</p><p><img src="'+_+'" alt="img" loading="lazy"></p><p><strong>分析GC日志 - GCEasy</strong></p><p>GCeasy是业界首款使用AI机器学习技术在线进行GC分析和诊断的工具。定位内存泄漏、GC延迟高的问题，提供JVM参数优化建议，支持在线的可视化工具图表展示。 官方网站：<a href="https://gceasy.io/" target="_blank" rel="noreferrer">https://gceasy.io/</a></p><p><img src="'+u+'" alt="img" loading="lazy"></p><p>使用方法：</p><p>1、选择文件，找到GC日志并上传</p><p><img src="'+G+'" alt="img" loading="lazy"></p><p>2、点击Analyze分析就可以看到报告，每个账号每个月能免费上传5个GC日志。</p><p>建议部分：</p><p><img src="'+X+'" alt="img" loading="lazy"></p><p>内存情况：</p><p><img src="'+D+'" alt="img" loading="lazy"></p><p>GC关键性指标：</p><p><img src="'+b+'" alt="img" loading="lazy"></p><p>GC的趋势图：</p><p><img src="'+F+'" alt="img" loading="lazy"></p><p>引发GC的原因：</p><p><img src="'+w+'" alt="img" loading="lazy"></p><h4 id="常见的gc模式" tabindex="-1">常见的GC模式 <a class="header-anchor" href="#常见的gc模式" aria-label="Permalink to &quot;常见的GC模式&quot;">​</a></h4><p>根据内存的趋势图，我们可以将GC的情况分成几种模式</p><h5 id="正常情况" tabindex="-1">正常情况 <a class="header-anchor" href="#正常情况" aria-label="Permalink to &quot;正常情况&quot;">​</a></h5><p>特点：呈现锯齿状，对象创建之后内存上升，一旦发生垃圾回收之后下降到底部，并且每次下降之后的内存大小接近，存留的对象较少。</p><p><img src="'+f+'" alt="img" loading="lazy"></p><h5 id="缓存对象过多" tabindex="-1">缓存对象过多 <a class="header-anchor" href="#缓存对象过多" aria-label="Permalink to &quot;缓存对象过多&quot;">​</a></h5><p>特点：呈现锯齿状，对象创建之后内存上升，一旦发生垃圾回收之后下降到底部，并且每次下降之后的内存大小接近，处于比较高的位置。</p><p>问题产生原因： 程序中保存了大量的缓存对象，导致GC之后无法释放，可以使用MAT或者HeapHero等工具进行分析内存占用的原因。</p><p><img src="'+z+'" alt="img" loading="lazy"></p><h5 id="内存泄漏" tabindex="-1">内存泄漏 <a class="header-anchor" href="#内存泄漏" aria-label="Permalink to &quot;内存泄漏&quot;">​</a></h5><p>特点：呈现锯齿状，每次垃圾回收之后下降到的内存位置越来越高，最后由于垃圾回收无法释放空间导致对象无法分配产生OutOfMemory的错误。</p><p>问题产生原因： 程序中保存了大量的内存泄漏对象，导致GC之后无法释放，可以使用MAT或者HeapHero等工具进行分析是哪些对象产生了内存泄漏。</p><p><img src="'+A+'" alt="img" loading="lazy"></p><h5 id="持续的fullgc" tabindex="-1">持续的FullGC <a class="header-anchor" href="#持续的fullgc" aria-label="Permalink to &quot;持续的FullGC&quot;">​</a></h5><p>特点：在某个时间点产生多次Full GC，CPU使用率同时飙高，用户请求基本无法处理。一段时间之后恢复正常。</p><p>问题产生原因： 在该时间范围请求量激增，程序开始生成更多对象，同时垃圾收集无法跟上对象创建速率，导致持续地在进行FULL GC。GC分析报告</p><p><img src="'+v+'" alt="img" loading="lazy"></p><p>比如如下报告就产生了持续的FULL GC：</p><p><img src="'+P+'" alt="img" loading="lazy"></p><p>整体的延迟就变得很长：</p><p><img src="https://lisxpq12rl7.feishu.cn/space/api/box/stream/download/asynccode/?code=NTI2MGRjMmNkNDg2ZGY3ZmZiYjVhZWRhZTU1NGMwNjBfdXJIbnFDRlJKSUdObk1EZWVBdUNOVEZ4QkhVUzhYVGJfVG9rZW46VnhIeGJjUXBlb3BlbHd4QUFnaWNyWXI1bjZiXzE3MDc0NDkwMDQ6MTcwNzQ1MjYwNF9WNA" alt="img" loading="lazy"></p><p>原因就是老年代满了：</p><p><img src="'+M+'" alt="img" loading="lazy"></p><p>由于分配不了对象，导致频繁的FULLGC：</p><p><img src="'+x+'" alt="img" loading="lazy"></p><h5 id="元空间不足导致的fullgc" tabindex="-1">元空间不足导致的FULLGC <a class="header-anchor" href="#元空间不足导致的fullgc" aria-label="Permalink to &quot;元空间不足导致的FULLGC&quot;">​</a></h5><p>特点：堆内存的大小并不是特别大，但是持续发生FULLGC。</p><p>问题产生原因： 元空间大小不足，导致持续FULLGC回收元空间的数据。GC分析报告</p><p>元空间并不是满了才触发FULLGC，而是JVM自动会计算一个阈值，如下图中元空间并没有满，但是频繁产生了FULLGC。</p><p><img src="'+q+'" alt="img" loading="lazy"></p><p>停顿时间也比较长：</p><p><img src="'+L+'" alt="img" loading="lazy"></p><p>非常频繁的FULLGC:</p><p><img src="'+J+'" alt="img" loading="lazy"></p><h4 id="解决gc问题的手段" tabindex="-1">解决GC问题的手段 <a class="header-anchor" href="#解决gc问题的手段" aria-label="Permalink to &quot;解决GC问题的手段&quot;">​</a></h4><p>解决GC问题的手段中，前三种是比较推荐的手段，第四种仅在前三种无法解决时选用：</p><ul><li>优化基础JVM参数，基础JVM参数的设置不当，会导致频繁FULLGC的产生</li><li>减少对象产生，大多数场景下的FULLGC是由于对象产生速度过快导致的，减少对象产生可以有效的缓解FULLGC的发生</li><li>更换垃圾回收器，选择适合当前业务场景的垃圾回收器，减少延迟、提高吞吐量</li><li>优化垃圾回收器参数，优化垃圾回收器的参数，能在一定程度上提升GC效率</li></ul><h5 id="优化基础jvm参数" tabindex="-1">优化基础JVM参数 <a class="header-anchor" href="#优化基础jvm参数" aria-label="Permalink to &quot;优化基础JVM参数&quot;">​</a></h5><p><strong>参数1 ： -Xmx 和 –Xms</strong></p><p>-Xmx参数设置的是最大堆内存，但是由于程序是运行在服务器或者容器上，计算可用内存时，要将元空间、操作系统、其它软件占用的内存排除掉。</p><p>案例： 服务器内存4G，操作系统+元空间最大值+其它软件占用1.5G，-Xmx可以设置为2g。</p><p>最合理的设置方式应该是根据最大并发量估算服务器的配置，然后再根据服务器配置计算最大堆内存的值。</p><p><img src="'+U+'" alt="img" loading="lazy"></p><p>参数1 ： -Xmx 和 –Xms</p><p>-Xms用来设置初始堆大小，建议将-Xms设置的和-Xmx一样大，有以下几点好处：</p><ul><li>运行时性能更好，堆的扩容是需要向操作系统申请内存的，这样会导致程序性能短期下降。</li><li>可用性问题，如果在扩容时其他程序正在使用大量内存，很容易因为操作系统内存不足分配失败。</li><li>启动速度更快，Oracle官方文档的原话：如果初始堆太小，Java 应用程序启动会变得很慢，因为 JVM 被迫频繁执行垃圾收集，直到堆增长到更合理的大小。为了获得最佳启动性能，请将初始堆大小设置为与最大堆大小相同。</li></ul><p><strong>参数2 ： -XX:MaxMetaspaceSize 和 –XX:MetaspaceSize</strong></p><p>-XX:MaxMetaspaceSize=值 参数指的是最大元空间大小，默认值比较大，如果出现元空间内存泄漏会让操作系统可用内存不可控，建议根据测试情况设置最大值，一般设置为256m。</p><p>-XX:MetaspaceSize=值 参数指的是到达这个值之后会触发FULLGC（网上很多文章的初始元空间大小是错误的），后续什么时候再触发JVM会自行计算。如果设置为和MaxMetaspaceSize一样大，就不会FULLGC，但是对象也无法回收。</p><p><img src="'+S+'" alt="img" loading="lazy"></p><p>计算出来第一次因元空间触发FULLGC的阈值：</p><p><img src="'+V+'" alt="img" loading="lazy"></p><p><strong>参数3 ： -Xss虚拟机栈大小</strong></p><p>如果我们不指定栈的大小，JVM 将创建一个具有默认大小的栈。大小取决于操作系统和计算机的体系结构。</p><p>比如Linux x86 64位 ： 1MB，如果不需要用到这么大的栈内存，完全可以将此值调小节省内存空间，合理值为256k – 1m之间。</p><p>使用：-Xss256k</p><p><strong>参数4 ： 不建议手动设置的参数</strong></p><p>由于JVM底层设计极为复杂，一个参数的调整也许让某个接口得益，但同样有可能影响其他更多接口。</p><p>-Xmn 年轻代的大小，默认值为整个堆的1/3，可以根据峰值流量计算最大的年轻代大小，尽量让对象只存放在年轻代，不进入老年代。但是实际的场景中，接口的响应时间、创建对象的大小、程序内部还会有一些定时任务等不确定因素都会导致这个值的大小并不能仅凭计算得出，如果设置该值要进行大量的测试。G1垃圾回收器尽量不要设置该值，G1会动态调整年轻代的大小。</p><p><img src="'+j+'" alt="img" loading="lazy"></p><p>‐XX:SurvivorRatio 伊甸园区和幸存者区的大小比例，默认值为8。</p><p>‐XX:MaxTenuringThreshold 最大晋升阈值，年龄大于此值之后，会进入老年代。另外JVM有动态年龄判断机制：将年龄从小到大的对象占据的空间加起来，如果大于survivor区域的50%，然后把等于或大于该年龄的对象，放入到老年代。</p><p>比如下图中，年龄1+年龄2+年龄3 = 55m已经超过了S区的50%，所以会将年龄3及以上的对象全部放入老年代。</p><p><img src="'+O+`" alt="img" loading="lazy"></p><p><strong>其他参数 ：</strong></p><p>-XX:+DisableExplicitGC</p><p>禁止在代码中使用System.gc()， System.gc()可能会引起FULLGC，在代码中尽量不要使用。使用DisableExplicitGC参数可以禁止使用System.gc()方法调用。</p><p>-XX:+HeapDumpOnOutOfMemoryError：发生OutOfMemoryError错误时，自动生成hprof内存快照文件。</p><p><code>-XX:HeapDumpPath=&lt;path&gt;</code>：指定hprof文件的输出路径。</p><p>打印GC日志</p><p>JDK8及之前 ： -XX:+PrintGCDetails -XX:+PrintGCDateStamps -Xloggc:文件路径</p><p>JDK9及之后 ： -Xlog:gc*:file=文件路径</p><p><strong>JVM参数模板</strong></p><div class="language-Java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Xms1g</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Xmx1g</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Xss256k</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">XX</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">MaxMetaspaceSize</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">512m </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">XX</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">DisableExplicitGC</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">XX</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">HeapDumpOnOutOfMemoryError</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">XX</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">HeapDumpPath</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">opt</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">logs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">my</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">service.hprof</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">XX</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">PrintGCDetails </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">XX</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">PrintGCDateStamps </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Xloggc</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">文件路径</span></span></code></pre></div><p>注意：</p><p>JDK9及之后gc日志输出修改为 -Xlog:gc*:file=文件名</p><p>堆内存大小和栈内存大小根据实际情况灵活调整。</p><h5 id="垃圾回收器的选择" tabindex="-1">垃圾回收器的选择 <a class="header-anchor" href="#垃圾回收器的选择" aria-label="Permalink to &quot;垃圾回收器的选择&quot;">​</a></h5><p><strong>背景</strong>：</p><p>小李负责的程序在高峰期遇到了性能瓶颈，团队从业务代码入手优化了多次也取得了不错的效果，这次他希望能采用更合理的垃圾回收器优化性能。</p><p><strong>思路：</strong></p><p>编写Jmeter脚本对程序进行压测，同时添加RT响应时间、每秒钟的事务数</p><p>等指标进行监控。</p><p>选择不同的垃圾回收器进行测试，并发量分别设置50、100、200，观察</p><p>数据的变化情况。</p><ol start="3"><li>JDK8 下 ParNew + CMS 组合 ： -XX:+UseParNewGC -XX:+UseConcMarkSweepGC</li></ol><p>​ 默认组合 ： PS + PO</p><p>​ JDK8使用g1 : -XX:+UseG1GC JDK11 默认 g1</p><p><strong>测试用代码：</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>com.itheima.jvmoptimize.fullgcdemo.Demo2Controller</span></span></code></pre></div><p>1、使用jmeter测试脚本</p><p><img src="`+T+'" alt="img" loading="lazy"></p><p>2、添加基础JVM测试参数：</p><div class="language-Java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Xms8g </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Xmx8g </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Xss256k </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">XX</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">MaxMetaspaceSize</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">512m  </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">XX</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">DisableExplicitGC </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">XX</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">HeapDumpOnOutOfMemoryError </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">XX</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">HeapDumpPath</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">D</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">test.hprof  </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">verbose</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">gc </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">XX</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">PrintGCDetails </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">XX</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">PrintGCTimeStamps</span></span></code></pre></div><p>JDK8默认情况下测试的是PS+PO组合</p><p>测试结果：</p><table><thead><tr><th>垃圾回收器</th><th>参数</th><th>50并发（最大响应时间）</th><th>100并发（最大响应时间）</th><th>200并发（最大响应时间）</th></tr></thead><tbody><tr><td>PS+PO</td><td>默认</td><td>260ms</td><td>474ms</td><td>930ms</td></tr><tr><td>CMS</td><td><em>-XX:+UseParNewGC -XX:+UseConcMarkSweepGC</em></td><td>157ms</td><td>未测试</td><td>833ms</td></tr><tr><td>G1</td><td>JDK11默认</td><td>未测试</td><td>未测试</td><td>248ms</td></tr></tbody></table><p>由此可见使用了JDK11之后使用G1垃圾回收器，性能优化结果还是非常明显的。其他测试数据同学们有兴趣可以自行去测试一下。</p><h4 id="优化垃圾回收器的参数" tabindex="-1">优化垃圾回收器的参数 <a class="header-anchor" href="#优化垃圾回收器的参数" aria-label="Permalink to &quot;优化垃圾回收器的参数&quot;">​</a></h4><p>这部分优化效果未必出色，仅当前边的一些手动无效时才考虑。</p><p>一个优化的案例：</p><p>CMS的并发模式失败（concurrent mode failure）现象。由于CMS的垃圾清理线程和用户线程是并行进行的，如果在并发清理的过程中老年代的空间不足以容纳放入老年代的对象，会产生并发模式失败。</p><p><img src="'+N+'" alt="img" loading="lazy"></p><p>老年代已经满了此时有一些对象要晋升到老年代：</p><p><img src="'+K+'" alt="img" loading="lazy"></p><p>解决方案：</p><p>1.减少对象的产生以及对象的晋升。</p><p>2.增加堆内存大小</p><p>3.优化垃圾回收器的参数，比如-XX:CMSInitiatingOccupancyFraction=值，当老年代大小到达该阈值时，会自动进行CMS垃圾回收，通过控制这个参数提前进行老年代的垃圾回收，减少其大小。</p><p>JDK8中默认这个参数值为 -1，根据其他几个参数计算出阈值：</p><p>((100 - MinHeapFreeRatio) + (double)(CMSTriggerRatio * MinHeapFreeRatio) / 100.0)</p><p>在我本机计算之后的结果是92：</p><p><img src="'+I+'" alt="img" loading="lazy"></p><p>该参数设置完是不会生效的，必须开启-XX:+UseCMSInitiatingOccupancyOnly参数。</p><p>调整前和调整之后的效果对比：</p><p><img src="'+W+'" alt="img" loading="lazy"></p><p>很明显FULLGC产生的次数下降了。</p><h4 id="案例实战" tabindex="-1">案例实战 <a class="header-anchor" href="#案例实战" aria-label="Permalink to &quot;案例实战&quot;">​</a></h4><p><strong>背景：</strong></p><p>小李负责的程序在高峰期经常会出现接口调用时间特别长的现象，他希望能优化程序的性能。</p><p><strong>思路：</strong></p><p>生成GC报告，通过Gceasy工具进行分析，判断是否存在GC问题或者内存问题。</p><p>存在内存问题，通过jmap或者arthas将堆内存快照保存下来。</p><p>通过MAT或者在线的heaphero工具分析内存问题的原因。</p><p>修复问题，并发布上线进行测试。</p><p><strong>测试代码</strong>：<code>com.itheima.jvmoptimize.fullgcdemo.Practice</code></p><p>JVM参数：</p><div class="language-Java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Xms1g </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Xmx1g </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Xss256k    </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">XX</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">MaxMetaspaceSize</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">256m  </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">XX</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">UseParNewGC </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">XX</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">UseConcMarkSweepGC </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">XX</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">PrintGCDateStamps  </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">XX</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">PrintGCDetails </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">XX</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">DisableExplicitGC </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Xloggc</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">D</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">test.log</span></span></code></pre></div><p>1、打开测试脚本：</p><p><img src="'+Z+'" alt="img" loading="lazy"></p><p>2、发现有几笔响应时间特别长的请求，怀疑是GC引起的：</p><p><img src="'+H+'" alt="img" loading="lazy"></p><p>3、把GC日志上传到GCEasy之后发现内存占用情况很严重：</p><p><img src="'+R+'" alt="img" loading="lazy"></p><p>出现了几次FULLGC,并且FULL GC之后，内存占用也有160m左右:</p><p><img src="'+B+'" alt="img" loading="lazy"></p><h5 id="问题1" tabindex="-1">问题1： <a class="header-anchor" href="#问题1" aria-label="Permalink to &quot;问题1：&quot;">​</a></h5><p>发生了连续的FULL GC,堆内存1g如果没有请求的情况下，内存大小在200-300mb之间。</p><p>分析：</p><p>没有请求的情况下，内存大小并没有处于很低的情况，满足缓存对象过多的情况，怀疑内存种缓存了很多数据。需要将堆内存快照保存下来进行分析。</p><p><img src="'+Q+'" alt="img" loading="lazy"></p><p>1、在本地测试，通过visualvm将hprof文件保存下来：</p><p><img src="'+Y+'" alt="img" loading="lazy"></p><p>2、通过Heap Hero分析文件，操作方式与GCEasy相同，上传的是hprof文件：</p><p><img src="'+$+'" alt="img" loading="lazy"></p><p>但是我们发现，生成的文件非常小，与接近200m大小不符：</p><p><img src="'+ss+'" alt="img" loading="lazy"></p><p>3、怀疑有些对象已经可以回收，所以没有下载下来。使用jmap调整下参数，将live参数去掉，这样即便是垃圾对象也能保存下来：</p><p><img src="'+is+'" alt="img" loading="lazy"></p><p>4、在MAT中分析，选择不可达对象直方图：</p><p><img src="'+as+'" alt="img" loading="lazy"></p><p>5、大量的对象都是字节数组对象：</p><p><img src="'+ps+'" alt="img" loading="lazy"></p><p>6.那么这些对象是如何产生的呢？继续往下来，捕捉到有大量的线程对象，如果没有发现这个点，只能去查代码看看哪里创建了大量的字节数组了：</p><p><img src="'+ts+'" alt="img" loading="lazy"></p><h5 id="问题2" tabindex="-1">问题2： <a class="header-anchor" href="#问题2" aria-label="Permalink to &quot;问题2：&quot;">​</a></h5><p>由于这些对象已经不在引用链上，无法通过支配树等手段分析创建的位置。</p><p>分析：</p><p>在不可达对象列表中，除了发现大量的byte[]还发现了大量的线程，可以考虑跟踪线程的栈信息来判断对象在哪里创建。</p><p>1、在VisualVM中使用采样功能，对内存采样：</p><p><img src="'+ls+'" alt="img" loading="lazy"></p><p>2、观察到这个线程一直在发生变化，说明有线程频繁创建销毁：</p><p><img src="'+ns+'" alt="img" loading="lazy"></p><p>3、选择线程功能，保存线程栈：</p><p><img src="'+es+'" alt="img" loading="lazy"></p><p>4、抓到了一个线程，线程后边的ID很大，说明已经创建过很多线程了：</p><p><img src="'+hs+'" alt="img" loading="lazy"></p><p>5、通过栈信息找到源代码：</p><p><img src="'+rs+'" alt="img" loading="lazy"></p><p>这里有个定时任务，每隔200ms就创建线程。</p><p>问题产生原因：</p><p>在定时任务中通过线程创建了大量的对象，导致堆内存一直处于比较高的位置。</p><p>解决方案：</p><p>暂时先将这段代码注释掉，测试效果，由于这个服务本身的内存压力比较大，将这段定时任务移动到别的服务中。</p><h5 id="问题3" tabindex="-1">问题3： <a class="header-anchor" href="#问题3" aria-label="Permalink to &quot;问题3：&quot;">​</a></h5><p>修复之后内存基本上处于100m左右，但是当请求发生时，依然有频繁FULL GC的发生。</p><p>分析：</p><p>请求产生的内存大小比当前最大堆内存大，尝试选择配置更高的服务器，将-Xmx和-Xms参数调大一些。</p><p><img src="'+gs+'" alt="img" loading="lazy"></p><p>当前的堆内存大小无法支撑请求量，所以要不就将请求量降下来，比如限制tomcat线程数、限流，或者提升服务器配置，增大堆内存。</p><p>调整为4G之后的效果，FULLGC数量很少：</p><p><img src="'+ks+'" alt="img" loading="lazy"></p><h5 id="案例总结" tabindex="-1">案例总结： <a class="header-anchor" href="#案例总结" aria-label="Permalink to &quot;案例总结：&quot;">​</a></h5><p>1、压力比较大的服务中，尽量不要存放大量的缓存或者定时任务，会影响到服务的内存使用。</p><p>2、内存分析发现有大量线程创建时，可以使用导出线程栈来查看线程的运行情况。</p><p>3、如果请求确实创建了大量的内存超过了内存上限，只能考虑减少请求时创建的对象，或者使用更大的内存。</p><p>4、推荐使用g1垃圾回收器，并且使用较新的JDK可以获得更好的性能。</p>',287),ds=[cs];function ms(Es,ys,Cs,_s,us,Gs){return a(),i("div",null,ds)}const bs=s(os,[["render",ms]]);export{Ds as __pageData,bs as default};
