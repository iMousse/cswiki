import{_ as e,E as n,c as k,J as r,w as E,m as p,a as g,V as o,o as l,b as d,e as c}from"./chunks/framework.syB9hai_.js";const v=JSON.parse('{"title":"框架篇总结","description":"","frontmatter":{},"headers":[],"relativePath":"src/base/summarize/spring.md","filePath":"src/base/summarize/spring.md","lastUpdated":1730648753000}'),y={name:"src/base/summarize/spring.md"},u=p("h1",{id:"框架篇总结",tabindex:"-1"},[g("框架篇总结 "),p("a",{class:"header-anchor",href:"#框架篇总结","aria-label":'Permalink to "框架篇总结"'},"​")],-1),F=o(`<p><a href="./">返回首页</a></p><p><a href="./../struct/spring/">Spring入门到精通</a></p><br><p><strong>Spring</strong></p><ul><li>Spring 框架中的单例 bean 是线程安全的吗？</li><li>什么是 AOP,你们项目中有没有使用到 AOP ？</li><li>Spring 中的事务是如何实现的</li><li>Spring 事务失效的场景有哪些</li><li>Spring 的 bean 的生命周期</li><li>Spring 中的循环引用</li><li>SpringMVC 的执行流程知道嘛</li><li>Springboot 自动配置原理</li><li>Spring 的常见注解有哪些？</li><li>SpringMVC 常见的注解有哪些？</li><li>Springboot 常见注解有哪些？</li></ul><br><p><strong>Mybatis</strong></p><ul><li>MyBatis 执行流程？</li><li>Mybatis 是否支持延迟加载？</li><li>延迟加载的底层原理知道吗？</li><li>Mybatis 的二级缓存什么时候会清理缓存中的数据</li></ul><h2 id="spring" tabindex="-1">Spring <a class="header-anchor" href="#spring" aria-label="Permalink to &quot;Spring&quot;">​</a></h2><h3 id="bean-线程安全" tabindex="-1">Bean 线程安全 <a class="header-anchor" href="#bean-线程安全" aria-label="Permalink to &quot;Bean 线程安全&quot;">​</a></h3><blockquote><p>面试官：Spring框架中的单例 bean 是线程安全的吗？</p></blockquote><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Service</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Scope</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;singleton&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> UserServiceImpl</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> implements</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> UserService</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li>Singleton : Bean在每个 Spring IOC 容器中只有一个实例。</li><li>Prototype：一个 bean 的定义可以有多个实例。</li></ul><br><p>Spring bean 并没有可变的状态 (比如Service类和DAO类) ，所以在某种程度上说 Spring 的单例 bean是线程安全的。</p><p>但如果存在成员方法则<strong>不是线程安全的</strong>。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Controller</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">RequestMapping</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/user&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> UserController</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	  // ! 存在线程安全问题</span></span>
<span class="line highlighted"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> count;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Autowired</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> UserService userService;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">GetMapping</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/getById/{id}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> User </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getById</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">PathVariable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;id&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) Integer </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        count</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(count);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> userService.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getById</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(id);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><br><div class="warning custom-block"><p class="custom-block-title">💡思考：Spring 框架中的单例 Bean 是线程安全的吗？</p><p>不是线程安全的，Spring中有个 @Scope 注解，默认的值是 <code>Singleton</code>，单例的。当 Spring 的 Bean 对象是无状态的对象，则是线程安全的。如果在 Bean 中定义了可修改的成员变量，则需要考虑线程安全问题。可以使用多例或加锁来解决。</p></div><br><h3 id="bean-生命周期" tabindex="-1">Bean 生命周期 <a class="header-anchor" href="#bean-生命周期" aria-label="Permalink to &quot;Bean 生命周期&quot;">​</a></h3><blockquote><p>面试官：SpringBean 的生命周期</p></blockquote><p>回答两方面内容：</p><ul><li>Spring 容器是如何管理和创建 Bean 实例</li><li>方便调试和解决问题</li></ul><br><p><strong>BeanDefinition</strong></p><p>Spring容器在进行实例化时，会将XML配置的 <code>&lt;bean&gt;</code> 的信息封装成 <code>BeanDefinition</code> 对象，Spring根据 <code>BeanDefinition</code>来创建Bean对象，里面有很多的属性来描述Bean</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">bean</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;userDao&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;com.itheima.dao.impl.UserDaoImpl&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lazy-init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;true&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">bean</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;userService&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;com.itheima.service.UserServiceImpl&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> scope</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;singleton&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">property</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;userDao&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ref</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;userDao&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">property</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">bean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><ul><li><code>beanClassName</code>：bean 的类名</li><li><code>initMethodName</code>：初始化方法名称</li><li><code>properryValues</code>：bean 的属性值</li><li><code>scope</code>：作用域</li><li><code>lazyInit</code>：延迟初始化</li></ul><p><img src="https://mugrain.oss-cn-hangzhou.aliyuncs.com/cswiki/image-20231223141045130.png" alt="image-20231223141045130" loading="lazy"></p><br><p><strong>Bean生命周期</strong></p><p><img src="https://mugrain.oss-cn-hangzhou.aliyuncs.com/cswiki/image-20231223141145378.png" alt="image-20231223141145378" loading="lazy"></p><p>代码实例：</p><p>需要的依赖</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">dependencies</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">dependency</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;org.springframework&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;spring-context&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">version</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;5.2.10.RELEASE&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">version</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">dependency</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">dependencies</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>配置代码</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Configuration</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ComponentScan</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;com.itheima.lifecycle&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SpringConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>用户类</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">package</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> com.itheima.lifecycle;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> org.springframework.beans.BeansException;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> org.springframework.beans.factory.BeanFactory;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> org.springframework.beans.factory.BeanFactoryAware;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> org.springframework.beans.factory.BeanNameAware;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> org.springframework.beans.factory.InitializingBean;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> org.springframework.beans.factory.annotation.Value;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> org.springframework.context.ApplicationContext;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> org.springframework.context.ApplicationContextAware;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> org.springframework.stereotype.Component;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> javax.annotation.PostConstruct;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> javax.annotation.PreDestroy;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Component</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> User</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> implements</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> BeanNameAware</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">BeanFactoryAware</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ApplicationContextAware</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">InitializingBean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> User</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;User的构造方法执行了.........&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> String name ;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;张三&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> setName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(String </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;setName方法执行了.........&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Override</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> setBeanName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(String </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;setBeanName方法执行了.........&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Override</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> setBeanFactory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(BeanFactory </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">beanFactory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">throws</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> BeansException {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;setBeanFactory方法执行了.........&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Override</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> setApplicationContext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ApplicationContext </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">applicationContext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">throws</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> BeansException {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;setApplicationContext方法执行了........&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">PostConstruct</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;init方法执行了.................&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Override</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> afterPropertiesSet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">throws</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Exception {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;afterPropertiesSet方法执行了........&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">PreDestroy</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> destory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;destory方法执行了...............&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>继承了BeanPostProcessor</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">package</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> com.itheima.lifecycle;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> org.springframework.beans.BeansException;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> org.springframework.beans.factory.config.BeanPostProcessor;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> org.springframework.cglib.proxy.Enhancer;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> org.springframework.cglib.proxy.InvocationHandler;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> org.springframework.stereotype.Component;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> java.lang.reflect.Method;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Component</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyBeanPostProcessor</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> implements</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> BeanPostProcessor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Override</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Object </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">postProcessBeforeInitialization</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Object </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">bean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, String </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">beanName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">throws</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> BeansException {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (beanName.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">equals</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;user&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;postProcessBeforeInitialization方法执行了-&gt;user对象初始化方法前开始增强....&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> bean;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Override</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Object </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">postProcessAfterInitialization</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Object </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">bean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, String </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">beanName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">throws</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> BeansException {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (beanName.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">equals</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;user&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;postProcessAfterInitialization-&gt;user对象初始化方法后开始增强....&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            //cglib代理对象</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            Enhancer enhancer </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Enhancer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            //设置需要增强的类</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            enhancer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setSuperclass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(bean.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getClass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            //执行回调方法，增强方法</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            enhancer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setCallback</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> InvocationHandler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Override</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Object </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">invoke</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Object </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">o</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, Method </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">method</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">objects</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">throws</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Throwable {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                    //执行目标方法</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> method.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">invoke</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(method,objects);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            });</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            //创建代理对象</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> enhancer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">create</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> bean;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>测试类</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">package</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> com.itheima.lifecycle;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> com.itheima.config.SpringConfig;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> org.springframework.context.ApplicationContext;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> org.springframework.context.annotation.AnnotationConfigApplicationContext;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> UserTest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        ApplicationContext ctx </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AnnotationConfigApplicationContext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(SpringConfig.class);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        User user </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ctx.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getBean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(User.class);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(user);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>打印信息</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">User的构造方法执行了.........</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setName方法执行了.........</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setBeanName方法执行了.........</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setBeanFactory方法执行了.........</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setApplicationContext方法执行了........</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">postProcessBeforeInitialization方法执行了-&gt;user对象初始化方法前开始增强....</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">init方法执行了.................</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">afterPropertiesSet方法执行了........</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">postProcessAfterInitialization-&gt;user对象初始化方法后开始增强....</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">User的构造方法执行了.........</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">public</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> java.lang.String java.lang.Object.toString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><br><div class="warning custom-block"><p class="custom-block-title">💡思考：Spring Bean的生命周期</p><p>首先会通过一个非常重要的类，叫做 BeanDefinition 获取 Bean 的定义信息，这里面就封装了 Bean 的所有信息，比如类的全路径，是否是延迟加载，是否是单例等等这些信息。</p><p>第一步是在创建 Bean 的时候，调用构造函数实例化 Bean</p><p>第二步是 Bean 的依赖注入，比如一些 set 方法注入，像平时开发用的 @Autowire 都是这一步完成</p><p>第三步是处理 Aware 接口，如果某一个 Bean 实现了 Aware 接口就会重写方法执行</p><p>第四步是 Bean 的后置处理器 BeanPostProcessor，这个是前置处理器</p><p>第五步是初始化方法，比如实现了接口 InitializingBean 或者自定义了方法 init-method 标签或 @PostContruct</p><p>第六步是执行了 Bean 的后置处理器 BeanPostProcessor，主要是对 Bean进行增强，有可能在这里产生代理对象</p><p>最后一步是销毁 Bean</p></div><br><h3 id="spring-aop" tabindex="-1">Spring AOP <a class="header-anchor" href="#spring-aop" aria-label="Permalink to &quot;Spring AOP&quot;">​</a></h3><blockquote><p>面试官：什么是AOP，你们项目中有没有使用到AOP</p></blockquote><p>AOP称为面向切面编程，用于将那些与业务无关，但却对多个对象产生影响的公共行为和逻辑，抽取并封装为一个可重用的模块，这个模块被命名为“切面”（Aspect），减少系统中的重复代码，降低了模块间的耦合度，同时提高了系统的可维护性。</p><p>常见的AOP使用场景：</p><ul><li>记录操作日志</li><li>缓存处理</li><li>Spring中内置的事务处理</li></ul><br><p><strong>Spring中的事务是如何实现的</strong></p><p>Spring支持编程式事务管理和声明式事务管理两种方式。</p><p>编程式事务控制：需使用 TransactionTemplate 来进行实现，对业务代码有侵入性，项目中很少使用</p><p>声明式事务管理：声明式事务管理建立在AOP之上的。其本质是通过AOP功能，对方法前后进行拦截，将事务处理的功能编织到拦截的方法中，也就是在目标方法开始之前加入一个事务，在执行完目标方法之后根据执行情况提交或者回滚事务。</p><p><img src="https://mugrain.oss-cn-hangzhou.aliyuncs.com/cswiki/image-20231221094357582.png" alt="image-20231221094357582" loading="lazy"></p><br><div class="warning custom-block"><p class="custom-block-title">💡思考：什么是 AOP ，你们项目中有没有使用到 AOP</p><p>AOP 的含义是面向切面编程。将与业务无关，但对多个对象产生影响的行为和逻辑，抽取成为公共的功能模块来进行复用。</p><p>我们系统中日志文件的方法，菜单按钮权限的管理都是通过 AOP 来实现的。通过切点表达式获取日志记录的方法，然后通过环绕通知获取请求方法的参数，比如类信息、方法信息、注解、请求方式等，获取这些参数以后保存到数据库。</p><br><p>💡<strong>思考：Spring 中的事务是如何实现的？</strong></p><p>Spring 本质是 AOP 来实现的，对方法的前后进行拦截，在执行方法之前开启事务，在方法执行之后提交或回滚事务。</p></div><br><h3 id="spring-事务失效" tabindex="-1">Spring 事务失效 <a class="header-anchor" href="#spring-事务失效" aria-label="Permalink to &quot;Spring 事务失效&quot;">​</a></h3><blockquote><p>面试官：对spring框架的深入理解、复杂业务的编码经验</p></blockquote><ul><li>异常捕获处理</li><li>抛出检查异常</li><li>非public方法</li></ul><br><p><strong>情况一：异常捕获处理</strong></p><p><img src="https://mugrain.oss-cn-hangzhou.aliyuncs.com/cswiki/image-20231221094706821.png" alt="image-20231221094706821" loading="lazy"></p><br><p><strong>情况二：抛出检查异常</strong></p><p><img src="https://mugrain.oss-cn-hangzhou.aliyuncs.com/cswiki/image-20231221094803359.png" alt="image-20231221094803359" loading="lazy"></p><br><p><strong>情况三：非public方法导致的事务失效</strong></p><p><img src="https://mugrain.oss-cn-hangzhou.aliyuncs.com/cswiki/image-20231221094844464.png" alt="image-20231221094844464" loading="lazy"></p><br><div class="warning custom-block"><p class="custom-block-title">💡思考：Spring 事务失效的场景有哪些？</p><ul><li>方法上异常捕获处理，自己处理了异常但是没有抛出就会导致事务失效，所以我们在处理异常之后需要对异常进行抛出。</li><li>方法抛出异常检查，如果报错也会导致事务失效，因为Spring默认只会回滚非检查异常，所以我们需要在Transactional注解上配置rollbackFor属性为Exception。</li><li>方法上不是public修饰也会失效。</li></ul></div><br><h3 id="spring-循环依赖" tabindex="-1">*Spring 循环依赖 <a class="header-anchor" href="#spring-循环依赖" aria-label="Permalink to &quot;*Spring 循环依赖&quot;">​</a></h3><p>Spring中的循环引用</p><p><img src="https://mugrain.oss-cn-hangzhou.aliyuncs.com/cswiki/image-20231224000223068.png" alt="image-20231224000223068" loading="lazy"></p><p>循环依赖流程图</p><p><img src="https://mugrain.oss-cn-hangzhou.aliyuncs.com/cswiki/image-20231224002346813.png" alt="image-20231224002346813" loading="lazy"></p><br><p>三级缓存解决循环依赖</p><p><img src="https://mugrain.oss-cn-hangzhou.aliyuncs.com/cswiki/image-20231224005813459.png" alt="image-20231224005813459" loading="lazy"></p><br><p>一级缓存作用：限制bean在beanFactory中只存一份，即实现singleton scope，解决不了循环依赖。</p><p><img src="https://mugrain.oss-cn-hangzhou.aliyuncs.com/cswiki/image-20231224022839719.png" alt="image-20231224022839719" loading="lazy"></p><br><p>如果要想打破循环依赖, 就需要一个中间人的参与, 这个中间人就是二级缓存。<mark>对象A和对象B从二级缓存存入了一级缓存。</mark></p><p><img src="https://mugrain.oss-cn-hangzhou.aliyuncs.com/cswiki/image-20231224023549457.png" alt="image-20231224023549457" loading="lazy"></p><br><p>但是一级缓存和二级缓存只能解决一般对象的循环依赖问题。如果A是代理对象，则需要借助三级缓存</p><p><img src="https://mugrain.oss-cn-hangzhou.aliyuncs.com/cswiki/image-20231224023658943.png" alt="image-20231224023658943" loading="lazy"></p><br><p>三级缓存解决循环依赖</p><p><img src="https://mugrain.oss-cn-hangzhou.aliyuncs.com/cswiki/image-20231224023958186.png" alt="image-20231224023958186" loading="lazy"></p><br><p>手动解决循环依赖：构造方法出现了循环依赖。</p><p><img src="https://mugrain.oss-cn-hangzhou.aliyuncs.com/cswiki/image-20231224024045030.png" alt="image-20231224024045030" loading="lazy"></p><br><p>回答要点：Spring中的循环引用</p><p>循环依赖：循环依赖其实就是循环引用,也就是两个或两个以上的bean互相持有对方,最终形成闭环。比如A依赖于B,B依赖于A</p><p>循环依赖在spring中是允许存在，spring框架依据三级缓存已经解决了大部分的循环依赖</p><p>①一级缓存：单例池，缓存已经经历了完整的生命周期，已经初始化完成的bean对象</p><p>②二级缓存：缓存早期的bean对象（生命周期还没走完）</p><p>③三级缓存：缓存的是ObjectFactory，表示对象工厂，用来创建某个对象的</p><p><img src="https://mugrain.oss-cn-hangzhou.aliyuncs.com/cswiki/image-20231224024304233.png" alt="image-20231224024304233" loading="lazy"></p><p><strong>面试官</strong>：Spring中的循环引用</p><p><strong>候选人</strong>：</p><p>嗯，好的，我来解释一下</p><p>循环依赖：循环依赖其实就是循环引用,也就是两个或两个以上的bean互相持有对方,最终形成闭环。比如A依赖于B,B依赖于A</p><p>循环依赖在spring中是允许存在，spring框架依据三级缓存已经解决了大部分的循环依赖</p><p>①一级缓存：单例池，缓存已经经历了完整的生命周期，已经初始化完成的bean对象</p><p>②二级缓存：缓存早期的bean对象（生命周期还没走完）</p><p>③三级缓存：缓存的是ObjectFactory，表示对象工厂，用来创建某个对象的</p><p><strong>面试官</strong>：那具体解决流程清楚吗？</p><p><strong>候选人</strong>：</p><p>第一，先实例A对象，同时会创建ObjectFactory对象存入三级缓存singletonFactories</p><p>第二，A在初始化的时候需要B对象，这个走B的创建的逻辑</p><p>第三，B实例化完成，也会创建ObjectFactory对象存入三级缓存singletonFactories</p><p>第四，B需要注入A，通过三级缓存中获取ObjectFactory来生成一个A的对象同时存入二级缓存，这个是有两种情况，一个是可能是A的普通对象，另外一个是A的代理对象，都可以让ObjectFactory来生产对应的对象，这也是三级缓存的关键</p><p>第五，B通过从通过二级缓存earlySingletonObjects 获得到A的对象后可以正常注入，B创建成功，存入一级缓存singletonObjects</p><p>第六，回到A对象初始化，因为B对象已经创建完成，则可以直接注入B，A创建成功存入一次缓存singletonObjects</p><p>第七，二级缓存中的临时对象A清除</p><p><strong>面试官</strong>：构造方法出现了循环依赖怎么解决？</p><p><strong>候选人</strong>：</p><p>由于bean的生命周期中构造函数是第一个执行的，spring框架并不能解决构造函数的的依赖注入，可以使用@Lazy懒加载，什么时候需要对象再进行bean对象的创建</p><h2 id="springmvc" tabindex="-1">SpringMVC <a class="header-anchor" href="#springmvc" aria-label="Permalink to &quot;SpringMVC&quot;">​</a></h2><h3 id="springmvc-的执行流程" tabindex="-1">SpringMVC 的执行流程 <a class="header-anchor" href="#springmvc-的执行流程" aria-label="Permalink to &quot;SpringMVC 的执行流程&quot;">​</a></h3><blockquote><p>面试官：SpringMVC的执行流程你知道吗？</p></blockquote><p>SpringMVC的执行流程是这个框架最核心的内容。</p><ul><li>视图阶段（老旧JSP等）</li><li>前后端分离阶段（接口开发，异步）</li></ul><br><p><strong>视图阶段</strong></p><p><img src="https://mugrain.oss-cn-hangzhou.aliyuncs.com/cswiki/image-20231224032311005.png" alt="image-20231224032311005" loading="lazy"></p><p><strong>前后端分离阶段</strong></p><p><img src="https://mugrain.oss-cn-hangzhou.aliyuncs.com/cswiki/image-20231224032336004.png" alt="image-20231224032336004" loading="lazy"></p><br><div class="warning custom-block"><p class="custom-block-title">💡思考：SpringMVC的执行流程知道嘛</p><p>1、用户发送出请求到前端控制器 DispatcherServlet，这是一个调度中心</p><p>2、DispatcherServlet 收到请求调用 HandlerMapping（处理器映射器）。</p><p>3、HandlerMapping 找到具体的处理器 （可查找xml配置或注解配置），生成处理器对象及<strong>处理器拦截器</strong>(如果有)，再一起返回给DispatcherServlet。</p><p>4、DispatcherServlet 调用 HandlerAdapter（处理器适配器）。</p><p>5、HandlerAdapter 经过适配调用具体的处理器（Handler/Controller）。</p><p>6、Controller 执行完成返回 ModelAndView 对象。</p><p>7、HandlerAdapter 将 Controller 执行结果 ModelAndView 返回给 DispatcherServlet。</p><p>8、DispatcherServlet 将 ModelAndView 传给 ViewReslover（视图解析器）。</p><p>9、ViewReslover 解析后返回具体 View（视图）。</p><p>10、DispatcherServlet 根据 View 进行渲染视图（即将模型数据填充至视图中）。</p><p>11、DispatcherServlet 响应用户。</p><p>当然现在的开发，基本都是前后端分离的开发的，并没有视图这些，一般都是handler中使用Response直接结果返回</p></div><h2 id="springboot" tabindex="-1">SpringBoot <a class="header-anchor" href="#springboot" aria-label="Permalink to &quot;SpringBoot&quot;">​</a></h2><h3 id="自动配置原理" tabindex="-1">自动配置原理 <a class="header-anchor" href="#自动配置原理" aria-label="Permalink to &quot;自动配置原理&quot;">​</a></h3><p>SpringBoot 中最高频的一道面试题，也是框架最核心的思想。</p><p><img src="https://mugrain.oss-cn-hangzhou.aliyuncs.com/cswiki/image-20231224130558060.png" alt="image-20231224130558060" loading="lazy"></p><ul><li><code>@SpringBootConfiguration</code>: 该注解与<code>@Configutation</code>注解作用相同，用来声明当前也是一个配置类。</li><li><code>@ComponentScan</code>: 组件扫描，默认扫描当前引导类所在包及其子包。</li><li><code>@EnableAutoConfiguration</code>: SpringBoot实现自动化配置的核心注解。</li></ul><p><img src="https://mugrain.oss-cn-hangzhou.aliyuncs.com/cswiki/image-20231224131426774.png" alt="image-20231224131426774" loading="lazy"></p><p>举例：查看 <code>RedisAutoConfiguration</code> 的配置信息</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 是一个配置类</span></span>
<span class="line highlighted"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">AutoConfiguration</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 判断是否有对应的字节码</span></span>
<span class="line highlighted"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ConditionalOnClass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(RedisOperations.class) </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">EnableConfigurationProperties</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(RedisProperties.class)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ LettuceConnectionConfiguration.class, JedisConnectionConfiguration.class })</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> RedisAutoConfiguration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Bean</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 判断环境中有没有对应的 Bean</span></span>
<span class="line highlighted"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ConditionalOnMissingBean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;redisTemplate&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ConditionalOnSingleCandidate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(RedisConnectionFactory.class)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> RedisTemplate&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">redisTemplate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(RedisConnectionFactory </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">redisConnectionFactory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		RedisTemplate&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; template </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> RedisTemplate&lt;&gt;();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		template.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setConnectionFactory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(redisConnectionFactory);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">		return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> template;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Bean</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ConditionalOnMissingBean</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ConditionalOnSingleCandidate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(RedisConnectionFactory.class)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> StringRedisTemplate </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">stringRedisTemplate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(RedisConnectionFactory </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">redisConnectionFactory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">		return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> StringRedisTemplate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(redisConnectionFactory);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><br><div class="warning custom-block"><p class="custom-block-title">💡思考：Springboot自动配置原理</p><p>SpringBoot项目中有个注解 @SpringBootApplication，主要由三个注解组成。</p><ul><li><code>@SpringBootConfiguration</code> 表明这个类当前是配置类。</li><li><code>@ComponentScan</code> 表明默认扫描当前引导类所在包及其子包。</li><li><code>@EnableAutoConfiguration</code> 是实现自动化配置的核心包。其主要通过 <code>@Import</code> 注解导入相应的配置。内部读取了该项目和该项目引用的 Jar 包下 classpath 下 <code>METE/spring.factories</code> 文件中的所配置类的全类名。并会有 <code>@ConditionalOnClass</code> 注解判断是否有对象的 class 文件，如果有则加载该类，把这个配置类的所有 Bean 放入 Spring 容器中。</li></ul></div><br><h3 id="spring-框架常见注解" tabindex="-1">Spring 框架常见注解 <a class="header-anchor" href="#spring-框架常见注解" aria-label="Permalink to &quot;Spring 框架常见注解&quot;">​</a></h3><blockquote><p>面试官：Spring框架常见注解（Spring、SpringBoot、SpringMVC）</p></blockquote><ul><li>Spring 常见的注解有哪些？</li><li>SpringMVC 常见的注解有哪些？</li><li>SpringBoot 常见的注解有哪些？</li></ul><br><p><strong>Spring常见注解</strong></p><p><img src="https://mugrain.oss-cn-hangzhou.aliyuncs.com/cswiki/image-20231224131918449.png" alt="image-20231224131918449" loading="lazy"></p><br><p><strong>SpringMVC常见注解</strong></p><p><img src="https://mugrain.oss-cn-hangzhou.aliyuncs.com/cswiki/image-20231224131949623.png" alt="image-20231224131949623" loading="lazy"></p><br><p><strong>SpringBoot常见注解</strong></p><p><img src="https://mugrain.oss-cn-hangzhou.aliyuncs.com/cswiki/image-20231224132051165.png" alt="image-20231224132051165" loading="lazy"></p><br><div class="warning custom-block"><p class="custom-block-title">💡思考：Spring 的常见注解有哪些？</p><p>第一类是：声明bean，有@Component、@Service、@Repository、@Controller</p><p>第二类是：依赖注入相关的，有@Autowired、@Qualifier、@Resourse</p><p>第三类是：设置作用域 @Scope</p><p>第四类是：spring配置相关的，比如@Configuration，@ComponentScan 和 @Bean</p><p>第五类是：跟aop相关做增强的注解 @Aspect，@Before，@After，@Around，@Pointcut</p><br><p>💡<strong>思考：SpringMVC 常见的注解有哪些？</strong></p><ul><li>@RequestMapping：用于映射请求路径；</li><li>@RequestBody：注解实现接收http请求的json数据，将json转换为java对象；</li><li>@RequestParam：指定请求参数的名称；</li><li>@PathViriable：从请求路径下中获取请求参数(/user/{id})，传递给方法的形式参数；</li><li>@ResponseBody：注解实现将controller方法返回对象转化为json对象响应给客户端。</li><li>@RequestHeader：获取指定的请求头数据，还有像@PostMapping、@GetMapping这些。</li></ul><br><p>💡<strong>思考：SpringBoot 常见的注解有哪些？</strong></p><p>Spring Boot的核心注解是@SpringBootApplication , 他由几个注解组成 :</p><ul><li>@SpringBootConfiguration： 组合了- @Configuration注解，实现配置文件的功能；</li><li>@EnableAutoConfiguration：打开自动配置的功能，也可以关闭某个自动配置的选项</li><li>@ComponentScan：Spring组件扫描</li></ul></div><h2 id="mybatis" tabindex="-1">MyBatis <a class="header-anchor" href="#mybatis" aria-label="Permalink to &quot;MyBatis&quot;">​</a></h2><h3 id="mybatis执行流程" tabindex="-1">MyBatis执行流程 <a class="header-anchor" href="#mybatis执行流程" aria-label="Permalink to &quot;MyBatis执行流程&quot;">​</a></h3><blockquote><p>面试官：MyBatis执行流程是怎么样的，能描述一下吗？</p></blockquote><ul><li>理解各个组件的关系</li><li>SQL执行过程（参数映射，SQL解析，执行和结果处理）</li></ul><br><p>核心配置 :<code>mybatis-config.xml</code></p><p><img src="https://mugrain.oss-cn-hangzhou.aliyuncs.com/cswiki/image-20231224133216040.png" alt="" loading="lazy"></p><p>MappendStatement对象</p><p><img src="https://mugrain.oss-cn-hangzhou.aliyuncs.com/cswiki/image-20231224133449346.png" alt="" loading="lazy"></p><br><p><strong>Mybatis执行流程</strong></p><p><img src="https://mugrain.oss-cn-hangzhou.aliyuncs.com/cswiki/image-20231224133410862.png" alt="image-20231224133410862" loading="lazy"></p><br><div class="warning custom-block"><p class="custom-block-title">💡思考：MyBatis执行流程</p><p>读取mybatis-config.xml加载运行环境和映射文件，并创建全局唯一的会话工厂SqlSessionFactory，生产SqlSession对象，包含了执行SQL语句的所有方法，并通过Executor执行器来执行数据库操作接口。其中Executor接口的执行方法中有一个MappedStatement类型的参数，封装了映射信息。通过输入参数映射来获取输出结果映射。</p></div><br><h3 id="mybatis延迟加载" tabindex="-1">Mybatis延迟加载 <a class="header-anchor" href="#mybatis延迟加载" aria-label="Permalink to &quot;Mybatis延迟加载&quot;">​</a></h3><blockquote><p>面试官：Mybatis是否支持延迟加载？</p></blockquote><p><img src="https://mugrain.oss-cn-hangzhou.aliyuncs.com/cswiki/image-20231224135431031.png" alt="image-20231224135431031" loading="lazy"></p><p>查询用户的时候，把用户所属的订单数据也查询出来，这个是<mark>立即加载</mark></p><p>查询用户的时候，暂时不查询订单数据，当需要订单的时候，再查询订单，这个就是<mark>延迟加载</mark></p><br><p><strong>延迟加载原理</strong></p><ol><li>使用CGLIB创建目标对象的代理对象</li><li>当调用目标方法<code>user.getOrderList()</code>时，进入拦截器invoke方法，发现<code>user.getOrderList()</code>是null值，执行sql查询order列</li><li>把order查询上来，然后调用<code>user.setOrderList(List&lt;Order&gt; orderList)</code> ，接着完成<code>user.getOrderList()</code>方法的调用</li></ol><p><img src="https://mugrain.oss-cn-hangzhou.aliyuncs.com/cswiki/image-20231224135627464.png" alt="image-20231224135627464" loading="lazy"></p><br><div class="warning custom-block"><p class="custom-block-title">💡思考：Mybatis是否支持延迟加载？</p><p>延迟加载就是指用到数据才加载，没有用到数据不加载。Mybatis支持一对一关联对象和一对多关联对象的延迟加载。可以通过配置是否加载延迟加载来实现，默认是关闭的。</p><br><p>💡<strong>思考：延迟加载的底层原理知道吗？</strong></p><p>延迟加载底层是通过CGLIB动态代理实现的。通过创建目标对象的代理对象，目标对象是开启延迟加载的mapper，当调用目标方法后进入拦截器invoke方法，发现目标对象为空则执行SQL，在获取数据以后调用SET方法设置属性值，在查询目标方法则会有数据。</p></div><br><h3 id="mybatis一级二级缓存" tabindex="-1">Mybatis一级二级缓存 <a class="header-anchor" href="#mybatis一级二级缓存" aria-label="Permalink to &quot;Mybatis一级二级缓存&quot;">​</a></h3><blockquote><p>面试官：Mybatis的一级，二级缓存用过吗？</p></blockquote><p><img src="https://mugrain.oss-cn-hangzhou.aliyuncs.com/cswiki/image-20231224140431881.png" alt="image-20231224140431881" loading="lazy"></p><br><p><strong>一级缓存</strong></p><p>基于 PerpetualCache 的 HashMap 本地缓存，其存储作用域为 Session，当Session进行flush或close之后，该Session中的所有Cache就将清空，默认打开一级缓存</p><p><img src="https://mugrain.oss-cn-hangzhou.aliyuncs.com/cswiki/image-20231224140515933.png" alt="" loading="lazy"></p><br><p><strong>二级缓存</strong></p><p>二级缓存是基于namespace和mapper的作用域起作用的，不是依赖于SQL session，默认也是采用 PerpetualCache，HashMap 存储</p><p><img src="https://mugrain.oss-cn-hangzhou.aliyuncs.com/cswiki/image-20231224140612820.png" alt="image-20231224140612820" loading="lazy"></p><p>注意事项</p><ol><li><p>对于缓存数据更新机制，当某一个作用域(一级缓存 Session/二级缓存Namespaces)的进行了新增、修改、删除操作后，默认该作用域下所有 select 中的缓存将被 clear</p></li><li><p>二级缓存需要缓存的数据实现Serializable接口</p></li><li><p>只有会话提交或者关闭以后，一级缓存中的数据才会转移到二级缓存中</p></li></ol><br><div class="warning custom-block"><p class="custom-block-title">💡思考：Mybatis的二级缓存什么时候会清理缓存中的数据</p><ul><li>一级缓存是基于session的HashMap本地缓存，当session进行flush或close则对缓存进行清空，默认开启。</li><li>二级缓存是基于namespace和mapper作用域的本地缓存，需要打开配置才会生效。</li><li>二级缓存会在数据进行新增，修改，删除后对所有默认改作用域下的select缓存进行clear。</li></ul></div>`,208);function m(s,b,A,B,C,D){const t=n("ArticleMetadata"),h=n("ClientOnly");return l(),k("div",null,[u,r(h,null,{default:E(()=>{var i,a;return[(((i=s.$frontmatter)==null?void 0:i.aside)??!0)&&(((a=s.$frontmatter)==null?void 0:a.showArticleMetadata)??!0)?(l(),d(t,{key:0,article:s.$frontmatter},null,8,["article"])):c("",!0)]}),_:1}),F])}const q=e(y,[["render",m]]);export{v as __pageData,q as default};
